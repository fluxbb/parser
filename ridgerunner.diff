diff --git a/admin_parser.php b/admin_parser.php
new file mode 100644
index 0000000..24d56b5
--- /dev/null
+++ b/admin_parser.php
@@ -0,0 +1,474 @@
+<?php
+
+/**
+ * Copyright (C) 2008-2010 FluxBB
+ * based on code by Rickard Andersson copyright (C) 2002-2008 PunBB
+ * License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher
+ */
+
+// Tell header.php to use the admin template
+define('PUN_ADMIN_CONSOLE', 1);
+
+define('PUN_ROOT', dirname(__FILE__).'/');
+require PUN_ROOT.'include/common.php';
+require PUN_ROOT.'include/common_admin.php';
+
+
+if ($pun_user['g_id'] != PUN_ADMIN)
+	message($lang_common['No permission']);
+
+// Load the admin_parser.php language file
+require PUN_ROOT.'lang/'.$admin_language.'/admin_parser.php';
+
+// This is where the parser data lives and breathes.
+$cache_file = PUN_ROOT.'cache/cache_parser_data.php';
+
+// If RESET button pushed, or no cache file, re-compile master bbcode source file.
+if (isset($_POST['reset']) || !file_exists($cache_file)) {
+	require_once(PUN_ROOT.'include/bbcd_source.php');
+	require_once(PUN_ROOT.'include/bbcd_compile.php');
+	redirect('admin_parser.php', $lang_admin_parser['reset_success']);
+}
+
+// Load the current BBCode $pd array from include/parser_data.inc.php.
+require_once($cache_file);			// Fetch $pd compiled global regex data.
+$bbcd = $pd['bbcd'];				// Local scratch copy of $bbcd.
+$smilies = $pd['smilies'];			// Local scratch copy of $smilies.
+$config = $pd['config'];			// Local scratch copy of $config.
+$syntaxes = $pd['syntaxes'];		// Local scratch copy of $syntaxes.
+$count = count($bbcd);
+
+if (isset($_POST['form_sent']))
+{
+	confirm_referrer('admin_parser.php');
+
+	// Upload new smiley image to img/smilies
+	if (isset($_POST['upload']) && isset($_FILES['new_smiley']) && isset($_FILES['new_smiley']['error'])) {
+		$f =& $_FILES['new_smiley'];
+		switch($f['error']) {
+		case 0: // 0: Successful upload.
+			$name = str_replace(' ', '_', $f['name']);			// Convert spaces to underscoree.
+			$name = preg_replace('/[^\w\-.]/S', '', $name);		// Weed out all unsavory filename chars.
+			if (preg_match('/^[\w\-.]++$/', $name)) {			// If we have a valid filename?
+				if (preg_match('%^image/%', $f['type'])) {		// If we have an image file type?
+					if ($f['size'] > 0 && $f['size'] <= $pun_config['o_avatars_size']) {
+						if (move_uploaded_file($f['tmp_name'], PUN_ROOT .'img/smilies/'. $name)) {
+							redirect('admin_parser.php', $lang_admin_parser['upload success']);
+						} else
+						{ //  Error #1: 'Smiley upload failed. Unable to move to smiley folder.'.
+							message($lang_admin_parser['upload_err_1']);
+						}
+					} else
+					{ // Error #2: 'Smiley upload failed. File is too big.'
+						message($lang_admin_parser['upload_err_2']);
+					}
+				} else
+				{ // Error #3: 'Smiley upload failed. File type is not an image.'.
+					message($lang_admin_parser['upload_err_3']);
+				}
+			} else
+			{ // Error #4: 'Smiley upload failed. Bad filename.'
+				message($lang_admin_parser['upload_err_4']);
+			}
+			break;
+		case 1: // case 1 similar to case 2 so fall through...
+		case 2: message($lang_admin_parser['upload_err_2']);	// File exceeds MAX_FILE_SIZE.
+		case 3: message($lang_admin_parser['upload_err_5']);	// File only partially uploaded.
+//		case 4: break; // No error. Normal response when this form element left empty
+		case 4: message($lang_admin_parser['upload_err_6']);	// No filename.
+		case 6: message($lang_admin_parser['upload_err_7']);	// No temp folder.
+		case 7: message($lang_admin_parser['upload_err_8']);	// Cannot write to disk.
+		default: message($lang_admin_parser['upload_err_9']);		// Generic/unknown error
+		}
+	}
+
+	// Set new $config values:
+	if (isset($_POST['config'])) {
+		$pcfg =& $_POST['config'];
+
+		if (isset($pcfg['textile'])) {
+			if ($pcfg['textile'] == '1')	$config['textile'] = TRUE;
+			else							$config['textile'] = FALSE;
+		}
+		if (isset($pcfg['quote_links'])) {
+			if ($pcfg['quote_links'] == '1')	$config['quote_links'] = TRUE;
+			else							$config['quote_links'] = FALSE;
+		}
+		if (isset($pcfg['quote_imgs'])) {
+			if ($pcfg['quote_imgs'] == '1')	$config['quote_imgs'] = TRUE;
+			else							$config['quote_imgs'] = FALSE;
+		}
+		if (isset($pcfg['valid_imgs'])) {
+			if ($pcfg['valid_imgs'] == '1') $config['valid_imgs'] = TRUE;
+			else							$config['valid_imgs'] = FALSE;
+		}
+		if (isset($pcfg['click_imgs'])) {
+			if ($pcfg['click_imgs'] == '1') $config['click_imgs'] = TRUE;
+			else							$config['click_imgs'] = FALSE;
+		}
+		if (isset($pcfg['syntax_style']) &&
+				file_exists(PUN_ROOT .'bin/'. $pcfg['syntax_style'])) {
+			$config['syntax_style'] = $pcfg['syntax_style'];
+		}
+		if (isset($pcfg['max_size']) && preg_match('/^\d++$/', $pcfg['max_size'])) {
+			$config['max_size'] = (int)$pcfg['max_size'];
+		}
+		if (isset($pcfg['max_width']) && preg_match('/^\d++$/', $pcfg['max_width'])) {
+			$config['max_width'] = (int)$pcfg['max_width']; // Limit default to maximum.
+			if ($config['def_width'] > $config['max_width']) $config['def_width'] = $config['max_width'];
+		}
+		if (isset($pcfg['max_height']) && preg_match('/^\d++$/', $pcfg['max_height'])) {
+			$config['max_height'] = (int)$pcfg['max_height']; // Limit default to maximum.
+			if ($config['def_height'] > $config['max_height']) $config['def_height'] = $config['max_height'];
+		}
+		if (isset($pcfg['def_width']) && preg_match('/^\d++$/', $pcfg['def_width'])) {
+			$config['def_width'] = (int)$pcfg['def_width']; // Limit default to maximum.
+			if ($config['def_width'] > $config['max_width']) $config['def_width'] = $config['max_width'];
+		}
+		if (isset($pcfg['def_height']) && preg_match('/^\d++$/', $pcfg['def_height'])) {
+			$config['def_height'] = (int)$pcfg['def_height']; // Limit default to maximum.
+			if ($config['def_height'] > $config['max_height']) $config['def_height'] = $config['max_height'];
+		}
+		if (isset($pcfg['smiley_size']) && preg_match('/^\s*+(\d++)\s*+%?+\s*+$/', $pcfg['smiley_size'], $m)) {
+			$config['smiley_size'] = (int)$m[1]; // Limit default to maximum.
+		}
+	}
+	// Set new $bbcd values:
+	foreach($bbcd as $tagname => $tagdata) {
+		if ($tagname == '_ROOT_') continue; // Skip last pseudo-tag
+		$tag =& $bbcd[$tagname];
+		if(isset($_POST[$tagname.'_in_post'])) {
+			if  ($_POST[$tagname.'_in_post'] == '1')	$tag['in_post']	= TRUE;
+			else										$tag['in_post']	= FALSE;
+		}
+		if(isset($_POST[$tagname.'_in_sig'])) {
+			if  ($_POST[$tagname.'_in_sig'] == '1')		$tag['in_sig']	= TRUE;
+			else										$tag['in_sig']	= FALSE;
+		}
+		if(isset($_POST[$tagname.'_depth_max']) && preg_match('/^\d++$/', $_POST[$tagname.'_depth_max'])) {
+			$tag['depth_max'] = (int)$_POST[$tagname.'_depth_max'];
+		}
+	}
+	// Set new $smilies values:
+	if (isset($_POST['smiley_text']) && is_array($_POST['smiley_text']) &&
+		isset($_POST['smiley_file']) && is_array($_POST['smiley_file']) &&
+		count($_POST['smiley_text']) === count($_POST['smiley_file'])) {
+		$stext =& $_POST['smiley_text'];
+		$sfile =& $_POST['smiley_file'];
+		$len = count($stext);
+		$good = '';
+		$smilies = array();
+		for ($i = 0; $i < $len; ++$i) { // Loop through all posted smileys.
+			if ($stext[$i] && $sfile !== 'select new file') {
+				$smilies[$stext[$i]] = array('file' => $sfile[$i]);
+//				message(sprintf("New smiley: \"%s\" = %s\n", $stext[$i], $sfile[$i]));
+			}
+		}
+	}
+
+	require_once("include/bbcd_compile.php"); // Compile $bbcd and save into $pd['bbcd']
+	redirect('admin_parser.php', $lang_admin_parser['save_success']);
+}
+
+$page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), $lang_admin_common['Admin'], $lang_admin_common['Parser']);
+define('PUN_ACTIVE_PAGE', 'admin');
+require PUN_ROOT.'header.php';
+
+generate_admin_menu('parser');
+
+?>
+	<div class="blockform">
+		<h2><span><?php echo $lang_admin_parser['Parser head'] ?></span></h2>
+		<div class="box">
+			<form method="post" action="admin_parser.php" enctype="multipart/form-data">
+				<p class="submittop">
+					<input type="submit" name="save" value="<?php echo $lang_admin_common['Save changes'] ?>" />
+					<input type="submit" name="reset" value="<?php echo $lang_admin_parser['reset defaults'] ?>" />
+				</p>
+				<div class="inform">
+					<input type="hidden" name="form_sent" value="1" />
+					<fieldset>
+						<legend><?php echo $lang_admin_parser['Config subhead'] ?></legend>
+						<div class="infldset">
+							<table class="aligntop" cellspacing="0">
+
+								<tr>
+									<th scope="row"><?php echo $lang_admin_parser['syntax style'] ?></th>
+									<td colspan="2">
+										<select name="config[syntax_style]">
+<?php
+	$shcss_files = get_shcss();
+	$oldfile = $config['syntax_style'];
+?>
+<?php
+		foreach($shcss_files as $file) {
+			if ($file === $oldfile) {
+				echo("\t\t\t\t\t\t\t\t\t\t\t<option selected=\"selected\">" . $file . "</option>\n");
+			} else {
+				echo("\t\t\t\t\t\t\t\t\t\t\t<option>" . $file . "</option>\n");
+			}
+		}
+?>
+										</select>
+									</td>
+									<td><span><?php echo $lang_admin_parser['syntax style help'] ?></span></td>
+								</tr>
+								<tr>
+									<th scope="row"><?php echo $lang_admin_parser['textile'] ?></th>
+									<td colspan="2">
+										<input type="radio" name="config[textile]" value="1"<?php if ($config['textile']) echo ' checked="checked"' ?> /> <strong><?php echo $lang_admin_common['Yes'] ?></strong>   <input type="radio" name="config[textile]" value="0"<?php if (!$config['textile']) echo ' checked="checked"' ?> /> <strong><?php echo $lang_admin_common['No'] ?></strong>
+									</td>
+									<td>
+										<span><?php echo $lang_admin_parser['textile help'] ?></span>
+									</td>
+								</tr>
+								<tr>
+									<th scope="row"><?php echo $lang_admin_parser['quote_links'] ?></th>
+									<td colspan="2">
+										<input type="radio" name="config[quote_links]" value="1"<?php if ($config['quote_links']) echo ' checked="checked"' ?> /> <strong><?php echo $lang_admin_common['Yes'] ?></strong>   <input type="radio" name="config[quote_links]" value="0"<?php if (!$config['quote_links']) echo ' checked="checked"' ?> /> <strong><?php echo $lang_admin_common['No'] ?></strong>
+									</td>
+									<td>
+										<span><?php echo $lang_admin_parser['quote_links help'] ?></span>
+									</td>
+								</tr>
+								<tr>
+									<th scope="row"><?php echo $lang_admin_parser['quote_imgs'] ?></th>
+									<td colspan="2">
+										<input type="radio" name="config[quote_imgs]" value="1"<?php if ($config['quote_imgs']) echo ' checked="checked"' ?> /> <strong><?php echo $lang_admin_common['Yes'] ?></strong>   <input type="radio" name="config[quote_imgs]" value="0"<?php if (!$config['quote_imgs']) echo ' checked="checked"' ?> /> <strong><?php echo $lang_admin_common['No'] ?></strong>
+									</td>
+									<td>
+										<span><?php echo $lang_admin_parser['quote_imgs help'] ?></span>
+									</td>
+								</tr>
+								<tr>
+									<th scope="row"><?php echo $lang_admin_parser['click_imgs'] ?></th>
+									<td colspan="2">
+										<input type="radio" name="config[click_imgs]" value="1"<?php if ($config['click_imgs']) echo ' checked="checked"' ?> /> <strong><?php echo $lang_admin_common['Yes'] ?></strong>   <input type="radio" name="config[click_imgs]" value="0"<?php if (!$config['click_imgs']) echo ' checked="checked"' ?> /> <strong><?php echo $lang_admin_common['No'] ?></strong>
+									</td>
+									<td>
+										<span><?php echo $lang_admin_parser['click_imgs help'] ?></span>
+									</td>
+								</tr>
+
+								<tr>
+									<th scope="row"><?php echo $lang_admin_parser['valid_imgs'] ?></th>
+									<td colspan="2">
+										<input type="radio" name="config[valid_imgs]" value="1"<?php if ($config['valid_imgs']) echo ' checked="checked"'; if (!ini_get('allow_url_fopen')) echo(' disabled="disabled" title="'. htmlspecialchars($lang_admin_parser['unavailable']) .'"'); ?> /> <strong><?php echo $lang_admin_common['Yes'] ?></strong>
+										<input type="radio" name="config[valid_imgs]" value="0"<?php if (!$config['valid_imgs']) echo ' checked="checked"'; if (!ini_get('allow_url_fopen')) echo(' disabled="disabled" title="'. htmlspecialchars($lang_admin_parser['unavailable']) .'"'); ?> /> <strong><?php echo $lang_admin_common['No'] ?></strong>
+									</td>
+									<td><?php echo $lang_admin_parser['valid_imgs help'] ?></td>
+								</tr>
+								<tr>
+									<th scope="row"><?php echo $lang_admin_parser['max_size'] ?></th>
+									<td colspan="2">
+										<input type="text" name="config[max_size]" size="10" maxlength="8" value="<?php echo($config['max_size'])?>"<?php if (!ini_get('allow_url_fopen')) echo(' disabled="disabled" title="'. htmlspecialchars($lang_admin_parser['unavailable']) .'"'); ?> />
+									</td>
+									<td><span><?php echo $lang_admin_parser['max_size help'] ?></span></td>
+								</tr>
+								<tr>
+									<th scope="row"><?php echo $lang_admin_parser['def_xy'] ?></th>
+									<td>
+										<input type="text" name="config[def_width]" size="5" maxlength="5" value="<?php echo $config['def_width'] ?>" /> X:Width
+									</td>
+									<td>
+										<input type="text" name="config[def_height]" size="5" maxlength="5" value="<?php echo $config['def_height'] ?>" /> Y:Height
+									</td>
+									<td>
+										<span><?php echo $lang_admin_parser['def_xy help'] ?></span>
+									</td>
+								</tr>
+
+
+
+
+
+								<tr>
+									<th scope="row"><?php echo $lang_admin_parser['max_xy'] ?></th>
+									<td>
+										<input type="text" name="config[max_width]" size="5" maxlength="5" value="<?php echo $config['max_width'] ?>" /> X:Width
+									</td>
+									<td>
+										<input type="text" name="config[max_height]" size="5" maxlength="5" value="<?php echo $config['max_height'] ?>" /> Y:Height
+									</td>
+									<td><?php echo $lang_admin_parser['max_xy help'] ?></td>
+								</tr>
+
+								<tr>
+									<th scope="row"><?php echo $lang_admin_parser['smiley_size'] ?></th>
+									<td colspan=2>
+										<input type="text" name="config[smiley_size]" size="5" maxlength="5" value="<?php echo $config['smiley_size'] .'%' ?>" />
+									</td>
+									<td>
+										<span><?php echo $lang_admin_parser['smiley_size help'] ?></span>
+									</td>
+								</tr>
+
+							</table>
+						</div>
+					</fieldset>
+				</div>
+				<div class="inform">
+					<fieldset>
+						<legend><?php echo $lang_admin_parser['Smilies subhead'] ?></legend>
+						<div class="infldset">
+							<table cellspacing="0">
+							<thead>
+								<tr>
+									<th scope="col"><?php echo $lang_admin_parser['smiley_text_label'] ?></th>
+									<th scope="col"><?php echo $lang_admin_parser['smiley_file_label'] ?></th>
+									<th scope="col">:)</th>
+								</tr>
+							</thead>
+							<tbody>
+<?php
+	$smiley_files = get_smiley_files();
+	$i = -1;
+	foreach($smilies as $key => $value) {
+		$i++;
+		$oldfile = $value['file'];
+?>
+								<tr>
+									<td><input type="text" name="smiley_text[<?php echo($i); ?>]" value="<?php echo(pun_htmlspecialchars($key)); ?>" size="20" maxlength="80" /></td>
+									<td>
+										<select name="smiley_file[<?php echo($i); ?>]">
+<?php
+		foreach($smiley_files as $file) {
+			if ($file === $oldfile) {
+				echo("\t\t\t\t\t\t\t\t\t\t\t<option selected=\"selected\">" . $file . "</option>\n");
+			} else {
+				echo("\t\t\t\t\t\t\t\t\t\t\t<option>" . $file . "</option>\n");
+			}
+		}
+?>
+										</select>
+									</td>
+									<td>
+										<?php echo($value['html']); ?>
+									</td>
+								</tr>
+<?php
+	}
+?>
+								<tr>
+									<td><input type="text" name="smiley_text[<?php echo(++$i); ?>]" value="" size="20" maxlength="80" /><br />New smiley text</td>
+									<td>
+										<select name="smiley_file[<?php echo($i); ?>]">
+											<option selected="selected">select new file</option>
+<?php
+		foreach($smiley_files as $file) {
+			echo("\t\t\t\t\t\t\t\t\t\t\t<option>" . $file . "</option>\n");
+		}
+?>
+										</select><br />New smiley image
+									</td>
+									<td></td>
+								</tr>
+								<tr>
+									<th scope="row"><?php echo($lang_admin_parser['smiley_upload']); ?></th>
+ <?php if (ini_get('file_uploads')) { ?>
+									<td><input type="hidden" name="MAX_FILE_SIZE" value="<?php echo $pun_config['o_avatars_size'] ?>" />
+										<input type="file" name="new_smiley" id="upload_smiley" /></td>
+									<td><input type="submit" name="upload" value="<?php echo($lang_admin_parser['upload_button']); ?>" /></td>
+<?php } else { ?>
+									<td colspan="2"><?php echo($lang_admin_parser['upload_off']); ?></td>
+<?php } ?>
+								</tr>
+							</tbody>
+							</table>
+						</div>
+					</fieldset>
+				</div>
+
+
+
+
+
+
+				<div class="inform">
+					<fieldset>
+						<legend><?php echo $lang_admin_parser['BBCodes subhead'] ?></legend>
+						<div class="infldset">
+							<table cellspacing="0">
+							<thead>
+								<tr>
+									<th class="tcl" scope="col"><?php echo $lang_admin_parser['tagname_label'] ?></th>
+									<th class="tc3" scope="col"><?php echo $lang_admin_parser['in_post_label'] ?></th>
+									<th class="hidehead" scope="col"><?php echo $lang_admin_parser['in_sig_label'] ?></th>
+									<th class="tc2" scope="col"><?php echo $lang_admin_parser['depth_max'] ?></th>
+								</tr>
+							</thead>
+							<tbody>
+<?php
+foreach($bbcd as $tagname => $tagdata) {
+	if ($tagname == '_ROOT_') continue; // Skip last pseudo-tag
+	$title = isset($lang_admin_parser['tag_summary'][$tagname]) ?
+				$lang_admin_parser['tag_summary'][$tagname] : '';
+
+/*
+									<th class="tc2" scope="col"><?php echo $lang_admin_parser['tagtype_label'] ?></th>
+
+									<td>
+										<select name="<?php echo($tagname); ?>_type">
+											<option<?php if ($tagdata['tag_type'] == 'ghost') echo( ' selected="selected"'); ?>>Ghost</option>
+											<option<?php if ($tagdata['tag_type'] == 'normal') echo( ' selected="selected"'); ?>>Normal</option>
+											<option<?php if ($tagdata['tag_type'] == 'atomic') echo( ' selected="selected"'); ?>>Atomic</option>
+											<option<?php if ($tagdata['tag_type'] == 'hidden') echo( ' selected="selected"'); ?>>Hidden</option>
+										</select>
+									</td>
+*/
+ ?>
+								<tr>
+									<th scope="row" title="<?php echo($title); ?>"><?php echo('['. $tagname .']') ?></th>
+									<td>
+										<input type="radio" name="<?php echo($tagname) ?>_in_post" value="1"<?php if ($bbcd[$tagname]['in_post']) echo ' checked="checked"' ?> /> <strong><?php echo $lang_admin_common['Yes'] ?></strong>   <input type="radio" name="<?php echo($tagname) ?>_in_post" value="0"<?php if (!$bbcd[$tagname]['in_post']) echo ' checked="checked"' ?> /> <strong><?php echo $lang_admin_common['No'] ?></strong>
+									</td>
+									<td>
+										<input type="radio" name="<?php echo($tagname) ?>_in_sig" value="1"<?php if ($bbcd[$tagname]['in_sig']) echo ' checked="checked"' ?> /> <strong><?php echo $lang_admin_common['Yes'] ?></strong>   <input type="radio" name="<?php echo($tagname) ?>_in_sig" value="0"<?php if (!$bbcd[$tagname]['in_sig']) echo ' checked="checked"' ?> /> <strong><?php echo $lang_admin_common['No'] ?></strong>
+									</td>
+									<td>
+										<input type="text" size="10" name="<?php echo($tagname) ?>_depth_max" value="<?php echo($bbcd[$tagname]['depth_max']); ?>" <?php if ($tagdata['html_type'] === 'inline' || $tagdata['tag_type'] === 'hidden') echo(' disabled="disabled" style="display: none;"'); ?> />
+									</td>
+								</tr>
+<?php } ?>
+							</tbody>
+							</table>
+						</div>
+					</fieldset>
+				</div>
+
+
+				<p class="submitend">
+					<input type="submit" name="save" value="<?php echo $lang_admin_common['Save changes'] ?>" />
+					<input type="submit" name="reset" value="<?php echo $lang_admin_parser['reset defaults'] ?>" />
+				</p>
+			</form>
+		</div>
+	</div>
+	<div class="clearer"></div>
+</div>
+<?php
+
+// Helper function returns array of smiley image files
+//   stored in the img/smilies directory.
+function get_smiley_files() {
+	$imgfiles = array();
+	$filelist = scandir(PUN_ROOT.'img/smilies');
+	foreach($filelist as $file) {
+		if (preg_match('/\.(?:png|gif|jpe?g)$/', $file))
+			$imgfiles[] = $file;
+	}
+	return $imgfiles;
+}
+
+// Helper function returns array of syntax highlighter CSS files
+//   stored in the img/smilies directory.
+function get_shcss() {
+	$cssfiles = array();
+	$filelist = scandir(PUN_ROOT.'bin');
+	foreach($filelist as $file) {
+		if (preg_match('/^sh(.*)\.css$/i', $file)) $cssfiles[] = $file;
+	}
+	return $cssfiles;
+}
+
+require PUN_ROOT.'footer.php';
diff --git a/bbcd_bootstrap.php b/bbcd_bootstrap.php
new file mode 100644
index 0000000..e9a2103
--- /dev/null
+++ b/bbcd_bootstrap.php
@@ -0,0 +1,11 @@
+<?php // parser_compile bootstrap
+define('PUN_ROOT', dirname(__FILE__).'/');
+function get_base_url($str) {
+	return 'http://localhost/forums/fluxbb_dev';
+//	return 'http://localhost';
+}
+$lang_common = array('wrote' => 'wrote:');
+require_once(PUN_ROOT.'include/bbcd_source.php');	// fetch loose $bbcd array.
+// Compile $bbcd and save in include/parser_data.inc.php
+require_once(PUN_ROOT.'include/bbcd_compile.php');
+?>
diff --git a/bin/DynamicRegexHighlighter.js b/bin/DynamicRegexHighlighter.js
new file mode 100644
index 0000000..6d73194
--- /dev/null
+++ b/bin/DynamicRegexHighlighter.js
@@ -0,0 +1,360 @@
+/* <![CDATA[ */
+/* File:        DynamicRegexHighlighter.js
+ * Version:     20100921_2200
+ * Copyright:   (c) 2010 Jeff Roberson - http://jmrware.com
+ * MIT License: http://www.opensource.org/licenses/mit-license.php
+ *
+ * Summary: This script provides web page dynamic highlighting of regular
+ * expressions enclosed within HTML elements marked up with class="regex"
+ * or class="regex_x". ("regex_x is for "x" free spacing mode regexes).
+ *
+ * Usage:   See example page: DynamicRegexHighlighter.html
+ *
+ * Global variables:
+ * reAutoLoad = true;       // If true, will prepare all elements on document load.
+ *
+ * Global functions:
+ * reHighlightElement()     // Process an element containing a regex.
+ * rePutElemContents()      // Write text to element's innerHTML.
+ * reGetElemsByKlassNames() // Get child elements having specified classes.
+ * reHideHtmlSpecialChars() // Convert "&<>" to &amp;, &lt; and &gt;.
+ * reAddLoadEventFirst()    // Add function to head of window.onload chain.
+ * reAddLoadEvent()         // Add function to end of window.onload chain.
+ * reAddUnloadEvent()       // Add function to end of window.onunload chain.
+ */
+(function() { // Don't bother with first indentation level of source code.
+// Pseudo-static private closure variables:
+var re_elems; // Node list of DOM elements having class "regex" or "regex_x".
+// Compile and cache non-trivial/frequently used regular expressions:
+var re_class = {}; // Regex cache for reGetElemsByKlassNames().
+// re_1_cmt: Match character classes, comment groups, HTML tags, and comments.
+var re_1_cmt = /([^[(#<\\]+(?:\\[^<][^[(#<\\]*)*|(?:\\[^<][^[(#<\\]*)+)|(\[\^?)(\]?[^[\]\\]*(?:\\[\S\s][^[\]\\]*)*(?:\[(?::\^?\w+:\])?[^[\]\\]*(?:\\[\S\s][^[\]\\]*)*)*)\]((?:<\/?\w+\b[^>]*>)*)((?:(?:[?*+]|\{\d+(?:,\d*)?\})[+?]?)?)|(\((?!\?#))|(\(\?#[^)]*\))|((?:<\/?\w+\b[^>]*>)+)|(#.*)/g;
+// re_1_nocmt: Match character classes and comment groups (no comments).
+var re_1_nocmt = /([^[(\\]+(?:\\[\S\s][^[(\\]*)*|(?:\\[\S\s][^[(\\]*)+)|(\[\^?)(\]?[^[\]\\]*(?:\\[\S\s][^[\]\\]*)*(?:\[(?::\^?\w+:\])?[^[\]\\]*(?:\\[\S\s][^[\]\\]*)*)*)\]((?:<\/?\w+\b[^>]*>)*)((?:(?:[?*+]|\{\d+(?:,\d*)?\})[+?]?)?)|(\((?!\?#))|(\(\?#[^)]*\))/g;
+// re_2: Match inner (non-nested) PCRE syntax regex groups.
+var re_2 = /\((\?(?:[:|>=!]|&gt;|&lt;[=!]|<[=!]|P?&lt;\w+&gt;|P?<\w+>|'\w+'|(?=<span[^>]*>&#40;)|\((?:[+\-]?\d+|&lt;\w+&gt;|<\w+>|'\w+'|R&amp;\w+|R&\w+|\w+)\)|(?:R|(?:-?[iJmsUx])+|[+\-]?\d+|&amp;\w+|&\w+|P&gt;\w+|P>\w+|P=\w+)(?=\))))?([^()]*)\)((?:<\/?\w+\b[^>]*>)*)((?:(?:[?*+]|\{\d+(?:,\d*)?\})[+?]?)?)/g;
+// re_escapedgroupdelims: Convert escaped group delimiter chars to HTML entities.
+var re_escapedgroupdelims = /([^\\]+(?:\\[^()|][^\\]*)*|(?:\\[^()|][^\\]*)+)|\\([()|])/g;
+// re_open_html_tag: Match HTML opening tag with at least one attribute.
+var re_open_html_tag = /<(\w+\b(?:\s+[\w\-.:]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[\w\-.:]+))?)+\s*\/?)>/g;
+// re_over and re_out: Used by reOnmouseover and reOnmouseout event handlers.
+var re_over = /\bregex_hl\b/;
+var re_out = /\s*\bregex_hl\b/;
+
+// Global variables:
+window.reAutoLoad = true; // If true, will prepare all elements on document load.
+
+// Global exported functions:
+window.reHighlightElement = function(elem) {
+    var cc_cnt = 0;         // [character classes].
+    var cmt_cnt = 0;        // # comments.
+    var cmtgrp_cnt = 0;     // (?# comment groups).
+    var grp_cnt = 0;        // (?: PCRE groups).
+    var brgrp_cnt = 0;      // (?|(branch)|(reset)) groups.
+    var capgrp_cnt = 0;     // (capture groups).
+    var text;               // Element contents string.
+    var spans;              // Node list of span elements.
+    var span_cnt;           // Count of spans in regex element.
+    var span;               // Current DOM span node.
+    var title;              // Current node's title attribute.
+    var sibs;               // Array of sibling span nodes.
+    var sib_cnt;            // Count of sibling span nodes.
+    var str;                // Temp string.
+    var el;                 // Temp node element.
+    var i, j;               // Loop indexes.
+    var re_drh_title = /^(?:[cnmbgp]\d+$|[oe]$)/; // Match marked inserted span title.
+// Phase 1: - Markup character classes, comments and comment groups
+//   and hide any enclosed regex delimiters as HTML entities.
+    var callback1 = function(m0, m1, m2, m3, m4, m5, m6, m7, m8, m9) {
+        if (m1) { // Group 1: Everything else. (includes HTML tags for nocmt case).
+            // Hide any/all escaped "()|" delimiters - convert to HTML entities.
+            return m1.replace(re_escapedgroupdelims,
+                function(m0, m1, m2) {
+                    if (m1) return m1;
+                    return {'(': '\\&#40;', ')': '\\&#41;', '|': '\\&#124;'}[m2];
+                } );
+        }
+        if (m2) { // Groups 2,3,4,5: [character class] (delim, contents, HTML, quantifier).
+            ++cc_cnt;
+            // Let m1 = common return prefix string.
+            m1 = '<span title="c' + cc_cnt + '">' + m2 + '<\/span>' + reHideDelims(m3) + '<span title="c' + cc_cnt + '">]';
+            if (m4 && m5) { // If there is an HTML tag between "]" and quantifier, wrap each separately.
+                return m1 + '<\/span>' + m4 + '<span title="c' + cc_cnt + '">' + m5 + '<\/span>';
+            } else if (m4) { // There is an HTML tag but no quantifier. Append it to the end.
+                return m1 + '<\/span>' + m4;
+            } else { // No HTML tag. Wrap end "]" together with any quantifier.
+                return m1 + m5 + '<\/span>';
+            }
+        }
+        if (m6) return m6;  // Group 6: Opening "(" (non comment group).
+        if (m7) {           // Group 7: (?# comment group).
+            ++cmtgrp_cnt;
+            return '<span title="n' + cmtgrp_cnt + '">' + reHideDelims(m7) + '<\/span>';
+        }
+        if (m8) return m8;  // Group 8: HTML <open> and <\/close> tags.
+        if (m9) {           // Group 9: # comment.
+            ++cmt_cnt;
+            return '<span title="m' + cmt_cnt + '">' + reHideDelims(m9) + '<\/span>';
+        }
+    };
+// Phase 2: - Markup matching parentheses and pipe OR symbols from inside out
+//   and hide their regex delimiters as HTML entities.
+    var callback2 = function(m0, m1, m2, m3, m4) {
+        var gtype;  // "bnn", "gnn", or "pnn".
+        if (m1) {   // Non-zero for special group types.
+            if (m1 == "?|") {
+                brgrp_cnt++;
+                gtype = "b" + brgrp_cnt;
+            } else {
+                grp_cnt++;
+                gtype = "g" + grp_cnt;
+            }
+            m1 = reHideDelims(m1);
+        } else {    // Numbered capture group.
+            capgrp_cnt++;
+            gtype = "p" + capgrp_cnt;
+            m1 = "";
+        }
+        // Markup/hide all ORs (?:between | parentheses).
+        m2 = m2.replace(/\|/g, '<span title="' + gtype + '">&#124;<\/span>');
+        // Let m1 = common return prefix string.
+        m1 = '<span title="' + gtype + '">&#40;' + m1 + '<\/span>' + m2 + '<span title="' + gtype + '">&#41;';
+        if (m3 && m4) { // HTML tag between ")" and quantifier. Wrap each separately.
+            return m1 + '<\/span>' + m3 + '<span title="' + gtype + '">' + m4 + '<\/span>';
+        } else if (m3) { // HTML tag but no quantifier. Append it to the end.
+            return m1 + '<\/span>' + m3;
+        } else { // No HTML tag. Wrap end ")" together with any quantifier.
+            return m1 + m4 + '<\/span>';
+        }
+    };
+// Process DOM element having class: "regex" or "regex_x".
+    text = elem.innerHTML;
+    if (text.length === 0) return elem;
+    // Hide any/all "<>()|[]" troublemakers from within HTML opening tags.
+    text = text.replace(re_open_html_tag,
+        function(m0, m1) {
+            return "<" +  m1.replace(/[<>()|[\]]/g,
+                function(m0) {return {"<": "&lt;", ">": "&gt;", "(": "&#40;",
+                    ")": "&#41;", "|": "&#124;", "[": "&#91;", "]": "&#93;" }[m0];
+                } ) + ">";
+        } ); // I am beginning to really appreciate the power of Javascript!
+    if (/\bregex_x\b/.test(elem.className)) {   // Phase 1.
+        text = text.replace(re_1_cmt, callback1);
+    } else {
+        text = text.replace(re_1_nocmt, callback1);
+    }
+    while (text.search(re_2) != -1) {   // Phase 2.
+        text = text.replace(re_2, callback2);
+    }
+    // Markup global/outermost | OR alternatives.
+    text = text.replace(/\|/g, '<span title="o">&#124;<\/span>');
+    // Any parentheses left at this point represent errors.
+    text = text.replace(/[()]/g, '<span class="regex_err" title="e">$&<\/span>');
+    // Reflow the document with the new markup.
+    elem = rePutElemContents(elem, text); // With PRE's, this is a bit tricky.
+// Phase 3: Add highlighting mouse event handlers.
+    capgrp_cnt = 0; // Reset capture group number.
+    brgrp_cnt = 0;  // Reset branch reset group count.
+    spans = elem.getElementsByTagName('span');
+    span_cnt = spans.length;
+    for (i = 0; i < span_cnt; i++) {
+        span = spans[i];
+        if (!span.sibs && re_drh_title.test(span.title)) {
+            sibs = []; // Gather array of all sibling spans.
+            title = span.title;
+            for (j = 0; j < span_cnt; j++) {
+                el = spans[j];
+                if (!el.sibs && el.title == title) {
+                    sibs.push(el);
+                }
+            }
+            sib_cnt = sibs.length;
+            for (j = 0; j < sib_cnt; j++) {
+                el = sibs[j]; // Loop through sibling spans.
+                el.sibs = sibs; // Store sibs array each node.
+                el.removeAttribute("title");
+                el.onmouseover = reOnMouseover;
+                el.onmouseout  = reOnMouseout;
+            }
+            if (title.charAt(0) == "b") {
+                brgrp_cnt++;
+            } else if (title.charAt(0) == "p") {
+                capgrp_cnt++;
+                str = "Capture group";
+                // If there are no (?|(branch)(reset)) groups yet, then
+                // we know the capture group number. Otherwise we don't.
+                if (brgrp_cnt === 0) str += " $" + capgrp_cnt;
+                for (j = 0; j < sib_cnt; j++) {
+                    sibs[j].title = str;
+                }
+            } else if (title == "e") {
+                for (j = 0; j < sib_cnt; j++) {
+                    sibs[j].title = "Error: Unbalanced parentheses";
+                }
+            }
+        }
+    }
+    sibs = null;
+    return elem;
+};
+window.rePutElemContents = function(elem, text) {
+    if (navigator.userAgent.indexOf('MSIE') != -1) { // IE.
+        // IE does not respect PRE's whitespace when writing innerHTML.
+        // We use outerHTML instead, which replaces the old node with
+        // a new one (the old one goes to DOM limbo). We find the new
+        // one by using a non-empty node ID attribute.
+        if (elem.nodeName == 'PRE') {
+            var m = elem.outerHTML.match(/^(<PRE[^>]*)>/i);
+            var id = elem.id;       // ID value to be restored.
+            var idfind = id;        // Non-empty ID for getElementById().
+            if (id.length > 0) {    // Case 1: Element has ID.
+                elem.outerHTML = m[1] + '>' + text + '<\/PRE>';
+            } else {                // Case 2: No ID.
+                idfind = "xREx";    // Set non-empty ID so we can find it.
+                elem.outerHTML = m[1] + ' id="xREx">' + text + '<\/PRE>';
+            }
+            elem = document.getElementById(idfind);
+            elem.id = id;           // Restore original ID.
+        } else {
+            elem.innerHTML = text;  // IE non PRE.
+        }
+    } else { // Not IE.
+        // See: http://blog.stevenlevithan.com/archives/faster-than-innerhtml
+        var el_new = elem.cloneNode(false);
+        el_new.innerHTML = text;
+        elem.parentNode.replaceChild(el_new, elem);
+        elem = el_new;
+        el_new = null;
+    }
+    return elem;
+};
+window.reGetElemsByKlassNames = function(base_el /*, class1[, class2[, class3...]] */) {
+    var nk = arguments.length - 1; // Count of passed classes.
+    if (nk < 1) return null;
+    var elems = base_el.getElementsByTagName('*');
+    var str = "(?:^|\\s)(?:"; // Assemble regex to find any passed class.
+    for (var i = 1; i < nk; i++) str += arguments[i] + "(?:$|\\s)|";
+    str += arguments[i] + "(?:$|\\s))"; // Append OR to all but last.
+    if (!re_class[str]) re_class[str] = new RegExp(str,"i"); // Cache regexes.
+    var re = re_class[str];
+    var kl_els = [];
+    var n = elems.length;
+    for (i = 0; i < n; i++) {
+        var el = elems[i];
+        if (el.className && re.test(el.className)) {
+            kl_els.push(el);
+        }
+    }
+    return kl_els;
+};
+window.reHideHtmlSpecialChars = function(text) {
+    return text.replace(/[&<>]/g,
+        function(m0) {return {"&": "&amp;", "<": "&lt;", ">": "&gt;"}[m0];});
+};
+window.reAddLoadEventFirst = function(newf) {
+    if (typeof(window.onload) != 'function') {
+        window.onload = newf;
+    } else {
+        var oldf = window.onload;
+        window.onload = function() {
+            newf();
+            oldf();
+        };
+    }
+};
+window.reAddLoadEvent = function(newf) {
+    if (typeof(window.onload) != 'function') {
+        window.onload = newf;
+    } else {
+        var oldf = window.onload;
+        window.onload = function() {
+            oldf();
+            newf();
+        };
+    }
+};
+window.reAddUnloadEvent = function(newf) {
+    if (typeof(window.onunload) != 'function') {
+        window.onunload = newf;
+    } else {
+        var oldf = window.onunload;
+        window.onunload = function() {
+            oldf();
+            newf();
+        };
+    }
+};
+// Local support functions:
+function reHideDelims(text) {
+    return text.replace(/[()|]/g,
+        function(m0) {return {"(": "&#40;", ")": "&#41;", "|": "&#124;"}[m0];});
+}
+function reOnMouseover() { // Add "regex_hl" class to all siblings.
+    if (this.sibs) {
+        for (var i = 0, n = this.sibs.length; i < n; i++) {
+            var el = this.sibs[i];
+            if (!el.className) el.className = "regex_hl";
+            else if (!re_over.test(el.className)) el.className += " regex_hl";
+        }
+    }
+}
+function reOnMouseout() { // Remove "regex_hl" class from all siblings.
+    if (this.sibs) {
+        for (var i = 0, n = this.sibs.length; i < n; i++) {
+            var el = this.sibs[i];
+            if (el.className) el.className = el.className.replace(re_out, "");
+        }
+    }
+}
+function rePrepareAllMarkup() {
+    if (re_elems.length === 0) { // Done? Clear status and exit.
+        window.status = "";
+        return;
+    }
+    var start = +new Date();    // For UI responsiveness, limit
+    do {                        // consecutive runtime to 50ms.
+        reHighlightElement(re_elems.shift());
+    } while (re_elems.length > 0 && (+new Date - start < 50));
+    setTimeout(rePrepareAllMarkup, 25); // Give up CPU for UI thread.
+}
+function reOnload() {
+    if (!reAutoLoad) return; // No autoload? Exit now.
+    re_elems = reGetElemsByKlassNames(document, 'regex', 'regex_x');
+    if (re_elems.length > 0) {
+        window.status = "Marking up " + re_elems.length + " regex elements...";
+        setTimeout(rePrepareAllMarkup, 0);
+    }
+}
+function reOnunload() {
+    // Remove references to avoid IE memory leaks.
+    re_elems = reGetElemsByKlassNames(document, 'regex', 'regex_x');
+    var spans, span;
+    for (var i = 0, n = re_elems.length; i < n; i++) {
+        spans = re_elems[i].getElementsByTagName('span');
+        re_elems[i] = null;
+        for (var j = 0, m = spans.length; j < m; j++) {
+            span = spans[j];
+            if (span.sibs) {
+                span.sibs = null;
+                span.onmouseover = null;
+                span.onmouseout = null;
+            }
+        }
+    }
+    // Null out pseudo-static private closure variables.
+    re_elems = re_class = re_1_cmt = re_1_nocmt = re_2 = null;
+    re_escapedgroupdelims = re_open_html_tag = re_over = re_out = null;
+
+    // Null out globals.
+    window.reAutoLoad = window.reHighlightElement = window.rePutElemContents = null;
+    window.reGetElemsByKlassNames = window.reHideHtmlSpecialChars = null;
+    window.reAddLoadEventFirst = window.reAddLoadEvent = null;
+    window.reAddUnloadEvent = window.reAutoLoad = null;
+}
+// Load/unload only if we have needed DOM methods.
+if (document.getElementById && document.getElementsByTagName) {
+    reAddLoadEvent(reOnload);
+    reAddUnloadEvent(reOnunload);
+}
+})();
+/* ]]> */
diff --git a/bin/shBrushAS3.js b/bin/shBrushAS3.js
new file mode 100644
index 0000000..8aa3ed2
--- /dev/null
+++ b/bin/shBrushAS3.js
@@ -0,0 +1,59 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		// Created by Peter Atoria @ http://iAtoria.com
+	
+		var inits 	 =  'class interface function package';
+	
+		var keywords =	'-Infinity ...rest Array as AS3 Boolean break case catch const continue Date decodeURI ' + 
+						'decodeURIComponent default delete do dynamic each else encodeURI encodeURIComponent escape ' + 
+						'extends false final finally flash_proxy for get if implements import in include Infinity ' + 
+						'instanceof int internal is isFinite isNaN isXMLName label namespace NaN native new null ' + 
+						'Null Number Object object_proxy override parseFloat parseInt private protected public ' + 
+						'return set static String super switch this throw true try typeof uint undefined unescape ' + 
+						'use void while with'
+						;
+	
+		this.regexList = [
+			{ regex: SyntaxHighlighter.regexLib.singleLineCComments,	css: 'comments' },		// one line comments
+			{ regex: SyntaxHighlighter.regexLib.multiLineCComments,		css: 'comments' },		// multiline comments
+			{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,		css: 'string' },		// double quoted strings
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,		css: 'string' },		// single quoted strings
+			{ regex: /\b([\d]+(\.[\d]+)?|0x[a-f0-9]+)\b/gi,				css: 'value' },			// numbers
+			{ regex: new RegExp(this.getKeywords(inits), 'gm'),			css: 'color3' },		// initializations
+			{ regex: new RegExp(this.getKeywords(keywords), 'gm'),		css: 'keyword' },		// keywords
+			{ regex: new RegExp('var', 'gm'),							css: 'variable' },		// variable
+			{ regex: new RegExp('trace', 'gm'),							css: 'color1' }			// trace
+			];
+	
+		this.forHtmlScript(SyntaxHighlighter.regexLib.scriptScriptTags);
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['actionscript3', 'as3'];
+
+	SyntaxHighlighter.brushes.AS3 = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushAppleScript.js b/bin/shBrushAppleScript.js
new file mode 100644
index 0000000..d40bbd7
--- /dev/null
+++ b/bin/shBrushAppleScript.js
@@ -0,0 +1,75 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		// AppleScript brush by David Chambers
+		// http://davidchambersdesign.com/
+		var keywords   = 'after before beginning continue copy each end every from return get global in local named of set some that the then times to where whose with without';
+		var ordinals   = 'first second third fourth fifth sixth seventh eighth ninth tenth last front back middle';
+		var specials   = 'activate add alias AppleScript ask attachment boolean class constant delete duplicate empty exists false id integer list make message modal modified new no paragraph pi properties quit real record remove rest result reveal reverse run running save string true word yes';
+
+		this.regexList = [
+
+			{ regex: /(--|#).*$/gm,
+			    css: 'comments' },
+
+			{ regex: /\(\*(?:[\s\S]*?\(\*[\s\S]*?\*\))*[\s\S]*?\*\)/gm, // support nested comments
+			    css: 'comments' },
+
+			{ regex: /"[\s\S]*?"/gm,
+			    css: 'string' },
+
+			{ regex: /(?:,|:|¬|'s\b|\(|\)|\{|\}|«|\b\w*»)/g,
+			    css: 'color1' },
+
+			{ regex: /(-)?(\d)+(\.(\d)?)?(E\+(\d)+)?/g, // numbers
+			    css: 'color1' },
+
+			{ regex: /(?:&(amp;|gt;|lt;)?|=|� |>|<|≥|>=|≤|<=|\*|\+|-|\/|÷|\^)/g,
+			    css: 'color2' },
+
+			{ regex: /\b(?:and|as|div|mod|not|or|return(?!\s&)(ing)?|equals|(is(n't| not)? )?equal( to)?|does(n't| not) equal|(is(n't| not)? )?(greater|less) than( or equal( to)?)?|(comes|does(n't| not) come) (after|before)|is(n't| not)?( in)? (back|front) of|is(n't| not)? behind|is(n't| not)?( (in|contained by))?|does(n't| not) contain|contain(s)?|(start|begin|end)(s)? with|((but|end) )?(consider|ignor)ing|prop(erty)?|(a )?ref(erence)?( to)?|repeat (until|while|with)|((end|exit) )?repeat|((else|end) )?if|else|(end )?(script|tell|try)|(on )?error|(put )?into|(of )?(it|me)|its|my|with (timeout( of)?|transaction)|end (timeout|transaction))\b/g,
+			    css: 'keyword' },
+
+			{ regex: /\b\d+(st|nd|rd|th)\b/g, // ordinals
+			    css: 'keyword' },
+
+			{ regex: /\b(?:about|above|against|around|at|below|beneath|beside|between|by|(apart|aside) from|(instead|out) of|into|on(to)?|over|since|thr(ough|u)|under)\b/g,
+			    css: 'color3' },
+
+			{ regex: /\b(?:adding folder items to|after receiving|choose( ((remote )?application|color|folder|from list|URL))?|clipboard info|set the clipboard to|(the )?clipboard|entire contents|display(ing| (alert|dialog|mode))?|document( (edited|file|nib name))?|file( (name|type))?|(info )?for|giving up after|(name )?extension|quoted form|return(ed)?|second(?! item)(s)?|list (disks|folder)|text item(s| delimiters)?|(Unicode )?text|(disk )?item(s)?|((current|list) )?view|((container|key) )?window|with (data|icon( (caution|note|stop))?|parameter(s)?|prompt|properties|seed|title)|case|diacriticals|hyphens|numeric strings|punctuation|white space|folder creation|application(s( folder)?| (processes|scripts position|support))?|((desktop )?(pictures )?|(documents|downloads|favorites|home|keychain|library|movies|music|public|scripts|sites|system|users|utilities|workflows) )folder|desktop|Folder Action scripts|font(s| panel)?|help|internet plugins|modem scripts|(system )?preferences|printer descriptions|scripting (additions|components)|shared (documents|libraries)|startup (disk|items)|temporary items|trash|on server|in AppleTalk zone|((as|long|short) )?user name|user (ID|locale)|(with )?password|in (bundle( with identifier)?|directory)|(close|open for) access|read|write( permission)?|(g|s)et eof|using( delimiters)?|starting at|default (answer|button|color|country code|entr(y|ies)|identifiers|items|name|location|script editor)|hidden( answer)?|open(ed| (location|untitled))?|error (handling|reporting)|(do( shell)?|load|run|store) script|administrator privileges|altering line endings|get volume settings|(alert|boot|input|mount|output|set) volume|output muted|(fax|random )?number|round(ing)?|up|down|toward zero|to nearest|as taught in school|system (attribute|info)|((AppleScript( Studio)?|system) )?version|(home )?directory|(IPv4|primary Ethernet) address|CPU (type|speed)|physical memory|time (stamp|to GMT)|replacing|ASCII (character|number)|localized string|from table|offset|summarize|beep|delay|say|(empty|multiple) selections allowed|(of|preferred) type|invisibles|showing( package contents)?|editable URL|(File|FTP|News|Media|Web) [Ss]ervers|Telnet hosts|Directory services|Remote applications|waiting until completion|saving( (in|to))?|path (for|to( (((current|frontmost) )?application|resource))?)|POSIX (file|path)|(background|RGB) color|(OK|cancel) button name|cancel button|button(s)?|cubic ((centi)?met(re|er)s|yards|feet|inches)|square ((kilo)?met(re|er)s|miles|yards|feet)|(centi|kilo)?met(re|er)s|miles|yards|feet|inches|lit(re|er)s|gallons|quarts|(kilo)?grams|ounces|pounds|degrees (Celsius|Fahrenheit|Kelvin)|print( (dialog|settings))?|clos(e(able)?|ing)|(de)?miniaturized|miniaturizable|zoom(ed|able)|attribute run|action (method|property|title)|phone|email|((start|end)ing|home) page|((birth|creation|current|custom|modification) )?date|((((phonetic )?(first|last|middle))|computer|host|maiden|related) |nick)?name|aim|icq|jabber|msn|yahoo|address(es)?|save addressbook|should enable action|city|country( code)?|formatte(r|d address)|(palette )?label|state|street|zip|AIM [Hh]andle(s)?|my card|select(ion| all)?|unsaved|(alpha )?value|entr(y|ies)|group|(ICQ|Jabber|MSN) handle|person|people|company|department|icon image|job title|note|organization|suffix|vcard|url|copies|collating|pages (across|down)|request print time|target( printer)?|((GUI Scripting|Script menu) )?enabled|show Computer scripts|(de)?activated|awake from nib|became (key|main)|call method|of (class|object)|center|clicked toolbar item|closed|for document|exposed|(can )?hide|idle|keyboard (down|up)|event( (number|type))?|launch(ed)?|load (image|movie|nib|sound)|owner|log|mouse (down|dragged|entered|exited|moved|up)|move|column|localization|resource|script|register|drag (info|types)|resigned (active|key|main)|resiz(e(d)?|able)|right mouse (down|dragged|up)|scroll wheel|(at )?index|should (close|open( untitled)?|quit( after last window closed)?|zoom)|((proposed|screen) )?bounds|show(n)?|behind|in front of|size (mode|to fit)|update(d| toolbar item)?|was (hidden|miniaturized)|will (become active|close|finish launching|hide|miniaturize|move|open|quit|(resign )?active|((maximum|minimum|proposed) )?size|show|zoom)|bundle|data source|movie|pasteboard|sound|tool(bar| tip)|(color|open|save) panel|coordinate system|frontmost|main( (bundle|menu|window))?|((services|(excluded from )?windows) )?menu|((executable|frameworks|resource|scripts|shared (frameworks|support)) )?path|(selected item )?identifier|data|content(s| view)?|character(s)?|click count|(command|control|option|shift) key down|context|delta (x|y|z)|key( code)?|location|pressure|unmodified characters|types|(first )?responder|playing|(allowed|selectable) identifiers|allows customization|(auto saves )?configuration|visible|image( name)?|menu form representation|tag|user(-| )defaults|associated file name|(auto|needs) display|current field editor|floating|has (resize indicator|shadow)|hides when deactivated|level|minimized (image|title)|opaque|position|release when closed|sheet|title(d)?)\b/g,
+			    css: 'color3' },
+
+			{ regex: new RegExp(this.getKeywords(specials), 'gm'), css: 'color3' },
+			{ regex: new RegExp(this.getKeywords(keywords), 'gm'), css: 'keyword' },
+			{ regex: new RegExp(this.getKeywords(ordinals), 'gm'), css: 'keyword' }
+		];
+	};
+
+	Brush.prototype = new SyntaxHighlighter.Highlighter();
+	Brush.aliases = ['applescript'];
+
+	SyntaxHighlighter.brushes.AppleScript = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushBash.js b/bin/shBrushBash.js
new file mode 100644
index 0000000..8c29696
--- /dev/null
+++ b/bin/shBrushBash.js
@@ -0,0 +1,59 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		var keywords =	'if fi then elif else for do done until while break continue case function return in eq ne ge le';
+		var commands =  'alias apropos awk basename bash bc bg builtin bzip2 cal cat cd cfdisk chgrp chmod chown chroot' +
+						'cksum clear cmp comm command cp cron crontab csplit cut date dc dd ddrescue declare df ' +
+						'diff diff3 dig dir dircolors dirname dirs du echo egrep eject enable env ethtool eval ' +
+						'exec exit expand export expr false fdformat fdisk fg fgrep file find fmt fold format ' +
+						'free fsck ftp gawk getopts grep groups gzip hash head history hostname id ifconfig ' +
+						'import install join kill less let ln local locate logname logout look lpc lpr lprint ' +
+						'lprintd lprintq lprm ls lsof make man mkdir mkfifo mkisofs mknod more mount mtools ' +
+						'mv netstat nice nl nohup nslookup open op passwd paste pathchk ping popd pr printcap ' +
+						'printenv printf ps pushd pwd quota quotacheck quotactl ram rcp read readonly renice ' +
+						'remsync rm rmdir rsync screen scp sdiff sed select seq set sftp shift shopt shutdown ' +
+						'sleep sort source split ssh strace su sudo sum symlink sync tail tar tee test time ' +
+						'times touch top traceroute trap tr true tsort tty type ulimit umask umount unalias ' +
+						'uname unexpand uniq units unset unshar useradd usermod users uuencode uudecode v vdir ' +
+						'vi watch wc whereis which who whoami Wget xargs yes'
+						;
+
+		this.regexList = [
+			{ regex: /^#!.*$/gm,											css: 'preprocessor bold' },
+			{ regex: /\/[\w-\/]+/gm,										css: 'plain' },
+			{ regex: SyntaxHighlighter.regexLib.singleLinePerlComments,		css: 'comments' },		// one line comments
+			{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,			css: 'string' },		// double quoted strings
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,			css: 'string' },		// single quoted strings
+			{ regex: new RegExp(this.getKeywords(keywords), 'gm'),			css: 'keyword' },		// keywords
+			{ regex: new RegExp(this.getKeywords(commands), 'gm'),			css: 'functions' }		// commands
+			];
+	}
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['bash', 'shell'];
+
+	SyntaxHighlighter.brushes.Bash = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushCSharp.js b/bin/shBrushCSharp.js
new file mode 100644
index 0000000..079214e
--- /dev/null
+++ b/bin/shBrushCSharp.js
@@ -0,0 +1,65 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		var keywords =	'abstract as base bool break byte case catch char checked class const ' +
+						'continue decimal default delegate do double else enum event explicit ' +
+						'extern false finally fixed float for foreach get goto if implicit in int ' +
+						'interface internal is lock long namespace new null object operator out ' +
+						'override params private protected public readonly ref return sbyte sealed set ' +
+						'short sizeof stackalloc static string struct switch this throw true try ' +
+						'typeof uint ulong unchecked unsafe ushort using virtual void while';
+
+		function fixComments(match, regexInfo)
+		{
+			var css = (match[0].indexOf("///") == 0)
+				? 'color1'
+				: 'comments'
+				;
+			
+			return [new SyntaxHighlighter.Match(match[0], match.index, css)];
+		}
+
+		this.regexList = [
+			{ regex: SyntaxHighlighter.regexLib.singleLineCComments,	func : fixComments },		// one line comments
+			{ regex: SyntaxHighlighter.regexLib.multiLineCComments,		css: 'comments' },			// multiline comments
+			{ regex: /@"(?:[^"]|"")*"/g,								css: 'string' },			// @-quoted strings
+			{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,		css: 'string' },			// strings
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,		css: 'string' },			// strings
+			{ regex: /^\s*#.*/gm,										css: 'preprocessor' },		// preprocessor tags like #region and #endregion
+			{ regex: new RegExp(this.getKeywords(keywords), 'gm'),		css: 'keyword' },			// c# keyword
+			{ regex: /\bpartial(?=\s+(?:class|interface|struct)\b)/g,	css: 'keyword' },			// contextual keyword: 'partial'
+			{ regex: /\byield(?=\s+(?:return|break)\b)/g,				css: 'keyword' }			// contextual keyword: 'yield'
+			];
+		
+		this.forHtmlScript(SyntaxHighlighter.regexLib.aspScriptTags);
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['c#', 'c-sharp', 'csharp'];
+
+	SyntaxHighlighter.brushes.CSharp = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
+
diff --git a/bin/shBrushColdFusion.js b/bin/shBrushColdFusion.js
new file mode 100644
index 0000000..627dbb9
--- /dev/null
+++ b/bin/shBrushColdFusion.js
@@ -0,0 +1,100 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		// Contributed by Jen
+		// http://www.jensbits.com/2009/05/14/coldfusion-brush-for-syntaxhighlighter-plus
+	
+		var funcs	=	'Abs ACos AddSOAPRequestHeader AddSOAPResponseHeader AjaxLink AjaxOnLoad ArrayAppend ArrayAvg ArrayClear ArrayDeleteAt ' + 
+						'ArrayInsertAt ArrayIsDefined ArrayIsEmpty ArrayLen ArrayMax ArrayMin ArraySet ArraySort ArraySum ArraySwap ArrayToList ' + 
+						'Asc ASin Atn BinaryDecode BinaryEncode BitAnd BitMaskClear BitMaskRead BitMaskSet BitNot BitOr BitSHLN BitSHRN BitXor ' + 
+						'Ceiling CharsetDecode CharsetEncode Chr CJustify Compare CompareNoCase Cos CreateDate CreateDateTime CreateObject ' + 
+						'CreateODBCDate CreateODBCDateTime CreateODBCTime CreateTime CreateTimeSpan CreateUUID DateAdd DateCompare DateConvert ' + 
+						'DateDiff DateFormat DatePart Day DayOfWeek DayOfWeekAsString DayOfYear DaysInMonth DaysInYear DE DecimalFormat DecrementValue ' + 
+						'Decrypt DecryptBinary DeleteClientVariable DeserializeJSON DirectoryExists DollarFormat DotNetToCFType Duplicate Encrypt ' + 
+						'EncryptBinary Evaluate Exp ExpandPath FileClose FileCopy FileDelete FileExists FileIsEOF FileMove FileOpen FileRead ' + 
+						'FileReadBinary FileReadLine FileSetAccessMode FileSetAttribute FileSetLastModified FileWrite Find FindNoCase FindOneOf ' + 
+						'FirstDayOfMonth Fix FormatBaseN GenerateSecretKey GetAuthUser GetBaseTagData GetBaseTagList GetBaseTemplatePath ' + 
+						'GetClientVariablesList GetComponentMetaData GetContextRoot GetCurrentTemplatePath GetDirectoryFromPath GetEncoding ' + 
+						'GetException GetFileFromPath GetFileInfo GetFunctionList GetGatewayHelper GetHttpRequestData GetHttpTimeString ' + 
+						'GetK2ServerDocCount GetK2ServerDocCountLimit GetLocale GetLocaleDisplayName GetLocalHostIP GetMetaData GetMetricData ' + 
+						'GetPageContext GetPrinterInfo GetProfileSections GetProfileString GetReadableImageFormats GetSOAPRequest GetSOAPRequestHeader ' + 
+						'GetSOAPResponse GetSOAPResponseHeader GetTempDirectory GetTempFile GetTemplatePath GetTickCount GetTimeZoneInfo GetToken ' + 
+						'GetUserRoles GetWriteableImageFormats Hash Hour HTMLCodeFormat HTMLEditFormat IIf ImageAddBorder ImageBlur ImageClearRect ' + 
+						'ImageCopy ImageCrop ImageDrawArc ImageDrawBeveledRect ImageDrawCubicCurve ImageDrawLine ImageDrawLines ImageDrawOval ' + 
+						'ImageDrawPoint ImageDrawQuadraticCurve ImageDrawRect ImageDrawRoundRect ImageDrawText ImageFlip ImageGetBlob ImageGetBufferedImage ' + 
+						'ImageGetEXIFTag ImageGetHeight ImageGetIPTCTag ImageGetWidth ImageGrayscale ImageInfo ImageNegative ImageNew ImageOverlay ImagePaste ' + 
+						'ImageRead ImageReadBase64 ImageResize ImageRotate ImageRotateDrawingAxis ImageScaleToFit ImageSetAntialiasing ImageSetBackgroundColor ' + 
+						'ImageSetDrawingColor ImageSetDrawingStroke ImageSetDrawingTransparency ImageSharpen ImageShear ImageShearDrawingAxis ImageTranslate ' + 
+						'ImageTranslateDrawingAxis ImageWrite ImageWriteBase64 ImageXORDrawingMode IncrementValue InputBaseN Insert Int IsArray IsBinary ' + 
+						'IsBoolean IsCustomFunction IsDate IsDDX IsDebugMode IsDefined IsImage IsImageFile IsInstanceOf IsJSON IsLeapYear IsLocalHost ' + 
+						'IsNumeric IsNumericDate IsObject IsPDFFile IsPDFObject IsQuery IsSimpleValue IsSOAPRequest IsStruct IsUserInAnyRole IsUserInRole ' + 
+						'IsUserLoggedIn IsValid IsWDDX IsXML IsXmlAttribute IsXmlDoc IsXmlElem IsXmlNode IsXmlRoot JavaCast JSStringFormat LCase Left Len ' + 
+						'ListAppend ListChangeDelims ListContains ListContainsNoCase ListDeleteAt ListFind ListFindNoCase ListFirst ListGetAt ListInsertAt ' + 
+						'ListLast ListLen ListPrepend ListQualify ListRest ListSetAt ListSort ListToArray ListValueCount ListValueCountNoCase LJustify Log ' + 
+						'Log10 LSCurrencyFormat LSDateFormat LSEuroCurrencyFormat LSIsCurrency LSIsDate LSIsNumeric LSNumberFormat LSParseCurrency LSParseDateTime ' + 
+						'LSParseEuroCurrency LSParseNumber LSTimeFormat LTrim Max Mid Min Minute Month MonthAsString Now NumberFormat ParagraphFormat ParseDateTime ' + 
+						'Pi PrecisionEvaluate PreserveSingleQuotes Quarter QueryAddColumn QueryAddRow QueryConvertForGrid QueryNew QuerySetCell QuotedValueList Rand ' + 
+						'Randomize RandRange REFind REFindNoCase ReleaseComObject REMatch REMatchNoCase RemoveChars RepeatString Replace ReplaceList ReplaceNoCase ' + 
+						'REReplace REReplaceNoCase Reverse Right RJustify Round RTrim Second SendGatewayMessage SerializeJSON SetEncoding SetLocale SetProfileString ' + 
+						'SetVariable Sgn Sin Sleep SpanExcluding SpanIncluding Sqr StripCR StructAppend StructClear StructCopy StructCount StructDelete StructFind ' + 
+						'StructFindKey StructFindValue StructGet StructInsert StructIsEmpty StructKeyArray StructKeyExists StructKeyList StructKeyList StructNew ' + 
+						'StructSort StructUpdate Tan TimeFormat ToBase64 ToBinary ToScript ToString Trim UCase URLDecode URLEncodedFormat URLSessionFormat Val ' + 
+						'ValueList VerifyClient Week Wrap Wrap WriteOutput XmlChildPos XmlElemNew XmlFormat XmlGetNodeType XmlNew XmlParse XmlSearch XmlTransform ' + 
+						'XmlValidate Year YesNoFormat';
+
+		var keywords =	'cfabort cfajaximport cfajaxproxy cfapplet cfapplication cfargument cfassociate cfbreak cfcache cfcalendar ' + 
+						'cfcase cfcatch cfchart cfchartdata cfchartseries cfcol cfcollection cfcomponent cfcontent cfcookie cfdbinfo ' + 
+						'cfdefaultcase cfdirectory cfdiv cfdocument cfdocumentitem cfdocumentsection cfdump cfelse cfelseif cferror ' + 
+						'cfexchangecalendar cfexchangeconnection cfexchangecontact cfexchangefilter cfexchangemail cfexchangetask ' + 
+						'cfexecute cfexit cffeed cffile cfflush cfform cfformgroup cfformitem cfftp cffunction cfgrid cfgridcolumn ' + 
+						'cfgridrow cfgridupdate cfheader cfhtmlhead cfhttp cfhttpparam cfif cfimage cfimport cfinclude cfindex ' + 
+						'cfinput cfinsert cfinterface cfinvoke cfinvokeargument cflayout cflayoutarea cfldap cflocation cflock cflog ' + 
+						'cflogin cfloginuser cflogout cfloop cfmail cfmailparam cfmailpart cfmenu cfmenuitem cfmodule cfNTauthenticate ' + 
+						'cfobject cfobjectcache cfoutput cfparam cfpdf cfpdfform cfpdfformparam cfpdfparam cfpdfsubform cfpod cfpop ' + 
+						'cfpresentation cfpresentationslide cfpresenter cfprint cfprocessingdirective cfprocparam cfprocresult ' + 
+						'cfproperty cfquery cfqueryparam cfregistry cfreport cfreportparam cfrethrow cfreturn cfsavecontent cfschedule ' + 
+						'cfscript cfsearch cfselect cfset cfsetting cfsilent cfslider cfsprydataset cfstoredproc cfswitch cftable ' + 
+						'cftextarea cfthread cfthrow cftimer cftooltip cftrace cftransaction cftree cftreeitem cftry cfupdate cfwddx ' + 
+						'cfwindow cfxml cfzip cfzipparam';
+
+		var operators =	'all and any between cross in join like not null or outer some';
+
+		this.regexList = [
+			{ regex: new RegExp('--(.*)$', 'gm'),						css: 'comments' },  // one line and multiline comments
+			{ regex: SyntaxHighlighter.regexLib.xmlComments,			css: 'comments' },    // single quoted strings
+			{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,		css: 'string' },    // double quoted strings
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,		css: 'string' },    // single quoted strings
+			{ regex: new RegExp(this.getKeywords(funcs), 'gmi'),		css: 'functions' }, // functions
+			{ regex: new RegExp(this.getKeywords(operators), 'gmi'),	css: 'color1' },    // operators and such
+			{ regex: new RegExp(this.getKeywords(keywords), 'gmi'),		css: 'keyword' }    // keyword
+			];
+	}
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['coldfusion','cf'];
+	
+	SyntaxHighlighter.brushes.ColdFusion = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushCpp.js b/bin/shBrushCpp.js
new file mode 100644
index 0000000..1c4496c
--- /dev/null
+++ b/bin/shBrushCpp.js
@@ -0,0 +1,97 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		// Copyright 2006 Shin, YoungJin
+	
+		var datatypes =	'ATOM BOOL BOOLEAN BYTE CHAR COLORREF DWORD DWORDLONG DWORD_PTR ' +
+						'DWORD32 DWORD64 FLOAT HACCEL HALF_PTR HANDLE HBITMAP HBRUSH ' +
+						'HCOLORSPACE HCONV HCONVLIST HCURSOR HDC HDDEDATA HDESK HDROP HDWP ' +
+						'HENHMETAFILE HFILE HFONT HGDIOBJ HGLOBAL HHOOK HICON HINSTANCE HKEY ' +
+						'HKL HLOCAL HMENU HMETAFILE HMODULE HMONITOR HPALETTE HPEN HRESULT ' +
+						'HRGN HRSRC HSZ HWINSTA HWND INT INT_PTR INT32 INT64 LANGID LCID LCTYPE ' +
+						'LGRPID LONG LONGLONG LONG_PTR LONG32 LONG64 LPARAM LPBOOL LPBYTE LPCOLORREF ' +
+						'LPCSTR LPCTSTR LPCVOID LPCWSTR LPDWORD LPHANDLE LPINT LPLONG LPSTR LPTSTR ' +
+						'LPVOID LPWORD LPWSTR LRESULT PBOOL PBOOLEAN PBYTE PCHAR PCSTR PCTSTR PCWSTR ' +
+						'PDWORDLONG PDWORD_PTR PDWORD32 PDWORD64 PFLOAT PHALF_PTR PHANDLE PHKEY PINT ' +
+						'PINT_PTR PINT32 PINT64 PLCID PLONG PLONGLONG PLONG_PTR PLONG32 PLONG64 POINTER_32 ' +
+						'POINTER_64 PSHORT PSIZE_T PSSIZE_T PSTR PTBYTE PTCHAR PTSTR PUCHAR PUHALF_PTR ' +
+						'PUINT PUINT_PTR PUINT32 PUINT64 PULONG PULONGLONG PULONG_PTR PULONG32 PULONG64 ' +
+						'PUSHORT PVOID PWCHAR PWORD PWSTR SC_HANDLE SC_LOCK SERVICE_STATUS_HANDLE SHORT ' +
+						'SIZE_T SSIZE_T TBYTE TCHAR UCHAR UHALF_PTR UINT UINT_PTR UINT32 UINT64 ULONG ' +
+						'ULONGLONG ULONG_PTR ULONG32 ULONG64 USHORT USN VOID WCHAR WORD WPARAM WPARAM WPARAM ' +
+						'char bool short int __int32 __int64 __int8 __int16 long float double __wchar_t ' +
+						'clock_t _complex _dev_t _diskfree_t div_t ldiv_t _exception _EXCEPTION_POINTERS ' +
+						'FILE _finddata_t _finddatai64_t _wfinddata_t _wfinddatai64_t __finddata64_t ' +
+						'__wfinddata64_t _FPIEEE_RECORD fpos_t _HEAPINFO _HFILE lconv intptr_t ' +
+						'jmp_buf mbstate_t _off_t _onexit_t _PNH ptrdiff_t _purecall_handler ' +
+						'sig_atomic_t size_t _stat __stat64 _stati64 terminate_function ' +
+						'time_t __time64_t _timeb __timeb64 tm uintptr_t _utimbuf ' +
+						'va_list wchar_t wctrans_t wctype_t wint_t signed';
+
+		var keywords =	'break case catch class const __finally __exception __try ' +
+						'const_cast continue private public protected __declspec ' +
+						'default delete deprecated dllexport dllimport do dynamic_cast ' +
+						'else enum explicit extern if for friend goto inline ' +
+						'mutable naked namespace new noinline noreturn nothrow ' +
+						'register reinterpret_cast return selectany ' +
+						'sizeof static static_cast struct switch template this ' +
+						'thread throw true false try typedef typeid typename union ' +
+						'using uuid virtual void volatile whcar_t while';
+					
+		var functions =	'assert isalnum isalpha iscntrl isdigit isgraph islower isprint' +
+						'ispunct isspace isupper isxdigit tolower toupper errno localeconv ' +
+						'setlocale acos asin atan atan2 ceil cos cosh exp fabs floor fmod ' +
+						'frexp ldexp log log10 modf pow sin sinh sqrt tan tanh jmp_buf ' +
+						'longjmp setjmp raise signal sig_atomic_t va_arg va_end va_start ' +
+						'clearerr fclose feof ferror fflush fgetc fgetpos fgets fopen ' +
+						'fprintf fputc fputs fread freopen fscanf fseek fsetpos ftell ' +
+						'fwrite getc getchar gets perror printf putc putchar puts remove ' +
+						'rename rewind scanf setbuf setvbuf sprintf sscanf tmpfile tmpnam ' +
+						'ungetc vfprintf vprintf vsprintf abort abs atexit atof atoi atol ' +
+						'bsearch calloc div exit free getenv labs ldiv malloc mblen mbstowcs ' +
+						'mbtowc qsort rand realloc srand strtod strtol strtoul system ' +
+						'wcstombs wctomb memchr memcmp memcpy memmove memset strcat strchr ' +
+						'strcmp strcoll strcpy strcspn strerror strlen strncat strncmp ' +
+						'strncpy strpbrk strrchr strspn strstr strtok strxfrm asctime ' +
+						'clock ctime difftime gmtime localtime mktime strftime time';
+
+		this.regexList = [
+//			{ regex: SyntaxHighlighter.regexLib.singleLineCComments,	css: 'comments' },			// one line comments
+//			{ regex: SyntaxHighlighter.regexLib.multiLineCComments,		css: 'comments' },			// multiline comments
+			{ regex: SyntaxHighlighter.regexLib.multiLineDoubleQuotedString,		css: 'variable' },			// strings
+			{ regex: SyntaxHighlighter.regexLib.multiLineSingleQuotedString,		css: 'string' },			// strings
+//			{ regex: /^ *#.*/gm,										css: 'preprocessor' },
+//			{ regex: new RegExp(this.getKeywords(datatypes), 'gm'),		css: 'color1 bold' },
+//			{ regex: new RegExp(this.getKeywords(functions), 'gm'),		css: 'functions bold' },
+//			{ regex: new RegExp(this.getKeywords(keywords), 'gm'),		css: 'keyword bold' }
+			];
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['cpp', 'c'];
+
+	SyntaxHighlighter.brushes.Cpp = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushCss.js b/bin/shBrushCss.js
new file mode 100644
index 0000000..4297a9a
--- /dev/null
+++ b/bin/shBrushCss.js
@@ -0,0 +1,91 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		function getKeywordsCSS(str)
+		{
+			return '\\b([a-z_]|)' + str.replace(/ /g, '(?=:)\\b|\\b([a-z_\\*]|\\*|)') + '(?=:)\\b';
+		};
+	
+		function getValuesCSS(str)
+		{
+			return '\\b' + str.replace(/ /g, '(?!-)(?!:)\\b|\\b()') + '\:\\b';
+		};
+
+		var keywords =	'ascent azimuth background-attachment background-color background-image background-position ' +
+						'background-repeat background baseline bbox border-collapse border-color border-spacing border-style border-top ' +
+						'border-right border-bottom border-left border-top-color border-right-color border-bottom-color border-left-color ' +
+						'border-top-style border-right-style border-bottom-style border-left-style border-top-width border-right-width ' +
+						'border-bottom-width border-left-width border-width border bottom cap-height caption-side centerline clear clip color ' +
+						'content counter-increment counter-reset cue-after cue-before cue cursor definition-src descent direction display ' +
+						'elevation empty-cells float font-size-adjust font-family font-size font-stretch font-style font-variant font-weight font ' +
+						'height left letter-spacing line-height list-style-image list-style-position list-style-type list-style margin-top ' +
+						'margin-right margin-bottom margin-left margin marker-offset marks mathline max-height max-width min-height min-width orphans ' +
+						'outline-color outline-style outline-width outline overflow padding-top padding-right padding-bottom padding-left padding page ' +
+						'page-break-after page-break-before page-break-inside pause pause-after pause-before pitch pitch-range play-during position ' +
+						'quotes right richness size slope src speak-header speak-numeral speak-punctuation speak speech-rate stemh stemv stress ' +
+						'table-layout text-align top text-decoration text-indent text-shadow text-transform unicode-bidi unicode-range units-per-em ' +
+						'vertical-align visibility voice-family volume white-space widows width widths word-spacing x-height z-index';
+
+		var values =	'above absolute all always aqua armenian attr aural auto avoid baseline behind below bidi-override black blink block blue bold bolder '+
+						'both bottom braille capitalize caption center center-left center-right circle close-quote code collapse compact condensed '+
+						'continuous counter counters crop cross crosshair cursive dashed decimal decimal-leading-zero default digits disc dotted double '+
+						'embed embossed e-resize expanded extra-condensed extra-expanded fantasy far-left far-right fast faster fixed format fuchsia '+
+						'gray green groove handheld hebrew help hidden hide high higher icon inline-table inline inset inside invert italic '+
+						'justify landscape large larger left-side left leftwards level lighter lime line-through list-item local loud lower-alpha '+
+						'lowercase lower-greek lower-latin lower-roman lower low ltr marker maroon medium message-box middle mix move narrower '+
+						'navy ne-resize no-close-quote none no-open-quote no-repeat normal nowrap n-resize nw-resize oblique olive once open-quote outset '+
+						'outside overline pointer portrait pre print projection purple red relative repeat repeat-x repeat-y rgb ridge right right-side '+
+						'rightwards rtl run-in screen scroll semi-condensed semi-expanded separate se-resize show silent silver slower slow '+
+						'small small-caps small-caption smaller soft solid speech spell-out square s-resize static status-bar sub super sw-resize '+
+						'table-caption table-cell table-column table-column-group table-footer-group table-header-group table-row table-row-group teal '+
+						'text-bottom text-top thick thin top transparent tty tv ultra-condensed ultra-expanded underline upper-alpha uppercase upper-latin '+
+						'upper-roman url visible wait white wider w-resize x-fast x-high x-large x-loud x-low x-slow x-small x-soft xx-large xx-small yellow';
+
+		var fonts =		'[mM]onospace [tT]ahoma [vV]erdana [aA]rial [hH]elvetica [sS]ans-serif [sS]erif [cC]ourier mono sans serif';
+	
+		this.regexList = [
+			{ regex: SyntaxHighlighter.regexLib.multiLineCComments,		css: 'comments' },	// multiline comments
+			{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,		css: 'string' },	// double quoted strings
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,		css: 'string' },	// single quoted strings
+			{ regex: /\#[a-fA-F0-9]{3,6}/g,								css: 'value' },		// html colors
+			{ regex: /(-?\d+)(\.\d+)?(px|em|pt|\:|\%|)/g,				css: 'value' },		// sizes
+			{ regex: /!important/g,										css: 'color3' },	// !important
+			{ regex: new RegExp(getKeywordsCSS(keywords), 'gm'),		css: 'keyword' },	// keywords
+			{ regex: new RegExp(getValuesCSS(values), 'g'),				css: 'value' },		// values
+			{ regex: new RegExp(this.getKeywords(fonts), 'g'),			css: 'color1' }		// fonts
+			];
+
+		this.forHtmlScript({ 
+			left: /(&lt;|<)\s*style.*?(&gt;|>)/gi, 
+			right: /(&lt;|<)\/\s*style\s*(&gt;|>)/gi 
+			});
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['css'];
+
+	SyntaxHighlighter.brushes.CSS = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushDelphi.js b/bin/shBrushDelphi.js
new file mode 100644
index 0000000..e1060d4
--- /dev/null
+++ b/bin/shBrushDelphi.js
@@ -0,0 +1,55 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		var keywords =	'abs addr and ansichar ansistring array as asm begin boolean byte cardinal ' +
+						'case char class comp const constructor currency destructor div do double ' +
+						'downto else end except exports extended false file finalization finally ' +
+						'for function goto if implementation in inherited int64 initialization ' +
+						'integer interface is label library longint longword mod nil not object ' +
+						'of on or packed pansichar pansistring pchar pcurrency pdatetime pextended ' +
+						'pint64 pointer private procedure program property pshortstring pstring ' +
+						'pvariant pwidechar pwidestring protected public published raise real real48 ' +
+						'record repeat set shl shortint shortstring shr single smallint string then ' +
+						'threadvar to true try type unit until uses val var varirnt while widechar ' +
+						'widestring with word write writeln xor';
+
+		this.regexList = [
+			{ regex: /\(\*[\s\S]*?\*\)/gm,								css: 'comments' },  	// multiline comments (* *)
+			{ regex: /{(?!\$)[\s\S]*?}/gm,								css: 'comments' },  	// multiline comments { }
+			{ regex: SyntaxHighlighter.regexLib.singleLineCComments,	css: 'comments' },  	// one line
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,		css: 'string' },		// strings
+			{ regex: /\{\$[a-zA-Z]+ .+\}/g,								css: 'color1' },		// compiler Directives and Region tags
+			{ regex: /\b[\d\.]+\b/g,									css: 'value' },			// numbers 12345
+			{ regex: /\$[a-zA-Z0-9]+\b/g,								css: 'value' },			// numbers $F5D3
+			{ regex: new RegExp(this.getKeywords(keywords), 'gmi'),		css: 'keyword' }		// keyword
+			];
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['delphi', 'pascal', 'pas'];
+
+	SyntaxHighlighter.brushes.Delphi = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushDiff.js b/bin/shBrushDiff.js
new file mode 100644
index 0000000..e9b14fc
--- /dev/null
+++ b/bin/shBrushDiff.js
@@ -0,0 +1,41 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		this.regexList = [
+			{ regex: /^\+\+\+.*$/gm,		css: 'color2' },
+			{ regex: /^\-\-\-.*$/gm,		css: 'color2' },
+			{ regex: /^\s.*$/gm,			css: 'color1' },
+			{ regex: /^@@.*@@$/gm,			css: 'variable' },
+			{ regex: /^\+[^\+]{1}.*$/gm,	css: 'string' },
+			{ regex: /^\-[^\-]{1}.*$/gm,	css: 'comments' }
+			];
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['diff', 'patch'];
+
+	SyntaxHighlighter.brushes.Diff = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushErlang.js b/bin/shBrushErlang.js
new file mode 100644
index 0000000..6ba7d9d
--- /dev/null
+++ b/bin/shBrushErlang.js
@@ -0,0 +1,52 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		// Contributed by Jean-Lou Dupont
+		// http://jldupont.blogspot.com/2009/06/erlang-syntax-highlighter.html  
+
+		// According to: http://erlang.org/doc/reference_manual/introduction.html#1.5
+		var keywords = 'after and andalso band begin bnot bor bsl bsr bxor '+
+			'case catch cond div end fun if let not of or orelse '+
+			'query receive rem try when xor'+
+			// additional
+			' module export import define';
+
+		this.regexList = [
+			{ regex: new RegExp("[A-Z][A-Za-z0-9_]+", 'g'), 			css: 'constants' },
+			{ regex: new RegExp("\\%.+", 'gm'), 						css: 'comments' },
+			{ regex: new RegExp("\\?[A-Za-z0-9_]+", 'g'), 				css: 'preprocessor' },
+			{ regex: new RegExp("[a-z0-9_]+:[a-z0-9_]+", 'g'), 			css: 'functions' },
+			{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,		css: 'string' },
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,		css: 'string' },
+			{ regex: new RegExp(this.getKeywords(keywords),	'gm'),		css: 'keyword' }
+			];
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['erl', 'erlang'];
+
+	SyntaxHighlighter.brushes.Erland = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushGroovy.js b/bin/shBrushGroovy.js
new file mode 100644
index 0000000..6ec5c18
--- /dev/null
+++ b/bin/shBrushGroovy.js
@@ -0,0 +1,67 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		// Contributed by Andres Almiray
+		// http://jroller.com/aalmiray/entry/nice_source_code_syntax_highlighter
+
+		var keywords =	'as assert break case catch class continue def default do else extends finally ' +
+						'if in implements import instanceof interface new package property return switch ' +
+						'throw throws try while public protected private static';
+		var types    =  'void boolean byte char short int long float double';
+		var constants = 'null';
+		var methods   = 'allProperties count get size '+
+						'collect each eachProperty eachPropertyName eachWithIndex find findAll ' +
+						'findIndexOf grep inject max min reverseEach sort ' +
+						'asImmutable asSynchronized flatten intersect join pop reverse subMap toList ' +
+						'padRight padLeft contains eachMatch toCharacter toLong toUrl tokenize ' +
+						'eachFile eachFileRecurse eachB yte eachLine readBytes readLine getText ' +
+						'splitEachLine withReader append encodeBase64 decodeBase64 filterLine ' +
+						'transformChar transformLine withOutputStream withPrintWriter withStream ' +
+						'withStreams withWriter withWriterAppend write writeLine '+
+						'dump inspect invokeMethod print println step times upto use waitForOrKill '+
+						'getText';
+
+		this.regexList = [
+			{ regex: SyntaxHighlighter.regexLib.singleLineCComments,				css: 'comments' },		// one line comments
+			{ regex: SyntaxHighlighter.regexLib.multiLineCComments,					css: 'comments' },		// multiline comments
+			{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,					css: 'string' },		// strings
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,					css: 'string' },		// strings
+			{ regex: /""".*"""/g,													css: 'string' },		// GStrings
+			{ regex: new RegExp('\\b([\\d]+(\\.[\\d]+)?|0x[a-f0-9]+)\\b', 'gi'),	css: 'value' },			// numbers
+			{ regex: new RegExp(this.getKeywords(keywords), 'gm'),					css: 'keyword' },		// goovy keyword
+			{ regex: new RegExp(this.getKeywords(types), 'gm'),						css: 'color1' },		// goovy/java type
+			{ regex: new RegExp(this.getKeywords(constants), 'gm'),					css: 'constants' },		// constants
+			{ regex: new RegExp(this.getKeywords(methods), 'gm'),					css: 'functions' }		// methods
+			];
+
+		this.forHtmlScript(SyntaxHighlighter.regexLib.aspScriptTags);
+	}
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['groovy'];
+
+	SyntaxHighlighter.brushes.Groovy = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushJScript.js b/bin/shBrushJScript.js
new file mode 100644
index 0000000..ff98dab
--- /dev/null
+++ b/bin/shBrushJScript.js
@@ -0,0 +1,52 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		var keywords =	'break case catch continue ' +
+						'default delete do else false  ' +
+						'for function if in instanceof ' +
+						'new null return super switch ' +
+						'this throw true try typeof var while with'
+						;
+
+		var r = SyntaxHighlighter.regexLib;
+		
+		this.regexList = [
+			{ regex: r.multiLineDoubleQuotedString,					css: 'string' },			// double quoted strings
+			{ regex: r.multiLineSingleQuotedString,					css: 'string' },			// single quoted strings
+			{ regex: r.singleLineCComments,							css: 'comments' },			// one line comments
+			{ regex: r.multiLineCComments,							css: 'comments' },			// multiline comments
+			{ regex: /\s*#.*/gm,									css: 'preprocessor' },		// preprocessor tags like #region and #endregion
+			{ regex: new RegExp(this.getKeywords(keywords), 'gm'),	css: 'keyword' }			// keywords
+			];
+	
+		this.forHtmlScript(r.scriptScriptTags);
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['js', 'jscript', 'javascript'];
+
+	SyntaxHighlighter.brushes.JScript = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushJava.js b/bin/shBrushJava.js
new file mode 100644
index 0000000..d692fd6
--- /dev/null
+++ b/bin/shBrushJava.js
@@ -0,0 +1,57 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		var keywords =	'abstract assert boolean break byte case catch char class const ' +
+						'continue default do double else enum extends ' +
+						'false final finally float for goto if implements import ' +
+						'instanceof int interface long native new null ' +
+						'package private protected public return ' +
+						'short static strictfp super switch synchronized this throw throws true ' +
+						'transient try void volatile while';
+
+		this.regexList = [
+			{ regex: SyntaxHighlighter.regexLib.singleLineCComments,	css: 'comments' },		// one line comments
+			{ regex: /\/\*([^\*][\s\S]*)?\*\//gm,						css: 'comments' },	 	// multiline comments
+			{ regex: /\/\*(?!\*\/)\*[\s\S]*?\*\//gm,					css: 'preprocessor' },	// documentation comments
+			{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,		css: 'string' },		// strings
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,		css: 'string' },		// strings
+			{ regex: /\b([\d]+(\.[\d]+)?|0x[a-f0-9]+)\b/gi,				css: 'value' },			// numbers
+			{ regex: /(?!\@interface\b)\@[\$\w]+\b/g,					css: 'color1' },		// annotation @anno
+			{ regex: /\@interface\b/g,									css: 'color2' },		// @interface keyword
+			{ regex: new RegExp(this.getKeywords(keywords), 'gm'),		css: 'keyword' }		// java keyword
+			];
+
+		this.forHtmlScript({
+			left	: /(&lt;|<)%[@!=]?/g, 
+			right	: /%(&gt;|>)/g 
+		});
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['java'];
+
+	SyntaxHighlighter.brushes.Java = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushJavaFX.js b/bin/shBrushJavaFX.js
new file mode 100644
index 0000000..1a150a6
--- /dev/null
+++ b/bin/shBrushJavaFX.js
@@ -0,0 +1,58 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		// Contributed by Patrick Webster
+		// http://patrickwebster.blogspot.com/2009/04/javafx-brush-for-syntaxhighlighter.html
+		var datatypes =	'Boolean Byte Character Double Duration '
+						+ 'Float Integer Long Number Short String Void'
+						;
+
+		var keywords = 'abstract after and as assert at before bind bound break catch class '
+						+ 'continue def delete else exclusive extends false finally first for from '
+						+ 'function if import in indexof init insert instanceof into inverse last '
+						+ 'lazy mixin mod nativearray new not null on or override package postinit '
+						+ 'protected public public-init public-read replace return reverse sizeof '
+						+ 'step super then this throw true try tween typeof var where while with '
+						+ 'attribute let private readonly static trigger'
+						;
+
+		this.regexList = [
+			{ regex: SyntaxHighlighter.regexLib.singleLineCComments,	css: 'comments' },
+			{ regex: SyntaxHighlighter.regexLib.multiLineCComments,		css: 'comments' },
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,		css: 'string' },
+			{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,		css: 'string' },
+			{ regex: /(-?\.?)(\b(\d*\.?\d+|\d+\.?\d*)(e[+-]?\d+)?|0x[a-f\d]+)\b\.?/gi, css: 'color2' },	// numbers
+			{ regex: new RegExp(this.getKeywords(datatypes), 'gm'),		css: 'variable' },	// datatypes
+			{ regex: new RegExp(this.getKeywords(keywords), 'gm'),		css: 'keyword' }
+		];
+		this.forHtmlScript(SyntaxHighlighter.regexLib.aspScriptTags);
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['jfx', 'javafx'];
+
+	SyntaxHighlighter.brushes.JavaFX = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushPerl.js b/bin/shBrushPerl.js
new file mode 100644
index 0000000..d94a2e0
--- /dev/null
+++ b/bin/shBrushPerl.js
@@ -0,0 +1,72 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		// Contributed by David Simmons-Duffin and Marty Kube
+	
+		var funcs = 
+			'abs accept alarm atan2 bind binmode chdir chmod chomp chop chown chr ' + 
+			'chroot close closedir connect cos crypt defined delete each endgrent ' + 
+			'endhostent endnetent endprotoent endpwent endservent eof exec exists ' + 
+			'exp fcntl fileno flock fork format formline getc getgrent getgrgid ' + 
+			'getgrnam gethostbyaddr gethostbyname gethostent getlogin getnetbyaddr ' + 
+			'getnetbyname getnetent getpeername getpgrp getppid getpriority ' + 
+			'getprotobyname getprotobynumber getprotoent getpwent getpwnam getpwuid ' + 
+			'getservbyname getservbyport getservent getsockname getsockopt glob ' + 
+			'gmtime grep hex index int ioctl join keys kill lc lcfirst length link ' + 
+			'listen localtime lock log lstat map mkdir msgctl msgget msgrcv msgsnd ' + 
+			'oct open opendir ord pack pipe pop pos print printf prototype push ' + 
+			'quotemeta rand read readdir readline readlink readpipe recv rename ' + 
+			'reset reverse rewinddir rindex rmdir scalar seek seekdir select semctl ' + 
+			'semget semop send setgrent sethostent setnetent setpgrp setpriority ' + 
+			'setprotoent setpwent setservent setsockopt shift shmctl shmget shmread ' + 
+			'shmwrite shutdown sin sleep socket socketpair sort splice split sprintf ' + 
+			'sqrt srand stat study substr symlink syscall sysopen sysread sysseek ' + 
+			'system syswrite tell telldir time times tr truncate uc ucfirst umask ' + 
+			'undef unlink unpack unshift utime values vec wait waitpid warn write';
+    
+		var keywords =  
+			'bless caller continue dbmclose dbmopen die do dump else elsif eval exit ' +
+			'for foreach goto if import last local my next no our package redo ref ' + 
+			'require return sub tie tied unless untie until use wantarray while';
+    
+		this.regexList = [
+			{ regex: new RegExp('#[^!].*$', 'gm'),					css: 'comments' },
+			{ regex: new RegExp('^\\s*#!.*$', 'gm'),				css: 'preprocessor' }, // shebang
+			{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,	css: 'string' },
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,	css: 'string' },
+			{ regex: new RegExp('(\\$|@|%)\\w+', 'g'),				css: 'variable' },
+			{ regex: new RegExp(this.getKeywords(funcs), 'gmi'),	css: 'functions' },
+			{ regex: new RegExp(this.getKeywords(keywords), 'gm'),	css: 'keyword' }
+		    ];
+
+		this.forHtmlScript(SyntaxHighlighter.regexLib.phpScriptTags);
+	}
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases		= ['perl', 'Perl', 'pl'];
+
+	SyntaxHighlighter.brushes.Perl = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushPhp.js b/bin/shBrushPhp.js
new file mode 100644
index 0000000..6931eb3
--- /dev/null
+++ b/bin/shBrushPhp.js
@@ -0,0 +1,93 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		var funcs	=	'abs acos acosh addcslashes addslashes ' +
+						'array_change_key_case array_chunk array_combine array_count_values array_diff '+
+						'array_diff_assoc array_diff_key array_diff_uassoc array_diff_ukey array_fill '+
+						'array_filter array_flip array_intersect array_intersect_assoc array_intersect_key '+
+						'array_intersect_uassoc array_intersect_ukey array_key_exists array_keys array_map '+
+						'array_merge array_merge_recursive array_multisort array_pad array_pop array_product '+
+						'array_push array_rand array_reduce array_reverse array_search array_shift '+
+						'array_slice array_splice array_sum array_udiff array_udiff_assoc '+
+						'array_udiff_uassoc array_uintersect array_uintersect_assoc '+
+						'array_uintersect_uassoc array_unique array_unshift array_values array_walk '+
+						'array_walk_recursive atan atan2 atanh base64_decode base64_encode base_convert '+
+						'basename bcadd bccomp bcdiv bcmod bcmul bindec bindtextdomain bzclose bzcompress '+
+						'bzdecompress bzerrno bzerror bzerrstr bzflush bzopen bzread bzwrite ceil chdir '+
+						'checkdate checkdnsrr chgrp chmod chop chown chr chroot chunk_split class_exists '+
+						'closedir closelog copy cos cosh count count_chars date decbin dechex decoct '+
+						'deg2rad delete ebcdic2ascii echo empty end ereg ereg_replace eregi eregi_replace error_log '+
+						'error_reporting escapeshellarg escapeshellcmd eval exec exit exp explode extension_loaded '+
+						'feof fflush fgetc fgetcsv fgets fgetss file_exists file_get_contents file_put_contents '+
+						'fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype '+
+						'floatval flock floor flush fmod fnmatch fopen fpassthru fprintf fputcsv fputs fread fscanf '+
+						'fseek fsockopen fstat ftell ftok getallheaders getcwd getdate getenv gethostbyaddr gethostbyname '+
+						'gethostbynamel getimagesize getlastmod getmxrr getmygid getmyinode getmypid getmyuid getopt '+
+						'getprotobyname getprotobynumber getrandmax getrusage getservbyname getservbyport gettext '+
+						'gettimeofday gettype glob gmdate gmmktime ini_alter ini_get ini_get_all ini_restore ini_set '+
+						'interface_exists intval ip2long is_a is_array is_bool is_callable is_dir is_double '+
+						'is_executable is_file is_finite is_float is_infinite is_int is_integer is_link is_long '+
+						'is_nan is_null is_numeric is_object is_readable is_real is_resource is_scalar is_soap_fault '+
+						'is_string is_subclass_of is_uploaded_file is_writable is_writeable mkdir mktime nl2br '+
+						'parse_ini_file parse_str parse_url passthru pathinfo print readlink realpath rewind rewinddir rmdir '+
+						'preg_filter preg_grep preg_last_error preg_match_all preg_match '+
+						'preg_quote preg_replace_callback preg_replace preg_split '+
+						'round str_ireplace str_pad str_repeat str_replace str_rot13 str_shuffle str_split '+
+						'str_word_count strcasecmp strchr strcmp strcoll strcspn strftime strip_tags stripcslashes '+
+						'stripos stripslashes stristr strlen strnatcasecmp strnatcmp strncasecmp strncmp strpbrk '+
+						'strpos strptime strrchr strrev strripos strrpos strspn strstr strtok strtolower strtotime '+
+						'strtoupper strtr strval substr substr_compare';
+
+		var keywords =	'abstract and array as break case catch cfunction class clone const continue declare default die do ' +
+						'else elseif enddeclare endfor endforeach endif endswitch endwhile extends final for foreach ' +
+						'function include include_once global goto if implements interface instanceof namespace new ' +
+						'old_function or private protected public return require require_once static switch ' +
+						'throw try use var while xor ';
+		
+		var constants	= '__FILE__ __LINE__ __METHOD__ __FUNCTION__ __CLASS__';
+
+		this.regexList = [
+			{ regex: /\/\/.*/g,											css: 'comments' },		// one line comments
+			{ regex: /\/\*[^*]*\*+(?:[^/*][^*]*\*+)*\//g,				css: 'comments' },		// multiline comments
+			{ regex: /'[^'\\]*(?:\\[\S\s][^'\\]*)*'/g,					css: 'string' },		// single quoted strings
+
+			{ regex: /'[^'\\]*(?:\\[\S\s][^'\\]*)*'/g,					css: 'variable' },		// single quoted strings
+			{ regex: /"[^"\\]*(?:\\[\S\s][^"\\]*)*"/g,					css: 'string' },		// double quoted strings
+
+			{ regex: /\$\w+/g,											css: 'variable' },		// variables
+			{ regex: new RegExp(this.getKeywords(funcs), 'gmi'),		css: 'functions' },		// common functions
+			{ regex: new RegExp(this.getKeywords(constants), 'gmi'),	css: 'constants' },		// constants
+			{ regex: new RegExp(this.getKeywords(keywords), 'gm'),		css: 'keyword' }		// keyword
+			];
+
+		this.forHtmlScript(SyntaxHighlighter.regexLib.phpScriptTags);
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['php'];
+
+	SyntaxHighlighter.brushes.Php = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushPlain.js b/bin/shBrushPlain.js
new file mode 100644
index 0000000..9f7d9e9
--- /dev/null
+++ b/bin/shBrushPlain.js
@@ -0,0 +1,33 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['text', 'plain'];
+
+	SyntaxHighlighter.brushes.Plain = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushPowerShell.js b/bin/shBrushPowerShell.js
new file mode 100644
index 0000000..0be1752
--- /dev/null
+++ b/bin/shBrushPowerShell.js
@@ -0,0 +1,74 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		// Contributes by B.v.Zanten, Getronics
+		// http://confluence.atlassian.com/display/CONFEXT/New+Code+Macro
+
+		var keywords = 'Add-Content Add-History Add-Member Add-PSSnapin Clear(-Content)? Clear-Item ' +
+					'Clear-ItemProperty Clear-Variable Compare-Object ConvertFrom-SecureString Convert-Path ' +
+					'ConvertTo-Html ConvertTo-SecureString Copy(-Item)? Copy-ItemProperty Export-Alias ' +
+					'Export-Clixml Export-Console Export-Csv ForEach(-Object)? Format-Custom Format-List ' +
+					'Format-Table Format-Wide Get-Acl Get-Alias Get-AuthenticodeSignature Get-ChildItem Get-Command ' +
+					'Get-Content Get-Credential Get-Culture Get-Date Get-EventLog Get-ExecutionPolicy ' +
+					'Get-Help Get-History Get-Host Get-Item Get-ItemProperty Get-Location Get-Member ' +
+					'Get-PfxCertificate Get-Process Get-PSDrive Get-PSProvider Get-PSSnapin Get-Service ' +
+					'Get-TraceSource Get-UICulture Get-Unique Get-Variable Get-WmiObject Group-Object ' +
+					'Import-Alias Import-Clixml Import-Csv Invoke-Expression Invoke-History Invoke-Item ' +
+					'Join-Path Measure-Command Measure-Object Move(-Item)? Move-ItemProperty New-Alias ' +
+					'New-Item New-ItemProperty New-Object New-PSDrive New-Service New-TimeSpan ' +
+					'New-Variable Out-Default Out-File Out-Host Out-Null Out-Printer Out-String Pop-Location ' +
+					'Push-Location Read-Host Remove-Item Remove-ItemProperty Remove-PSDrive Remove-PSSnapin ' +
+					'Remove-Variable Rename-Item Rename-ItemProperty Resolve-Path Restart-Service Resume-Service ' +
+					'Select-Object Select-String Set-Acl Set-Alias Set-AuthenticodeSignature Set-Content ' +
+					'Set-Date Set-ExecutionPolicy Set-Item Set-ItemProperty Set-Location Set-PSDebug ' +
+					'Set-Service Set-TraceSource Set(-Variable)? Sort-Object Split-Path Start-Service ' +
+					'Start-Sleep Start-Transcript Stop-Process Stop-Service Stop-Transcript Suspend-Service ' +
+					'Tee-Object Test-Path Trace-Command Update-FormatData Update-TypeData Where(-Object)? ' +
+					'Write-Debug Write-Error Write(-Host)? Write-Output Write-Progress Write-Verbose Write-Warning';
+		var alias = 'ac asnp clc cli clp clv cpi cpp cvpa diff epal epcsv fc fl ' +
+					'ft fw gal gc gci gcm gdr ghy gi gl gm gp gps group gsv ' +
+					'gsnp gu gv gwmi iex ihy ii ipal ipcsv mi mp nal ndr ni nv oh rdr ' +
+					'ri rni rnp rp rsnp rv rvpa sal sasv sc select si sl sleep sort sp ' +
+					'spps spsv sv tee cat cd cp h history kill lp ls ' +
+					'mount mv popd ps pushd pwd r rm rmdir echo cls chdir del dir ' +
+					'erase rd ren type % \\?';
+
+		this.regexList = [
+			{ regex: /#.*$/gm,										css: 'comments' },  // one line comments
+			{ regex: /\$[a-zA-Z0-9]+\b/g,							css: 'value'   },   // variables $Computer1
+			{ regex: /\-[a-zA-Z]+\b/g,								css: 'keyword' },   // Operators    -not  -and  -eq
+			{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,	css: 'string' },    // strings
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,	css: 'string' },    // strings
+			{ regex: new RegExp(this.getKeywords(keywords), 'gmi'),	css: 'keyword' },
+			{ regex: new RegExp(this.getKeywords(alias), 'gmi'),	css: 'keyword' }
+		];
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['powershell', 'ps'];
+
+	SyntaxHighlighter.brushes.PowerShell = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushPython.js b/bin/shBrushPython.js
new file mode 100644
index 0000000..ce77462
--- /dev/null
+++ b/bin/shBrushPython.js
@@ -0,0 +1,64 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		// Contributed by Gheorghe Milas and Ahmad Sherif
+	
+		var keywords =  'and assert break class continue def del elif else ' +
+						'except exec finally for from global if import in is ' +
+						'lambda not or pass print raise return try yield while';
+
+		var funcs = '__import__ abs all any apply basestring bin bool buffer callable ' +
+					'chr classmethod cmp coerce compile complex delattr dict dir ' +
+					'divmod enumerate eval execfile file filter float format frozenset ' +
+					'getattr globals hasattr hash help hex id input int intern ' +
+					'isinstance issubclass iter len list locals long map max min next ' +
+					'object oct open ord pow print property range raw_input reduce ' +
+					'reload repr reversed round set setattr slice sorted staticmethod ' +
+					'str sum super tuple type type unichr unicode vars xrange zip';
+
+		var special =  'None True False self cls class_';
+
+		this.regexList = [
+				{ regex: SyntaxHighlighter.regexLib.singleLinePerlComments, css: 'comments' },
+				{ regex: /^\s*@\w+/gm, 										css: 'decorator' },
+				{ regex: /(['\"]{3})([^\1])*?\1/gm, 						css: 'comments' },
+				{ regex: /"(?!")(?:\.|\\\"|[^\""\n])*"/gm, 					css: 'string' },
+				{ regex: /'(?!')(?:\.|(\\\')|[^\''\n])*'/gm, 				css: 'string' },
+				{ regex: /\+|\-|\*|\/|\%|=|==/gm, 							css: 'keyword' },
+				{ regex: /\b\d+\.?\w*/g, 									css: 'value' },
+				{ regex: new RegExp(this.getKeywords(funcs), 'gmi'),		css: 'functions' },
+				{ regex: new RegExp(this.getKeywords(keywords), 'gm'), 		css: 'keyword' },
+				{ regex: new RegExp(this.getKeywords(special), 'gm'), 		css: 'color1' }
+				];
+			
+		this.forHtmlScript(SyntaxHighlighter.regexLib.aspScriptTags);
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['py', 'python'];
+
+	SyntaxHighlighter.brushes.Python = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushRuby.js b/bin/shBrushRuby.js
new file mode 100644
index 0000000..ff82130
--- /dev/null
+++ b/bin/shBrushRuby.js
@@ -0,0 +1,55 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		// Contributed by Erik Peterson.
+	
+		var keywords =	'alias and BEGIN begin break case class def define_method defined do each else elsif ' +
+						'END end ensure false for if in module new next nil not or raise redo rescue retry return ' +
+						'self super then throw true undef unless until when while yield';
+
+		var builtins =	'Array Bignum Binding Class Continuation Dir Exception FalseClass File::Stat File Fixnum Fload ' +
+						'Hash Integer IO MatchData Method Module NilClass Numeric Object Proc Range Regexp String Struct::TMS Symbol ' +
+						'ThreadGroup Thread Time TrueClass';
+
+		this.regexList = [
+			{ regex: SyntaxHighlighter.regexLib.singleLinePerlComments,	css: 'comments' },		// one line comments
+			{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,		css: 'string' },		// double quoted strings
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,		css: 'string' },		// single quoted strings
+			{ regex: /\b[A-Z0-9_]+\b/g,									css: 'constants' },		// constants
+			{ regex: /:[a-z][A-Za-z0-9_]*/g,							css: 'color2' },		// symbols
+			{ regex: /(\$|@@|@)\w+/g,									css: 'variable bold' },	// $global, @instance, and @@class variables
+			{ regex: new RegExp(this.getKeywords(keywords), 'gm'),		css: 'keyword' },		// keywords
+			{ regex: new RegExp(this.getKeywords(builtins), 'gm'),		css: 'color1' }			// builtins
+			];
+
+		this.forHtmlScript(SyntaxHighlighter.regexLib.aspScriptTags);
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['ruby', 'rails', 'ror', 'rb'];
+
+	SyntaxHighlighter.brushes.Ruby = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushSass.js b/bin/shBrushSass.js
new file mode 100644
index 0000000..aa04da0
--- /dev/null
+++ b/bin/shBrushSass.js
@@ -0,0 +1,94 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		function getKeywordsCSS(str)
+		{
+			return '\\b([a-z_]|)' + str.replace(/ /g, '(?=:)\\b|\\b([a-z_\\*]|\\*|)') + '(?=:)\\b';
+		};
+	
+		function getValuesCSS(str)
+		{
+			return '\\b' + str.replace(/ /g, '(?!-)(?!:)\\b|\\b()') + '\:\\b';
+		};
+
+		var keywords =	'ascent azimuth background-attachment background-color background-image background-position ' +
+						'background-repeat background baseline bbox border-collapse border-color border-spacing border-style border-top ' +
+						'border-right border-bottom border-left border-top-color border-right-color border-bottom-color border-left-color ' +
+						'border-top-style border-right-style border-bottom-style border-left-style border-top-width border-right-width ' +
+						'border-bottom-width border-left-width border-width border bottom cap-height caption-side centerline clear clip color ' +
+						'content counter-increment counter-reset cue-after cue-before cue cursor definition-src descent direction display ' +
+						'elevation empty-cells float font-size-adjust font-family font-size font-stretch font-style font-variant font-weight font ' +
+						'height left letter-spacing line-height list-style-image list-style-position list-style-type list-style margin-top ' +
+						'margin-right margin-bottom margin-left margin marker-offset marks mathline max-height max-width min-height min-width orphans ' +
+						'outline-color outline-style outline-width outline overflow padding-top padding-right padding-bottom padding-left padding page ' +
+						'page-break-after page-break-before page-break-inside pause pause-after pause-before pitch pitch-range play-during position ' +
+						'quotes right richness size slope src speak-header speak-numeral speak-punctuation speak speech-rate stemh stemv stress ' +
+						'table-layout text-align top text-decoration text-indent text-shadow text-transform unicode-bidi unicode-range units-per-em ' +
+						'vertical-align visibility voice-family volume white-space widows width widths word-spacing x-height z-index';
+		
+		var values =	'above absolute all always aqua armenian attr aural auto avoid baseline behind below bidi-override black blink block blue bold bolder '+
+						'both bottom braille capitalize caption center center-left center-right circle close-quote code collapse compact condensed '+
+						'continuous counter counters crop cross crosshair cursive dashed decimal decimal-leading-zero digits disc dotted double '+
+						'embed embossed e-resize expanded extra-condensed extra-expanded fantasy far-left far-right fast faster fixed format fuchsia '+
+						'gray green groove handheld hebrew help hidden hide high higher icon inline-table inline inset inside invert italic '+
+						'justify landscape large larger left-side left leftwards level lighter lime line-through list-item local loud lower-alpha '+
+						'lowercase lower-greek lower-latin lower-roman lower low ltr marker maroon medium message-box middle mix move narrower '+
+						'navy ne-resize no-close-quote none no-open-quote no-repeat normal nowrap n-resize nw-resize oblique olive once open-quote outset '+
+						'outside overline pointer portrait pre print projection purple red relative repeat repeat-x repeat-y rgb ridge right right-side '+
+						'rightwards rtl run-in screen scroll semi-condensed semi-expanded separate se-resize show silent silver slower slow '+
+						'small small-caps small-caption smaller soft solid speech spell-out square s-resize static status-bar sub super sw-resize '+
+						'table-caption table-cell table-column table-column-group table-footer-group table-header-group table-row table-row-group teal '+
+						'text-bottom text-top thick thin top transparent tty tv ultra-condensed ultra-expanded underline upper-alpha uppercase upper-latin '+
+						'upper-roman url visible wait white wider w-resize x-fast x-high x-large x-loud x-low x-slow x-small x-soft xx-large xx-small yellow';
+		
+		var fonts =		'[mM]onospace [tT]ahoma [vV]erdana [aA]rial [hH]elvetica [sS]ans-serif [sS]erif [cC]ourier mono sans serif';
+		
+		var statements		= '!important !default';
+		var preprocessor	= '@import @extend @debug @warn @if @for @while @mixin @include';
+		
+		var r = SyntaxHighlighter.regexLib;
+		
+		this.regexList = [
+			{ regex: r.multiLineCComments,								css: 'comments' },		// multiline comments
+			{ regex: r.singleLineCComments,								css: 'comments' },		// singleline comments
+			{ regex: r.doubleQuotedString,								css: 'string' },		// double quoted strings
+			{ regex: r.singleQuotedString,								css: 'string' },		// single quoted strings
+			{ regex: /\#[a-fA-F0-9]{3,6}/g,								css: 'value' },			// html colors
+			{ regex: /\b(-?\d+)(\.\d+)?(px|em|pt|\:|\%|)\b/g,			css: 'value' },			// sizes
+			{ regex: /\$\w+/g,											css: 'variable' },		// variables
+			{ regex: new RegExp(this.getKeywords(statements), 'g'),		css: 'color3' },		// statements
+			{ regex: new RegExp(this.getKeywords(preprocessor), 'g'),	css: 'preprocessor' },	// preprocessor
+			{ regex: new RegExp(getKeywordsCSS(keywords), 'gm'),		css: 'keyword' },		// keywords
+			{ regex: new RegExp(getValuesCSS(values), 'g'),				css: 'value' },			// values
+			{ regex: new RegExp(this.getKeywords(fonts), 'g'),			css: 'color1' }			// fonts
+			];
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['sass', 'scss'];
+
+	SyntaxHighlighter.brushes.Sass = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushScala.js b/bin/shBrushScala.js
new file mode 100644
index 0000000..4b0b6f0
--- /dev/null
+++ b/bin/shBrushScala.js
@@ -0,0 +1,51 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		// Contributed by Yegor Jbanov and David Bernard.
+	
+		var keywords =	'val sealed case def true trait implicit forSome import match object null finally super ' +
+						'override try lazy for var catch throw type extends class while with new final yield abstract ' +
+						'else do if return protected private this package false';
+
+		var keyops =	'[_:=><%#@]+';
+
+		this.regexList = [
+			{ regex: SyntaxHighlighter.regexLib.singleLineCComments,			css: 'comments' },	// one line comments
+			{ regex: SyntaxHighlighter.regexLib.multiLineCComments,				css: 'comments' },	// multiline comments
+			{ regex: SyntaxHighlighter.regexLib.multiLineSingleQuotedString,	css: 'string' },	// multi-line strings
+			{ regex: SyntaxHighlighter.regexLib.multiLineDoubleQuotedString,    css: 'string' },	// double-quoted string
+			{ regex: SyntaxHighlighter.regexLib.singleQuotedString,				css: 'string' },	// strings
+			{ regex: /0x[a-f0-9]+|\d+(\.\d+)?/gi,								css: 'value' },		// numbers
+			{ regex: new RegExp(this.getKeywords(keywords), 'gm'),				css: 'keyword' },	// keywords
+			{ regex: new RegExp(keyops, 'gm'),									css: 'keyword' }	// scala keyword
+			];
+	}
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['scala'];
+
+	SyntaxHighlighter.brushes.Scala = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushSql.js b/bin/shBrushSql.js
new file mode 100644
index 0000000..5c2cd88
--- /dev/null
+++ b/bin/shBrushSql.js
@@ -0,0 +1,66 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		var funcs	=	'abs avg case cast coalesce convert count current_timestamp ' +
+						'current_user day isnull left lower month nullif replace right ' +
+						'session_user space substring sum system_user upper user year';
+
+		var keywords =	'absolute action add after alter as asc at authorization begin bigint ' +
+						'binary bit by cascade char character check checkpoint close collate ' +
+						'column commit committed connect connection constraint contains continue ' +
+						'create cube current current_date current_time cursor database date ' +
+						'deallocate dec decimal declare default delete desc distinct double drop ' +
+						'dynamic else end end-exec escape except exec execute false fetch first ' +
+						'float for force foreign forward free from full function global goto grant ' +
+						'group grouping having hour ignore index inner insensitive insert instead ' +
+						'int integer intersect into is isolation key last level load local max min ' +
+						'minute modify move name national nchar next no numeric of off on only ' +
+						'open option order out output partial password precision prepare primary ' +
+						'prior privileges procedure public read real references relative repeatable ' +
+						'restrict return returns revoke rollback rollup rows rule schema scroll ' +
+						'second section select sequence serializable set size smallint static ' +
+						'statistics table temp temporary then time timestamp to top transaction ' +
+						'translation trigger true truncate uncommitted union unique update values ' +
+						'varchar varying view when where with work';
+
+		var operators =	'all and any between cross in join like not null or outer some';
+
+		this.regexList = [
+			{ regex: /--(.*)$/gm,												css: 'comments' },			// one line and multiline comments
+			{ regex: SyntaxHighlighter.regexLib.multiLineDoubleQuotedString,	css: 'string' },			// double quoted strings
+			{ regex: SyntaxHighlighter.regexLib.multiLineSingleQuotedString,	css: 'string' },			// single quoted strings
+			{ regex: new RegExp(this.getKeywords(funcs), 'gmi'),				css: 'color2' },			// functions
+			{ regex: new RegExp(this.getKeywords(operators), 'gmi'),			css: 'color1' },			// operators and such
+			{ regex: new RegExp(this.getKeywords(keywords), 'gmi'),				css: 'keyword' }			// keyword
+			];
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['sql'];
+
+	SyntaxHighlighter.brushes.Sql = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
+
diff --git a/bin/shBrushVb.js b/bin/shBrushVb.js
new file mode 100644
index 0000000..be845dc
--- /dev/null
+++ b/bin/shBrushVb.js
@@ -0,0 +1,56 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		var keywords =	'AddHandler AddressOf AndAlso Alias And Ansi As Assembly Auto ' +
+						'Boolean ByRef Byte ByVal Call Case Catch CBool CByte CChar CDate ' +
+						'CDec CDbl Char CInt Class CLng CObj Const CShort CSng CStr CType ' +
+						'Date Decimal Declare Default Delegate Dim DirectCast Do Double Each ' +
+						'Else ElseIf End Enum Erase Error Event Exit False Finally For Friend ' +
+						'Function Get GetType GoSub GoTo Handles If Implements Imports In ' +
+						'Inherits Integer Interface Is Let Lib Like Long Loop Me Mod Module ' +
+						'MustInherit MustOverride MyBase MyClass Namespace New Next Not Nothing ' +
+						'NotInheritable NotOverridable Object On Option Optional Or OrElse ' +
+						'Overloads Overridable Overrides ParamArray Preserve Private Property ' +
+						'Protected Public RaiseEvent ReadOnly ReDim REM RemoveHandler Resume ' +
+						'Return Select Set Shadows Shared Short Single Static Step Stop String ' +
+						'Structure Sub SyncLock Then Throw To True Try TypeOf Unicode Until ' +
+						'Variant When While With WithEvents WriteOnly Xor';
+
+		this.regexList = [
+			{ regex: /'.*$/gm,										css: 'comments' },			// one line comments
+			{ regex: SyntaxHighlighter.regexLib.doubleQuotedString,	css: 'string' },			// strings
+			{ regex: /^\s*#.*$/gm,									css: 'preprocessor' },		// preprocessor tags like #region and #endregion
+			{ regex: new RegExp(this.getKeywords(keywords), 'gm'),	css: 'keyword' }			// vb keyword
+			];
+
+		this.forHtmlScript(SyntaxHighlighter.regexLib.aspScriptTags);
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['vb', 'vbnet'];
+
+	SyntaxHighlighter.brushes.Vb = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shBrushXml.js b/bin/shBrushXml.js
new file mode 100644
index 0000000..69d9fd0
--- /dev/null
+++ b/bin/shBrushXml.js
@@ -0,0 +1,69 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+;(function()
+{
+	// CommonJS
+	typeof(require) != 'undefined' ? SyntaxHighlighter = require('shCore').SyntaxHighlighter : null;
+
+	function Brush()
+	{
+		function process(match, regexInfo)
+		{
+			var constructor = SyntaxHighlighter.Match,
+				code = match[0],
+				tag = new XRegExp('(&lt;|<)[\\s\\/\\?]*(?<name>[:\\w-\\.]+)', 'xg').exec(code),
+				result = []
+				;
+		
+			if (match.attributes != null) 
+			{
+				var attributes,
+					regex = new XRegExp('(?<name> [\\w:\\-\\.]+)' +
+										'\\s*=\\s*' +
+										'(?<value> ".*?"|\'.*?\'|\\w+)',
+										'xg');
+
+				while ((attributes = regex.exec(code)) != null) 
+				{
+					result.push(new constructor(attributes.name, match.index + attributes.index, 'color1'));
+					result.push(new constructor(attributes.value, match.index + attributes.index + attributes[0].indexOf(attributes.value), 'string'));
+				}
+			}
+
+			if (tag != null)
+				result.push(
+					new constructor(tag.name, match.index + tag[0].indexOf(tag.name), 'keyword')
+				);
+
+			return result;
+		}
+	
+		this.regexList = [
+			{ regex: new XRegExp('(\\&lt;|<)\\!\\[[\\w\\s]*?\\[(.|\\s)*?\\]\\](\\&gt;|>)', 'gm'),			css: 'color2' },	// <![ ... [ ... ]]>
+			{ regex: SyntaxHighlighter.regexLib.xmlComments,												css: 'comments' },	// <!-- ... -->
+			{ regex: new XRegExp('(&lt;|<)[\\s\\/\\?]*(\\w+)(?<attributes>.*?)[\\s\\/\\?]*(&gt;|>)', 'sg'), func: process }
+		];
+	};
+
+	Brush.prototype	= new SyntaxHighlighter.Highlighter();
+	Brush.aliases	= ['xml', 'xhtml', 'xslt', 'html'];
+
+	SyntaxHighlighter.brushes.Xml = Brush;
+
+	// CommonJS
+	typeof(exports) != 'undefined' ? exports.Brush = Brush : null;
+})();
diff --git a/bin/shCore.css b/bin/shCore.css
new file mode 100644
index 0000000..34f6864
--- /dev/null
+++ b/bin/shCore.css
@@ -0,0 +1,226 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter a,
+.syntaxhighlighter div,
+.syntaxhighlighter code,
+.syntaxhighlighter table,
+.syntaxhighlighter table td,
+.syntaxhighlighter table tr,
+.syntaxhighlighter table tbody,
+.syntaxhighlighter table thead,
+.syntaxhighlighter table caption,
+.syntaxhighlighter textarea {
+  -moz-border-radius: 0 0 0 0 !important;
+  -webkit-border-radius: 0 0 0 0 !important;
+  background: none !important;
+  border: 0 !important;
+  bottom: auto !important;
+  float: none !important;
+  height: auto !important;
+  left: auto !important;
+  line-height: 1.1em !important;
+  margin: 0 !important;
+  outline: 0 !important;
+  overflow: visible !important;
+  padding: 0 !important;
+  position: static !important;
+  right: auto !important;
+  text-align: left !important;
+  top: auto !important;
+  vertical-align: baseline !important;
+  width: auto !important;
+  box-sizing: content-box !important;
+  font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace !important;
+  font-weight: normal !important;
+  font-style: normal !important;
+  font-size: 1em !important;
+  min-height: inherit !important;
+  min-height: auto !important;
+}
+
+.syntaxhighlighter {
+  width: 100% !important;
+  margin: 1em 0 1em 0 !important;
+  position: relative !important;
+  overflow: auto !important;
+  font-size: 1em !important;
+}
+.syntaxhighlighter.source {
+  overflow: hidden !important;
+}
+.syntaxhighlighter .bold {
+  font-weight: bold !important;
+}
+.syntaxhighlighter .italic {
+  font-style: italic !important;
+}
+.syntaxhighlighter .line {
+  white-space: pre !important;
+}
+.syntaxhighlighter table {
+  width: 100% !important;
+}
+.syntaxhighlighter table caption {
+  text-align: left !important;
+  padding: .5em 0 0.5em 1em !important;
+}
+.syntaxhighlighter table td.code {
+  width: 100% !important;
+}
+.syntaxhighlighter table td.code .container {
+  position: relative !important;
+}
+.syntaxhighlighter table td.code .container textarea {
+  box-sizing: border-box !important;
+  position: absolute !important;
+  left: 0 !important;
+  top: 0 !important;
+  width: 100% !important;
+  height: 100% !important;
+  border: none !important;
+  background: white !important;
+  padding-left: 1em !important;
+  overflow: hidden !important;
+  white-space: pre !important;
+}
+.syntaxhighlighter table td.gutter .line {
+  text-align: right !important;
+  padding: 0 0.5em 0 1em !important;
+}
+.syntaxhighlighter table td.code .line {
+  padding: 0 1em !important;
+}
+.syntaxhighlighter.nogutter td.code .container textarea, .syntaxhighlighter.nogutter td.code .line {
+  padding-left: 0em !important;
+}
+.syntaxhighlighter.show {
+  display: block !important;
+}
+.syntaxhighlighter.collapsed table {
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  padding: 0.1em 0.8em 0em 0.8em !important;
+  font-size: 1em !important;
+  position: static !important;
+  width: auto !important;
+  height: auto !important;
+}
+.syntaxhighlighter.collapsed .toolbar span {
+  display: inline !important;
+  margin-right: 1em !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a {
+  padding: 0 !important;
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a.expandSource {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar {
+  position: absolute !important;
+  right: 1px !important;
+  top: 1px !important;
+  width: 11px !important;
+  height: 11px !important;
+  font-size: 10px !important;
+  z-index: 10 !important;
+}
+.syntaxhighlighter .toolbar span.title {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar a {
+  display: block !important;
+  text-align: center !important;
+  text-decoration: none !important;
+  padding-top: 1px !important;
+}
+.syntaxhighlighter .toolbar a.expandSource {
+  display: none !important;
+}
+.syntaxhighlighter.ie {
+  font-size: .9em !important;
+  padding: 1px 0 1px 0 !important;
+}
+.syntaxhighlighter.ie .toolbar {
+  line-height: 8px !important;
+}
+.syntaxhighlighter.ie .toolbar a {
+  padding-top: 0px !important;
+}
+.syntaxhighlighter.printing .line.alt1 .content,
+.syntaxhighlighter.printing .line.alt2 .content,
+.syntaxhighlighter.printing .line.highlighted .number,
+.syntaxhighlighter.printing .line.highlighted.alt1 .content,
+.syntaxhighlighter.printing .line.highlighted.alt2 .content {
+  background: none !important;
+}
+.syntaxhighlighter.printing .line .number {
+  color: #bbbbbb !important;
+}
+.syntaxhighlighter.printing .line .content {
+  color: black !important;
+}
+.syntaxhighlighter.printing .toolbar {
+  display: none !important;
+}
+.syntaxhighlighter.printing a {
+  text-decoration: none !important;
+}
+.syntaxhighlighter.printing .plain, .syntaxhighlighter.printing .plain a {
+  color: black !important;
+}
+.syntaxhighlighter.printing .comments, .syntaxhighlighter.printing .comments a {
+  color: #008200 !important;
+}
+.syntaxhighlighter.printing .string, .syntaxhighlighter.printing .string a {
+  color: blue !important;
+}
+.syntaxhighlighter.printing .keyword {
+  color: #006699 !important;
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .preprocessor {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter.printing .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter.printing .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter.printing .script {
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .color1, .syntaxhighlighter.printing .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .color2, .syntaxhighlighter.printing .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .color3, .syntaxhighlighter.printing .color3 a {
+  color: red !important;
+}
+.syntaxhighlighter.printing .break, .syntaxhighlighter.printing .break a {
+  color: black !important;
+}
diff --git a/bin/shCore.js b/bin/shCore.js
new file mode 100644
index 0000000..ab7bf83
--- /dev/null
+++ b/bin/shCore.js
@@ -0,0 +1,1791 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ *
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+//
+// Begin anonymous function. This is used to contain local scope variables without polutting global scope.
+//
+var SyntaxHighlighter = function() {
+
+// CommonJS
+//if (typeof(require) != 'undefined' && typeof(XRegExp) == 'undefined')
+//{
+//	XRegExp = require('XRegExp').XRegExp;
+//}
+
+// Shortcut object which will be assigned to the SyntaxHighlighter variable.
+// This is a shorthand for local reference in order to avoid long namespace
+// references to SyntaxHighlighter.whatever...
+var sh = {
+	defaults : {
+		/** Additional CSS class names to be added to highlighter elements. */
+		'class-name' : '',
+
+		/** First line number. */
+		'first-line' : 1,
+
+		/**
+		 * Pads line numbers. Possible values are:
+		 *
+		 *   false - don't pad line numbers.
+		 *   true  - automaticaly pad numbers with minimum required number of leading zeroes.
+		 *   [int] - length up to which pad line numbers.
+		 */
+		'pad-line-numbers' : false,
+
+		/** Lines to highlight. */
+		'highlight' : null,
+
+		/** Title to be displayed above the code block. */
+		'title' : null,
+
+		/** Enables or disables smart tabs. */
+		'smart-tabs' : true,
+
+		/** Gets or sets tab size. */
+		'tab-size' : 4,
+
+		/** Enables or disables gutter. */
+		'gutter' : true,
+
+		/** Enables or disables toolbar. */
+		'toolbar' : true,
+
+		/** Enables quick code copy and paste from double click. */
+		'quick-code' : true,
+
+		/** Forces code view to be collapsed. */
+		'collapse' : false,
+
+		/** Enables or disables automatic links. */
+		'auto-links' : true,
+
+		/** Gets or sets light mode. Equavalent to turning off gutter and toolbar. */
+		'light' : false,
+
+		'html-script' : false
+	},
+
+	config : {
+		space : '&nbsp;',
+
+		/** Enables use of <SCRIPT type="syntaxhighlighter" /> tags. */
+		useScriptTags : true,
+
+		/** Blogger mode flag. */
+		bloggerMode : false,
+
+		stripBrs : false,
+
+		/** Name of the tag that SyntaxHighlighter will automatically look for. */
+		tagName : 'pre',
+
+		strings : {
+			expandSource : 'expand source',
+			help : '?',
+			alert: 'SyntaxHighlighter\n\n',
+			noBrush : 'Can\'t find brush for: ',
+			brushNotHtmlScript : 'Brush wasn\'t configured for html-script option: ',
+
+			// this is populated by the build script
+			aboutDialog : '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>About SyntaxHighlighter</title></head><body style="font-family:Geneva,Arial,Helvetica,sans-serif;background-color:#fff;color:#000;font-size:1em;text-align:center;"><div style="text-align:center;margin-top:1.5em;"><div style="font-size:xx-large;">SyntaxHighlighter</div><div style="font-size:.75em;margin-bottom:3em;"><div>version 3.0.83 (July 02 2010)</div><div><a href="http://alexgorbatchev.com/SyntaxHighlighter" target="_blank" style="color:#005896">http://alexgorbatchev.com/SyntaxHighlighter</a></div><div>JavaScript code syntax highlighter.</div><div>Copyright 2004-2010 Alex Gorbatchev.</div></div><div>If you like this script, please <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=2930402" style="color:#005896">donate</a> to <br/>keep development active!</div></div></body></html>'
+		}
+	},
+
+	/** Internal 'global' variables. */
+	vars : {
+		discoveredBrushes : null,
+		highlighters : {}
+	},
+
+	/** This object is populated by user included external brush files. */
+	brushes : {},
+
+	/** Common regular expressions. */
+	regexLib : {
+		multiLineCComments			: /\/\*[^*]*\*+(?:[^/*][^*]*\*+)*\//g, // JMR
+		singleLineCComments			: /\/\/.*$/gm,
+		singleLinePerlComments		: /#.*$/gm,
+		doubleQuotedString			: /"[^"\r\n\\]*(?:\\[^\r\n][^"\r\n\\]*)*"/g, // JMR
+//		doubleQuotedString			: /"([^\\"\n]|\\.)*"/g,
+
+		singleQuotedString			: /'[^'\r\n\\]*(?:\\[^\r\n][^'\r\n\\]*)*'/g, // JMR
+//		singleQuotedString			: /'([^\\'\n]|\\.)*'/g,
+
+//		multiLineDoubleQuotedString	: new XRegExp('"([^\\\\"]|\\\\.)*"', 'gs'),
+		multiLineDoubleQuotedString	: /"[^"\\]*(?:\\[\S\s][^"\\]*)*"/g, // JMR
+//		multiLineSingleQuotedString	: new XRegExp("'([^\\\\']|\\\\.)*'", 'gs'),
+		multiLineSingleQuotedString	: /'[^'\\]*(?:\\[\S\s][^'\\]*)*'/g, // JMR
+		xmlComments					: /(&lt;|<)!--[\s\S]*?--(&gt;|>)/gm,
+		url							: /\w+:\/\/[\w-.\/?%&=:@;]*/g,
+
+		/** <?= ?> tags. */
+		phpScriptTags 				: { left: /(&lt;|<)\?=?/g, right: /\?(&gt;|>)/g },
+
+		/** <%= %> tags. */
+		aspScriptTags				: { left: /(&lt;|<)%=?/g, right: /%(&gt;|>)/g },
+
+		/** <script></script> tags. */
+		scriptScriptTags			: { left: /(&lt;|<)\s*script.*?(&gt;|>)/gi, right: /(&lt;|<)\/\s*script\s*(&gt;|>)/gi }
+	},
+
+	toolbar: {
+		/**
+		 * Generates HTML markup for the toolbar.
+		 * @param {Highlighter} highlighter Highlighter instance.
+		 * @return {String} Returns HTML markup.
+		 */
+		getHtml: function(highlighter)
+		{
+			var html = '<div class="toolbar">',
+				items = sh.toolbar.items,
+				list = items.list
+				;
+
+			function defaultGetHtml(highlighter, name)
+			{
+				return sh.toolbar.getButtonHtml(highlighter, name, sh.config.strings[name]);
+			};
+
+			for (var i = 0; i < list.length; i++)
+				html += (items[list[i]].getHtml || defaultGetHtml)(highlighter, list[i]);
+
+			html += '</div>';
+
+			return html;
+		},
+
+		/**
+		 * Generates HTML markup for a regular button in the toolbar.
+		 * @param {Highlighter} highlighter Highlighter instance.
+		 * @param {String} commandName		Command name that would be executed.
+		 * @param {String} label			Label text to display.
+		 * @return {String}					Returns HTML markup.
+		 */
+		getButtonHtml: function(highlighter, commandName, label)
+		{
+			return '<span><a href="#" class="toolbar_item'
+				+ ' command_' + commandName
+				+ ' ' + commandName
+				+ '">' + label + '</a></span>'
+				;
+		},
+
+		/**
+		 * Event handler for a toolbar anchor.
+		 */
+		handler: function(e)
+		{
+			var target = e.target,
+				className = target.className || ''
+				;
+
+			function getValue(name)
+			{
+				var r = new RegExp(name + '_(\\w+)'),
+					match = r.exec(className)
+					;
+
+				return match ? match[1] : null;
+			};
+
+			var highlighter = getHighlighterById(findParentElement(target, '.syntaxhighlighter').id),
+				commandName = getValue('command')
+				;
+
+			// execute the toolbar command
+			if (highlighter && commandName)
+				sh.toolbar.items[commandName].execute(highlighter);
+
+			// disable default A click behaviour
+			e.preventDefault();
+		},
+
+		/** Collection of toolbar items. */
+		items : {
+			// Ordered lis of items in the toolbar. Can't expect `for (var n in items)` to be consistent.
+			list: ['expandSource', 'help'],
+
+			expandSource: {
+				getHtml: function(highlighter)
+				{
+					if (highlighter.getParam('collapse') != true)
+						return '';
+
+					var title = highlighter.getParam('title');
+					return sh.toolbar.getButtonHtml(highlighter, 'expandSource', title ? title : sh.config.strings.expandSource);
+				},
+
+				execute: function(highlighter)
+				{
+					var div = getHighlighterDivById(highlighter.id);
+					removeClass(div, 'collapsed');
+				}
+			},
+
+			/** Command to display the about dialog window. */
+			help: {
+				execute: function(highlighter)
+				{
+					var wnd = popup('', '_blank', 500, 250, 'scrollbars=0'),
+						doc = wnd.document
+						;
+
+					doc.write(sh.config.strings.aboutDialog);
+					doc.close();
+					wnd.focus();
+				}
+			}
+		}
+	},
+
+	/**
+	 * Finds all elements on the page which should be processes by SyntaxHighlighter.
+	 *
+	 * @param {Object} globalParams		Optional parameters which override element's
+	 * 									parameters. Only used if element is specified.
+	 *
+	 * @param {Object} element	Optional element to highlight. If none is
+	 * 							provided, all elements in the current document
+	 * 							are returned which qualify.
+	 *
+	 * @return {Array}	Returns list of <code>{ target: DOMElement, params: Object }</code> objects.
+	 */
+	findElements: function(globalParams, element)
+	{
+		var elements = element ? [element] : toArray(document.getElementsByTagName(sh.config.tagName)),
+			conf = sh.config,
+			result = []
+			;
+
+		// support for <SCRIPT TYPE="syntaxhighlighter" /> feature
+		if (conf.useScriptTags)
+			elements = elements.concat(getSyntaxHighlighterScriptTags());
+
+		if (elements.length === 0)
+			return result;
+
+		for (var i = 0; i < elements.length; i++)
+		{
+			var item = {
+				target: elements[i],
+				// local params take precedence over globals
+				params: merge(globalParams, parseParams(elements[i].className))
+			};
+
+			if (item.params['brush'] == null)
+				continue;
+
+			result.push(item);
+		}
+
+		return result;
+	},
+
+	/**
+	 * Shorthand to highlight all elements on the page that are marked as
+	 * SyntaxHighlighter source code.
+	 *
+	 * @param {Object} globalParams		Optional parameters which override element's
+	 * 									parameters. Only used if element is specified.
+	 *
+	 * @param {Object} element	Optional element to highlight. If none is
+	 * 							provided, all elements in the current document
+	 * 							are highlighted.
+	 */
+	highlight: function(globalParams, element)
+	{
+		var elements = this.findElements(globalParams, element),
+			propertyName = 'innerHTML',
+			highlighter = null,
+			conf = sh.config
+			;
+
+		if (elements.length === 0)
+			return;
+
+		for (var i = 0; i < elements.length; i++)
+		{
+			var element = elements[i],
+				target = element.target,
+				params = element.params,
+				brushName = params.brush,
+				code
+				;
+
+			if (brushName == null)
+				continue;
+
+			// Instantiate a brush
+			if (params['html-script'] == 'true' || sh.defaults['html-script'] == true)
+			{
+				highlighter = new sh.HtmlScript(brushName);
+				brushName = 'htmlscript';
+			}
+			else
+			{
+				var brush = findBrush(brushName);
+
+				if (brush)
+					highlighter = new brush();
+				else
+					continue;
+			}
+
+			code = target[propertyName];
+
+			// remove CDATA from <SCRIPT/> tags if it's present
+			if (conf.useScriptTags)
+				code = stripCData(code);
+
+			// Inject title if the attribute is present
+			if ((target.title || '') != '')
+				params.title = target.title;
+
+			params['brush'] = brushName;
+			highlighter.init(params);
+			element = highlighter.getDiv(code);
+
+			// carry over ID
+			if ((target.id || '') != '')
+				element.id = target.id;
+
+			target.parentNode.replaceChild(element, target);
+		}
+	},
+
+	/**
+	 * Main entry point for the SyntaxHighlighter.
+	 * @param {Object} params Optional params to apply to all highlighted elements.
+	 */
+	all: function(params)
+	{
+		attachEvent(
+			window,
+			'load',
+			function() { sh.highlight(params); }
+		);
+	}
+}; // end of sh
+
+sh['all']			= sh.all;
+sh['highlight']		= sh.highlight;
+
+/**
+ * Checks if target DOM elements has specified CSS class.
+ * @param {DOMElement} target Target DOM element to check.
+ * @param {String} className Name of the CSS class to check for.
+ * @return {Boolean} Returns true if class name is present, false otherwise.
+ */
+function hasClass(target, className)
+{
+	return target.className.indexOf(className) != -1;
+};
+
+/**
+ * Adds CSS class name to the target DOM element.
+ * @param {DOMElement} target Target DOM element.
+ * @param {String} className New CSS class to add.
+ */
+function addClass(target, className)
+{
+	if (!hasClass(target, className))
+		target.className += ' ' + className;
+};
+
+/**
+ * Removes CSS class name from the target DOM element.
+ * @param {DOMElement} target Target DOM element.
+ * @param {String} className CSS class to remove.
+ */
+function removeClass(target, className)
+{
+	target.className = target.className.replace(className, '');
+};
+
+/**
+ * Converts the source to array object. Mostly used for function arguments and
+ * lists returned by getElementsByTagName() which aren't Array objects.
+ * @param {List} source Source list.
+ * @return {Array} Returns array.
+ */
+function toArray(source)
+{
+	var result = [];
+
+	for (var i = 0; i < source.length; i++)
+		result.push(source[i]);
+
+	return result;
+};
+
+/**
+ * Splits block of text into lines.
+ * @param {String} block Block of text.
+ * @return {Array} Returns array of lines.
+ */
+function splitLines(block)
+{
+	return block.split('\n');
+}
+
+/**
+ * Generates HTML ID for the highlighter.
+ * @param {String} highlighterId Highlighter ID.
+ * @return {String} Returns HTML ID.
+ */
+function getHighlighterId(id)
+{
+	var prefix = 'highlighter_';
+	return id.indexOf(prefix) == 0 ? id : prefix + id;
+};
+
+/**
+ * Finds Highlighter instance by ID.
+ * @param {String} highlighterId Highlighter ID.
+ * @return {Highlighter} Returns instance of the highlighter.
+ */
+function getHighlighterById(id)
+{
+	return sh.vars.highlighters[getHighlighterId(id)];
+};
+
+/**
+ * Finds highlighter's DIV container.
+ * @param {String} highlighterId Highlighter ID.
+ * @return {Element} Returns highlighter's DIV element.
+ */
+function getHighlighterDivById(id)
+{
+	return document.getElementById(getHighlighterId(id));
+};
+
+/**
+ * Stores highlighter so that getHighlighterById() can do its thing. Each
+ * highlighter must call this method to preserve itself.
+ * @param {Highilghter} highlighter Highlighter instance.
+ */
+function storeHighlighter(highlighter)
+{
+	sh.vars.highlighters[getHighlighterId(highlighter.id)] = highlighter;
+};
+
+/**
+ * Looks for a child or parent node which has specified classname.
+ * Equivalent to jQuery's $(container).find(".className")
+ * @param {Element} target Target element.
+ * @param {String} search Class name or node name to look for.
+ * @param {Boolean} reverse If set to true, will go up the node tree instead of down.
+ * @return {Element} Returns found child or parent element on null.
+ */
+function findElement(target, search, reverse /* optional */)
+{
+	if (target == null)
+		return null;
+
+	var nodes			= reverse != true ? target.childNodes : [ target.parentNode ],
+		propertyToFind	= { '#' : 'id', '.' : 'className' }[search.substr(0, 1)] || 'nodeName',
+		expectedValue,
+		found
+		;
+
+	expectedValue = propertyToFind != 'nodeName'
+		? search.substr(1)
+		: search.toUpperCase()
+		;
+
+	// main return of the found node
+	if ((target[propertyToFind] || '').indexOf(expectedValue) != -1)
+		return target;
+
+	for (var i = 0; nodes && i < nodes.length && found == null; i++)
+		found = findElement(nodes[i], search, reverse);
+
+	return found;
+};
+
+/**
+ * Looks for a parent node which has specified classname.
+ * This is an alias to <code>findElement(container, className, true)</code>.
+ * @param {Element} target Target element.
+ * @param {String} className Class name to look for.
+ * @return {Element} Returns found parent element on null.
+ */
+function findParentElement(target, className)
+{
+	return findElement(target, className, true);
+};
+
+/**
+ * Finds an index of element in the array.
+ * @ignore
+ * @param {Object} searchElement
+ * @param {Number} fromIndex
+ * @return {Number} Returns index of element if found; -1 otherwise.
+ */
+function indexOf(array, searchElement, fromIndex)
+{
+	fromIndex = Math.max(fromIndex || 0, 0);
+
+	for (var i = fromIndex; i < array.length; i++)
+		if(array[i] == searchElement)
+			return i;
+
+	return -1;
+};
+
+/**
+ * Generates a unique element ID.
+ */
+function guid(prefix)
+{
+	return (prefix || '') + Math.round(Math.random() * 1000000).toString();
+};
+
+/**
+ * Merges two objects. Values from obj2 override values in obj1.
+ * Function is NOT recursive and works only for one dimensional objects.
+ * @param {Object} obj1 First object.
+ * @param {Object} obj2 Second object.
+ * @return {Object} Returns combination of both objects.
+ */
+function merge(obj1, obj2)
+{
+	var result = {}, name;
+
+	for (name in obj1)
+		result[name] = obj1[name];
+
+	for (name in obj2)
+		result[name] = obj2[name];
+
+	return result;
+};
+
+/**
+ * Attempts to convert string to boolean.
+ * @param {String} value Input string.
+ * @return {Boolean} Returns true if input was "true", false if input was "false" and value otherwise.
+ */
+function toBoolean(value)
+{
+	var result = { "true" : true, "false" : false }[value];
+	return result == null ? value : result;
+};
+
+/**
+ * Opens up a centered popup window.
+ * @param {String} url		URL to open in the window.
+ * @param {String} name		Popup name.
+ * @param {int} width		Popup width.
+ * @param {int} height		Popup height.
+ * @param {String} options	window.open() options.
+ * @return {Window}			Returns window instance.
+ */
+function popup(url, name, width, height, options)
+{
+	var x = (screen.width - width) / 2,
+		y = (screen.height - height) / 2
+		;
+
+	options +=	', left=' + x +
+				', top=' + y +
+				', width=' + width +
+				', height=' + height
+		;
+	options = options.replace(/^,/, '');
+
+	var win = window.open(url, name, options);
+	win.focus();
+	return win;
+};
+
+/**
+ * Adds event handler to the target object.
+ * @param {Object} obj		Target object.
+ * @param {String} type		Name of the event.
+ * @param {Function} func	Handling function.
+ */
+function attachEvent(obj, type, func, scope)
+{
+	function handler(e)
+	{
+		e = e || window.event;
+
+		if (!e.target)
+		{
+			e.target = e.srcElement;
+			e.preventDefault = function()
+			{
+				this.returnValue = false;
+			};
+		}
+
+		func.call(scope || window, e);
+	};
+
+	if (obj.attachEvent)
+	{
+		obj.attachEvent('on' + type, handler);
+	}
+	else
+	{
+		obj.addEventListener(type, handler, false);
+	}
+};
+
+/**
+ * Displays an alert.
+ * @param {String} str String to display.
+ */
+function alert(str)
+{
+	window.alert(sh.config.strings.alert + str);
+};
+
+/**
+ * Finds a brush by its alias.
+ *
+ * @param {String} alias		Brush alias.
+ * @param {Boolean} showAlert	Suppresses the alert if false.
+ * @return {Brush}				Returns bursh constructor if found, null otherwise.
+ */
+function findBrush(alias, showAlert)
+{
+	var brushes = sh.vars.discoveredBrushes,
+		result = null
+		;
+
+	if (brushes == null)
+	{
+		brushes = {};
+
+		// Find all brushes
+		for (var brush in sh.brushes)
+		{
+			var info = sh.brushes[brush],
+				aliases = info.aliases
+				;
+
+			if (aliases == null)
+				continue;
+
+			// keep the brush name
+			info.brushName = brush.toLowerCase();
+
+			for (var i = 0; i < aliases.length; i++)
+				brushes[aliases[i]] = brush;
+		}
+
+		sh.vars.discoveredBrushes = brushes;
+	}
+
+	result = sh.brushes[brushes[alias]];
+
+	if (result == null && showAlert != false)
+		alert(sh.config.strings.noBrush + alias);
+
+	return result;
+};
+
+/**
+ * Executes a callback on each line and replaces each line with result from the callback.
+ * @param {Object} str			Input string.
+ * @param {Object} callback		Callback function taking one string argument and returning a string.
+ */
+function eachLine(str, callback)
+{
+	var lines = splitLines(str);
+
+	for (var i = 0; i < lines.length; i++)
+		lines[i] = callback(lines[i], i);
+
+	return lines.join('\n');
+};
+
+/**
+ * This is a special trim which only removes first and last empty lines
+ * and doesn't affect valid leading space on the first line.
+ *
+ * @param {String} str   Input string
+ * @return {String}      Returns string without empty first and last lines.
+ */
+function trimFirstAndLastLines(str)
+{
+	return str.replace(/^[ ]*[\n]+|[\n]*[ ]*$/g, '');
+};
+
+/**
+ * Parses key/value pairs into hash object.
+ *
+ * Understands the following formats:
+ * - name: word;
+ * - name: [word, word];
+ * - name: "string";
+ * - name: 'string';
+ *
+ * For example:
+ *   name1: value; name2: [value, value]; name3: 'value'
+ *
+ * @param {String} str    Input string.
+ * @return {Object}       Returns deserialized object.
+ */
+function parseParams(str)
+{
+	var match,
+		result = {},
+
+		arrayRegex = /^\[(.*)\]$/,
+//		arrayRegex = new XRegExp("^\\[(?<values>(.*?))\\]$"),
+
+
+		regex = /([\w-]+)\s*:\s*([\w\-%#]+|\[.*?\]|".*?"|'.*?')\s*;?/g;
+//		regex = new XRegExp(
+//			"(?<name>[\\w-]+)" +
+//			"\\s*:\\s*" +
+//			"(?<value>" +
+//				"[\\w-%#]+|" +		// word
+//				"\\[.*?\\]|" +		// [] array
+//				'".*?"|' +			// "" string
+//				"'.*?'" +			// '' string
+//			")\\s*;?",
+//			"g"
+//		)
+//		;
+
+	while ((match = regex.exec(str)) != null)
+	{
+
+		var value = match[2].replace(/^['"]|['"]$/g, '') // strip quotes from end of strings
+//		var value = match.value
+//			.replace(/^['"]|['"]$/g, '') // strip quotes from end of strings
+			;
+
+		// try to parse array value
+		if (value != null && arrayRegex.test(value))
+		{
+			var m = arrayRegex.exec(value);
+
+			value = m[1].length > 0 ? m[1].split(/\s*,\s*/) : [];
+//			value = m.values.length > 0 ? m.values.split(/\s*,\s*/) : [];
+
+		}
+
+
+		result[match[1]] = value;
+//		result[match.name] = value;
+
+	}
+
+	return result;
+};
+
+/**
+ * Wraps each line of the string into <code/> tag with given style applied to it.
+ *
+ * @param {String} str   Input string.
+ * @param {String} css   Style name to apply to the string.
+ * @return {String}      Returns input string with each line surrounded by <span/> tag.
+ */
+function wrapLinesWithCode(str, css)
+{
+	if (str == null || str.length == 0 || str == '\n')
+		return str;
+
+	str = str.replace(/</g, '&lt;');
+
+	// Replace two or more sequential spaces with &nbsp; leaving last space untouched.
+	str = str.replace(/ {2,}/g, function(m)
+	{
+		var spaces = '';
+
+		for (var i = 0; i < m.length - 1; i++)
+			spaces += sh.config.space;
+
+		return spaces + ' ';
+	});
+
+	// Split each line and apply <span class="...">...</span> to them so that
+	// leading spaces aren't included.
+	if (css != null)
+		str = eachLine(str, function(line)
+		{
+			if (line.length == 0)
+				return '';
+
+			var spaces = '';
+
+			line = line.replace(/^(&nbsp;| )+/, function(s)
+			{
+				spaces = s;
+				return '';
+			});
+
+			if (line.length == 0)
+				return spaces;
+
+			return spaces + '<code class="' + css + '">' + line + '</code>';
+		});
+
+	return str;
+};
+
+/**
+ * Pads number with zeros until it's length is the same as given length.
+ *
+ * @param {Number} number	Number to pad.
+ * @param {Number} length	Max string length with.
+ * @return {String}			Returns a string padded with proper amount of '0'.
+ */
+function padNumber(number, length)
+{
+	var result = number.toString();
+
+	while (result.length < length)
+		result = '0' + result;
+
+	return result;
+};
+
+/**
+ * Replaces tabs with spaces.
+ *
+ * @param {String} code		Source code.
+ * @param {Number} tabSize	Size of the tab.
+ * @return {String}			Returns code with all tabs replaces by spaces.
+ */
+function processTabs(code, tabSize)
+{
+	var tab = '';
+
+	for (var i = 0; i < tabSize; i++)
+		tab += ' ';
+
+	return code.replace(/\t/g, tab);
+};
+
+/**
+ * Replaces tabs with smart spaces.
+ *
+ * @param {String} code    Code to fix the tabs in.
+ * @param {Number} tabSize Number of spaces in a column.
+ * @return {String}        Returns code with all tabs replaces with roper amount of spaces.
+ */
+function processSmartTabs(code, tabSize)
+{
+	var lines = splitLines(code),
+		tab = '\t',
+		spaces = ''
+		;
+
+	// Create a string with 1000 spaces to copy spaces from...
+	// It's assumed that there would be no indentation longer than that.
+	for (var i = 0; i < 50; i++)
+		spaces += '                    '; // 20 spaces * 50
+
+	// This function inserts specified amount of spaces in the string
+	// where a tab is while removing that given tab.
+	function insertSpaces(line, pos, count)
+	{
+		return line.substr(0, pos)
+			+ spaces.substr(0, count)
+			+ line.substr(pos + 1, line.length) // pos + 1 will get rid of the tab
+			;
+	};
+
+	// Go through all the lines and do the 'smart tabs' magic.
+	code = eachLine(code, function(line)
+	{
+		if (line.indexOf(tab) == -1)
+			return line;
+
+		var pos = 0;
+
+		while ((pos = line.indexOf(tab)) != -1)
+		{
+			// This is pretty much all there is to the 'smart tabs' logic.
+			// Based on the position within the line and size of a tab,
+			// calculate the amount of spaces we need to insert.
+			var spaces = tabSize - pos % tabSize;
+			line = insertSpaces(line, pos, spaces);
+		}
+
+		return line;
+	});
+
+	return code;
+};
+
+/**
+ * Performs various string fixes based on configuration.
+ */
+function fixInputString(str)
+{
+	var br = /<br\s*\/?>|&lt;br\s*\/?&gt;/gi;
+
+	if (sh.config.bloggerMode == true)
+		str = str.replace(br, '\n');
+
+	if (sh.config.stripBrs == true)
+		str = str.replace(br, '');
+
+	return str;
+};
+
+/**
+ * Removes all white space at the begining and end of a string.
+ *
+ * @param {String} str   String to trim.
+ * @return {String}      Returns string without leading and following white space characters.
+ */
+function trim(str)
+{
+	return str.replace(/^\s+|\s+$/g, '');
+};
+
+/**
+ * Unindents a block of text by the lowest common indent amount.
+ * @param {String} str   Text to unindent.
+ * @return {String}      Returns unindented text block.
+ */
+function unindent(str)
+{
+	var lines = splitLines(fixInputString(str)),
+		indents = new Array(),
+		regex = /^\s*/,
+		min = 1000
+		;
+
+	// go through every line and check for common number of indents
+	for (var i = 0; i < lines.length && min > 0; i++)
+	{
+		var line = lines[i];
+
+		if (trim(line).length == 0)
+			continue;
+
+		var matches = regex.exec(line);
+
+		// In the event that just one line doesn't have leading white space
+		// we can't unindent anything, so bail completely.
+		if (matches == null)
+			return str;
+
+		min = Math.min(matches[0].length, min);
+	}
+
+	// trim minimum common number of white space from the begining of every line
+	if (min > 0)
+		for (var i = 0; i < lines.length; i++)
+			lines[i] = lines[i].substr(min);
+
+	return lines.join('\n');
+};
+
+/**
+ * Callback method for Array.sort() which sorts matches by
+ * index position and then by length.
+ *
+ * @param {Match} m1	Left object.
+ * @param {Match} m2    Right object.
+ * @return {Number}     Returns -1, 0 or -1 as a comparison result.
+ */
+function matchesSortCallback(m1, m2)
+{
+	// sort matches by index first
+	if(m1.index < m2.index)
+		return -1;
+	else if(m1.index > m2.index)
+		return 1;
+	else
+	{
+		// if index is the same, sort by length
+		if(m1.length < m2.length)
+			return -1;
+		else if(m1.length > m2.length)
+			return 1;
+	}
+
+	return 0;
+};
+
+/**
+ * Executes given regular expression on provided code and returns all
+ * matches that are found.
+ *
+ * @param {String} code    Code to execute regular expression on.
+ * @param {Object} regex   Regular expression item info from <code>regexList</code> collection.
+ * @return {Array}         Returns a list of Match objects.
+ */
+function getMatches(code, regexInfo)
+{
+	function defaultAdd(match, regexInfo)
+	{
+		return match[0];
+	};
+
+	var index = 0,
+		match = null,
+		matches = [],
+		func = regexInfo.func ? regexInfo.func : defaultAdd
+		;
+
+	while((match = regexInfo.regex.exec(code)) != null)
+	{
+		var resultMatch = func(match, regexInfo);
+
+		if (typeof(resultMatch) == 'string')
+			resultMatch = [new sh.Match(resultMatch, match.index, regexInfo.css)];
+
+		matches = matches.concat(resultMatch);
+	}
+
+	return matches;
+};
+
+/**
+ * Turns all URLs in the code into <a/> tags.
+ * @param {String} code Input code.
+ * @return {String} Returns code with </a> tags.
+ */
+function processUrls(code)
+{
+	var gt = /(.*)((&gt;|&lt;).*)/;
+
+	return code.replace(sh.regexLib.url, function(m)
+	{
+		var suffix = '',
+			match = null
+			;
+
+		// We include &lt; and &gt; in the URL for the common cases like <http://google.com>
+		// The problem is that they get transformed into &lt;http://google.com&gt;
+		// Where as &gt; easily looks like part of the URL string.
+
+		if (match = gt.exec(m))
+		{
+			m = match[1];
+			suffix = match[2];
+		}
+
+		return '<a href="' + m + '">' + m + '</a>' + suffix;
+	});
+};
+
+/**
+ * Finds all <SCRIPT TYPE="syntaxhighlighter" /> elementss.
+ * @return {Array} Returns array of all found SyntaxHighlighter tags.
+ */
+function getSyntaxHighlighterScriptTags()
+{
+	var tags = document.getElementsByTagName('script'),
+		result = []
+		;
+
+	for (var i = 0; i < tags.length; i++)
+		if (tags[i].type == 'syntaxhighlighter')
+			result.push(tags[i]);
+
+	return result;
+};
+
+/**
+ * Strips <![CDATA[]]> from <SCRIPT /> content because it should be used
+ * there in most cases for XHTML compliance.
+ * @param {String} original	Input code.
+ * @return {String} Returns code without leading <![CDATA[]]> tags.
+ */
+function stripCData(original)
+{
+	var left = '<![CDATA[',
+		right = ']]>',
+		// for some reason IE inserts some leading blanks here
+		copy = trim(original),
+		changed = false,
+		leftLength = left.length,
+		rightLength = right.length
+		;
+
+	if (copy.indexOf(left) == 0)
+	{
+		copy = copy.substring(leftLength);
+		changed = true;
+	}
+
+	var copyLength = copy.length;
+
+	if (copy.indexOf(right) == copyLength - rightLength)
+	{
+		copy = copy.substring(0, copyLength - rightLength);
+		changed = true;
+	}
+
+	return changed ? copy : original;
+};
+
+
+/**
+ * Quick code mouse double click handler.
+ */
+function quickCodeHandler(e)
+{
+	var target = e.target,
+		highlighterDiv = findParentElement(target, '.syntaxhighlighter'),
+		container = findParentElement(target, '.container'),
+		textarea = document.createElement('textarea'),
+		highlighter
+		;
+
+	if (!container || !highlighterDiv || findElement(container, 'textarea'))
+		return;
+
+	highlighter = getHighlighterById(highlighterDiv.id);
+
+	// add source class name
+	addClass(highlighterDiv, 'source');
+
+	// Have to go over each line and grab it's text, can't just do it on the
+	// container because Firefox loses all \n where as Webkit doesn't.
+	var lines = container.childNodes,
+		code = []
+		;
+
+	for (var i = 0; i < lines.length; i++)
+		code.push(lines[i].innerText || lines[i].textContent);
+
+	// using \r instead of \r or \r\n makes this work equally well on IE, FF and Webkit
+	code = code.join('\r');
+
+	// inject <textarea/> tag
+	textarea.appendChild(document.createTextNode(code));
+	container.appendChild(textarea);
+
+	// preselect all text
+	textarea.focus();
+	textarea.select();
+
+	// set up handler for lost focus
+	attachEvent(textarea, 'blur', function(e)
+	{
+		textarea.parentNode.removeChild(textarea);
+		removeClass(highlighterDiv, 'source');
+	});
+};
+
+/**
+ * Match object.
+ */
+sh.Match = function(value, index, css)
+{
+	this.value = value;
+	this.index = index;
+	this.length = value.length;
+	this.css = css;
+	this.brushName = null;
+};
+
+sh.Match.prototype.toString = function()
+{
+	return this.value;
+};
+
+/**
+ * Simulates HTML code with a scripting language embedded.
+ *
+ * @param {String} scriptBrushName Brush name of the scripting language.
+ */
+sh.HtmlScript = function(scriptBrushName)
+{
+	var brushClass = findBrush(scriptBrushName),
+		scriptBrush,
+		xmlBrush = new sh.brushes.Xml(),
+		bracketsRegex = null,
+		ref = this,
+		methodsToExpose = 'getDiv getHtml init'.split(' ')
+		;
+
+	if (brushClass == null)
+		return;
+
+	scriptBrush = new brushClass();
+
+	for(var i = 0; i < methodsToExpose.length; i++)
+		// make a closure so we don't lose the name after i changes
+		(function() {
+			var name = methodsToExpose[i];
+
+			ref[name] = function()
+			{
+				return xmlBrush[name].apply(xmlBrush, arguments);
+			};
+		})();
+
+	if (scriptBrush.htmlScript == null)
+	{
+		alert(sh.config.strings.brushNotHtmlScript + scriptBrushName);
+		return;
+	}
+
+	xmlBrush.regexList.push(
+		{ regex: scriptBrush.htmlScript.code, func: process }
+	);
+
+	function offsetMatches(matches, offset)
+	{
+		for (var j = 0; j < matches.length; j++)
+			matches[j].index += offset;
+	}
+
+	function process(match, info)
+	{
+		var code = match.code,
+			matches = [],
+			regexList = scriptBrush.regexList,
+			offset = match.index + match.left.length,
+			htmlScript = scriptBrush.htmlScript,
+			result
+			;
+
+		// add all matches from the code
+		for (var i = 0; i < regexList.length; i++)
+		{
+			result = getMatches(code, regexList[i]);
+			offsetMatches(result, offset);
+			matches = matches.concat(result);
+		}
+
+		// add left script bracket
+		if (htmlScript.left != null && match.left != null)
+		{
+			result = getMatches(match.left, htmlScript.left);
+			offsetMatches(result, match.index);
+			matches = matches.concat(result);
+		}
+
+		// add right script bracket
+		if (htmlScript.right != null && match.right != null)
+		{
+			result = getMatches(match.right, htmlScript.right);
+			offsetMatches(result, match.index + match[0].lastIndexOf(match.right));
+			matches = matches.concat(result);
+		}
+
+		for (var j = 0; j < matches.length; j++)
+			matches[j].brushName = brushClass.brushName;
+
+		return matches;
+	}
+};
+
+/**
+ * Main Highlither class.
+ * @constructor
+ */
+sh.Highlighter = function()
+{
+	// not putting any code in here because of the prototype inheritance
+};
+
+sh.Highlighter.prototype = {
+	/**
+	 * Returns value of the parameter passed to the highlighter.
+	 * @param {String} name				Name of the parameter.
+	 * @param {Object} defaultValue		Default value.
+	 * @return {Object}					Returns found value or default value otherwise.
+	 */
+	getParam: function(name, defaultValue)
+	{
+		var result = this.params[name];
+		return toBoolean(result == null ? defaultValue : result);
+	},
+
+	/**
+	 * Shortcut to document.createElement().
+	 * @param {String} name		Name of the element to create (DIV, A, etc).
+	 * @return {HTMLElement}	Returns new HTML element.
+	 */
+	create: function(name)
+	{
+		return document.createElement(name);
+	},
+    /* Combines functionality of old findMatches(), getMatches() and removeNestedMatches()
+     * functions. Parse a string of code using an array of regular expressions.
+     *
+     * @param {Array} regexList     List of regular expressions.
+     * @param {String} code         Source code.
+     * @return {Array}              Returns list of matches.
+     */
+    findMatchesNew: function(regexList, code)                   // Rev:20110216_1700
+    {
+        var matches = [];                                       // Return value. Array of Match objects.
+        if (!regexList) return matches;                         // If regexlist is not defined, we're done.
+        var nregex = regexList.length;                          // Loop end value.
+        var pos = 0;                                            // Position within code string to begin regex search.
+        var re, minIndex, resultMatch, func, match;             // Some locals.
+        function defaultAdd(m, r) { return m[0]; };             // Dummy brush modify result function.
+        var nextMatch = true;                                   // Prime the pump.
+        while(nextMatch) {                                      // One regex match per loop. Advance pos through code.
+            nextMatch = null;                                   // Assume this will be the last time through.
+            minIndex = code.length + 1;                         // Reset min-match-index to impossibly large value.
+            for (var i = 0; i < nregex; i++) {                  // Loop though all regexes at this pos.
+                if (typeof(re = regexList[i]) === "object" && re.regex.global) { // Process only 'g'-flagged regexes.
+                    re.regex.lastIndex = pos;                   // Start search at same pos for each regex.
+                    if ((match = re.regex.exec(code)) !== null) {// Check if this regex matches anywhere?
+                        if (match.index === pos) {              // Yes. Check if matched on first char?
+                            nextMatch = {r: re, m: match};      // Yes. This is unconditionally our next match.
+                            break;                              // Exit "try-all-regexes" for loop.
+                        } // Otherwise we matched, but not on the first char. Need to run all regexes to find best.
+                        if (match.index < minIndex) {           // Check if we have a new best match?
+                            minIndex = match.index;             // Yes, set the bar a little lower.
+                            nextMatch = {r: re, m: match};      // Save needed items for Match object.
+                        }
+                    }
+                } // End if re is object.
+            } // End for loop.
+            if (nextMatch) {                                    // Check if one of the regexes matched?
+                func = nextMatch.r.func ? nextMatch.r.func : defaultAdd;
+                resultMatch = func(nextMatch.m, nextMatch.r);   // Allow brush option to customize result.
+                if (typeof(resultMatch) === 'string')           // Check if we need a new Match object?
+                    resultMatch = new sh.Match(resultMatch, nextMatch.m.index, nextMatch.r.css); // Yes.
+                matches.push(resultMatch);                      // Place this match on top of the stack.
+                pos = nextMatch.r.regex.lastIndex;              // Adjust pos forward to end of this match.
+            }
+        } // End while loop.
+        return matches;                                         // return array of regex matches
+    },
+
+	/**
+	 * Applies all regular expression to the code and stores all found
+	 * matches in the `this.matches` array.
+	 * @param {Array} regexList		List of regular expressions.
+	 * @param {String} code			Source code.
+	 * @return {Array}				Returns list of matches.
+	 */
+	findMatches: function(regexList, code)
+	{
+		var result = [];
+
+		if (regexList != null)
+			for (var i = 0; i < regexList.length; i++)
+				// BUG: length returns len+1 for array if methods added to prototype chain (oising@gmail.com)
+				if (typeof (regexList[i]) == "object")
+					result = result.concat(getMatches(code, regexList[i]));
+
+		// sort and remove nested the matches
+		return this.removeNestedMatches(result.sort(matchesSortCallback));
+	},
+
+	/**
+	 * Checks to see if any of the matches are inside of other matches.
+	 * This process would get rid of highligted strings inside comments,
+	 * keywords inside strings and so on.
+	 */
+	removeNestedMatches: function(matches)
+	{
+		// Optimized by Jose Prado (http://joseprado.com)
+		for (var i = 0; i < matches.length; i++)
+		{
+			if (matches[i] === null)
+				continue;
+
+			var itemI = matches[i],
+				itemIEndPos = itemI.index + itemI.length
+				;
+
+			for (var j = i + 1; j < matches.length && matches[i] !== null; j++)
+			{
+				var itemJ = matches[j];
+
+				if (itemJ === null)
+					continue;
+				else if (itemJ.index > itemIEndPos)
+					break;
+				else if (itemJ.index == itemI.index && itemJ.length > itemI.length)
+					matches[i] = null;
+				else if (itemJ.index >= itemI.index && itemJ.index < itemIEndPos)
+					matches[j] = null;
+			}
+		}
+
+		return matches;
+	},
+
+	/**
+	 * Creates an array containing integer line numbers starting from the 'first-line' param.
+	 * @return {Array} Returns array of integers.
+	 */
+	figureOutLineNumbers: function(code)
+	{
+		var lines = [],
+			firstLine = parseInt(this.getParam('first-line'))
+			;
+
+		eachLine(code, function(line, index)
+		{
+			lines.push(index + firstLine);
+		});
+
+		return lines;
+	},
+
+	/**
+	 * Determines if specified line number is in the highlighted list.
+	 */
+	isLineHighlighted: function(lineNumber)
+	{
+		var list = this.getParam('highlight', []);
+
+		if (typeof(list) != 'object' && list.push == null)
+			list = [ list ];
+
+		return indexOf(list, lineNumber.toString()) != -1;
+	},
+
+	/**
+	 * Generates HTML markup for a single line of code while determining alternating line style.
+	 * @param {Integer} lineNumber	Line number.
+	 * @param {String} code Line	HTML markup.
+	 * @return {String}				Returns HTML markup.
+	 */
+	getLineHtml: function(lineIndex, lineNumber, code)
+	{
+		var classes = [
+			'line',
+			'number' + lineNumber,
+			'index' + lineIndex,
+			'alt' + (lineNumber % 2 == 0 ? 1 : 2).toString()
+		];
+
+		if (this.isLineHighlighted(lineNumber))
+		 	classes.push('highlighted');
+
+		if (lineNumber == 0)
+			classes.push('break');
+
+		return '<div class="' + classes.join(' ') + '">' + code + '</div>';
+	},
+
+	/**
+	 * Generates HTML markup for line number column.
+	 * @param {String} code			Complete code HTML markup.
+	 * @param {Array} lineNumbers	Calculated line numbers.
+	 * @return {String}				Returns HTML markup.
+	 */
+	getLineNumbersHtml: function(code, lineNumbers)
+	{
+		var html = '',
+			count = splitLines(code).length,
+			firstLine = parseInt(this.getParam('first-line')),
+			pad = this.getParam('pad-line-numbers')
+			;
+
+		if (pad == true)
+			pad = (firstLine + count - 1).toString().length;
+		else if (isNaN(pad) == true)
+			pad = 0;
+
+		for (var i = 0; i < count; i++)
+		{
+			var lineNumber = lineNumbers ? lineNumbers[i] : firstLine + i,
+				code = lineNumber == 0 ? sh.config.space : padNumber(lineNumber, pad)
+				;
+
+			html += this.getLineHtml(i, lineNumber, code);
+		}
+
+		return html;
+	},
+
+	/**
+	 * Splits block of text into individual DIV lines.
+	 * @param {String} code			Code to highlight.
+	 * @param {Array} lineNumbers	Calculated line numbers.
+	 * @return {String}				Returns highlighted code in HTML form.
+	 */
+	getCodeLinesHtml: function(html, lineNumbers)
+	{
+		html = trim(html);
+
+		var lines = splitLines(html),
+			padLength = this.getParam('pad-line-numbers'),
+			firstLine = parseInt(this.getParam('first-line')),
+			html = '',
+			brushName = this.getParam('brush')
+			;
+
+		for (var i = 0; i < lines.length; i++)
+		{
+			var line = lines[i],
+				indent = /^(&nbsp;|\s)+/.exec(line),
+				spaces = null,
+				lineNumber = lineNumbers ? lineNumbers[i] : firstLine + i;
+				;
+
+			if (indent != null)
+			{
+				spaces = indent[0].toString();
+				line = line.substr(spaces.length);
+				spaces = spaces.replace(' ', sh.config.space);
+			}
+
+			line = trim(line);
+
+			if (line.length == 0)
+				line = sh.config.space;
+
+			html += this.getLineHtml(
+				i,
+				lineNumber,
+				(spaces != null ? '<code class="' + brushName + ' spaces">' + spaces + '</code>' : '') + line
+			);
+		}
+
+		return html;
+	},
+
+	/**
+	 * Returns HTML for the table title or empty string if title is null.
+	 */
+	getTitleHtml: function(title)
+	{
+		return title ? '<caption>' + title + '</caption>' : '';
+	},
+
+	/**
+	 * Finds all matches in the source code.
+	 * @param {String} code		Source code to process matches in.
+	 * @param {Array} matches	Discovered regex matches.
+	 * @return {String} Returns formatted HTML with processed mathes.
+	 */
+	getMatchesHtml: function(code, matches)
+	{
+		var pos = 0,
+			result = '',
+			brushName = this.getParam('brush', '')
+			;
+
+		function getBrushNameCss(match)
+		{
+			var result = match ? (match.brushName || brushName) : brushName;
+			return result ? result + ' ' : '';
+		};
+
+		// Finally, go through the final list of matches and pull the all
+		// together adding everything in between that isn't a match.
+		for (var i = 0; i < matches.length; i++)
+		{
+			var match = matches[i],
+				matchBrushName
+				;
+
+			if (match === null || match.length === 0)
+				continue;
+
+			matchBrushName = getBrushNameCss(match);
+
+			result += wrapLinesWithCode(code.substr(pos, match.index - pos), matchBrushName + 'plain')
+					+ wrapLinesWithCode(match.value, matchBrushName + match.css)
+					;
+
+			pos = match.index + match.length + (match.offset || 0);
+		}
+
+		// don't forget to add whatever's remaining in the string
+		result += wrapLinesWithCode(code.substr(pos), getBrushNameCss() + 'plain');
+
+		return result;
+	},
+
+	/**
+	 * Generates HTML markup for the whole syntax highlighter.
+	 * @param {String} code Source code.
+	 * @return {String} Returns HTML markup.
+	 */
+	getHtml: function(code)
+	{
+		var html = '',
+			classes = [ 'syntaxhighlighter' ],
+			tabSize,
+			matches,
+			lineNumbers
+			;
+
+		// process light mode
+		if (this.getParam('light') == true)
+			this.params.toolbar = this.params.gutter = false;
+
+		className = 'syntaxhighlighter';
+
+		if (this.getParam('collapse') == true)
+			classes.push('collapsed');
+
+		if ((gutter = this.getParam('gutter')) == false)
+			classes.push('nogutter');
+
+		// add custom user style name
+		classes.push(this.getParam('class-name'));
+
+		// add brush alias to the class name for custom CSS
+		classes.push(this.getParam('brush'));
+
+		code = trimFirstAndLastLines(code)
+			.replace(/\r/g, ' ') // IE lets these buggers through
+			;
+
+		tabSize = this.getParam('tab-size');
+
+		// replace tabs with spaces
+		code = this.getParam('smart-tabs') == true
+			? processSmartTabs(code, tabSize)
+			: processTabs(code, tabSize)
+			;
+
+		// unindent code by the common indentation
+		code = unindent(code);
+
+		if (gutter)
+			lineNumbers = this.figureOutLineNumbers(code);
+
+		// find matches in the code using brushes regex list
+		matches = this.findMatchesNew(this.regexList, code);
+		// processes found matches into the html
+		html = this.getMatchesHtml(code, matches);
+		// finally, split all lines so that they wrap well
+		html = this.getCodeLinesHtml(html, lineNumbers);
+
+		// finally, process the links
+		if (this.getParam('auto-links'))
+			html = processUrls(html);
+
+		if (typeof(navigator) != 'undefined' && navigator.userAgent && navigator.userAgent.match(/MSIE/))
+			classes.push('ie');
+
+		html =
+			'<div id="' + getHighlighterId(this.id) + '" class="' + classes.join(' ') + '">'
+				+ (this.getParam('toolbar') ? sh.toolbar.getHtml(this) : '')
+				+ '<table border="0" cellpadding="0" cellspacing="0">'
+					+ this.getTitleHtml(this.getParam('title'))
+					+ '<tbody>'
+						+ '<tr>'
+							+ (gutter ? '<td class="gutter">' + this.getLineNumbersHtml(code) + '</td>' : '')
+							+ '<td class="code">'
+								+ '<div class="container">'
+									+ html
+								+ '</div>'
+							+ '</td>'
+						+ '</tr>'
+					+ '</tbody>'
+				+ '</table>'
+			+ '</div>'
+			;
+
+		return html;
+	},
+
+	/**
+	 * Highlights the code and returns complete HTML.
+	 * @param {String} code     Code to highlight.
+	 * @return {Element}        Returns container DIV element with all markup.
+	 */
+	getDiv: function(code)
+	{
+		if (code === null)
+			code = '';
+
+		this.code = code;
+
+		var div = this.create('div');
+
+		// create main HTML
+		div.innerHTML = this.getHtml(code);
+
+		// set up click handlers
+		if (this.getParam('toolbar'))
+			attachEvent(findElement(div, '.toolbar'), 'click', sh.toolbar.handler);
+
+		if (this.getParam('quick-code'))
+			attachEvent(findElement(div, '.code'), 'dblclick', quickCodeHandler);
+
+		return div;
+	},
+
+	/**
+	 * Initializes the highlighter/brush.
+	 *
+	 * Constructor isn't used for initialization so that nothing executes during necessary
+	 * `new SyntaxHighlighter.Highlighter()` call when setting up brush inheritence.
+	 *
+	 * @param {Hash} params Highlighter parameters.
+	 */
+	init: function(params)
+	{
+		this.id = guid();
+
+		// register this instance in the highlighters list
+		storeHighlighter(this);
+
+		// local params take precedence over defaults
+		this.params = merge(sh.defaults, params || {})
+
+		// process light mode
+		if (this.getParam('light') == true)
+			this.params.toolbar = this.params.gutter = false;
+	},
+
+	/**
+	 * Converts space separated list of keywords into a regular expression string.
+	 * @param {String} str    Space separated keywords.
+	 * @return {String}       Returns regular expression string.
+	 */
+	getKeywords: function(str)
+	{
+		str = str
+			.replace(/^\s+|\s+$/g, '')
+			.replace(/\s+/g, '|')
+			;
+
+		return '\\b(?:' + str + ')\\b';
+	},
+
+	/**
+	 * Makes a brush compatible with the `html-script` functionality.
+	 * @param {Object} regexGroup Object containing `left` and `right` regular expressions.
+	 */
+	forHtmlScript: function(regexGroup)
+	{
+		this.htmlScript = {
+//			left : { regex: regexGroup.left, css: 'script' },
+//			right : { regex: regexGroup.right, css: 'script' },
+//			code : new XRegExp(
+//				"(?<left>" + regexGroup.left.source + ")" +
+//				"(?<code>.*?)" +
+//				"(?<right>" + regexGroup.right.source + ")",
+//				"sgi"
+//				)
+		};
+	}
+}; // end of Highlighter
+
+return sh;
+}(); // end of anonymous function
+
+// CommonJS
+typeof(exports) != 'undefined' ? exports['SyntaxHighlighter'] = SyntaxHighlighter : null;
+
+// Added by FluxBB: Set default options and call SyntaxHighlighter.all();
+SyntaxHighlighter.defaults['auto-links'] = false;
+SyntaxHighlighter.defaults['gutter'] = false;
+SyntaxHighlighter.defaults['toolbar'] = false;
+SyntaxHighlighter.all();
diff --git a/bin/shCoreDefault.css b/bin/shCoreDefault.css
new file mode 100644
index 0000000..1d4f897
--- /dev/null
+++ b/bin/shCoreDefault.css
@@ -0,0 +1,331 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter a,
+.syntaxhighlighter div,
+.syntaxhighlighter code,
+.syntaxhighlighter table,
+.syntaxhighlighter table td,
+.syntaxhighlighter table tr,
+.syntaxhighlighter table tbody,
+.syntaxhighlighter table thead,
+.syntaxhighlighter table caption,
+.syntaxhighlighter textarea {
+  -moz-border-radius: 0 0 0 0 !important;
+  -webkit-border-radius: 0 0 0 0 !important;
+  background: none !important;
+  border: 0 !important;
+  bottom: auto !important;
+  float: none !important;
+  height: auto !important;
+  left: auto !important;
+  line-height: 1.1em !important;
+  margin: 0 !important;
+  outline: 0 !important;
+  overflow: visible !important;
+  padding: 0 !important;
+  position: static !important;
+  right: auto !important;
+  text-align: left !important;
+  top: auto !important;
+  vertical-align: baseline !important;
+  width: auto !important;
+  box-sizing: content-box !important;
+  font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace !important;
+  font-weight: normal !important;
+  font-style: normal !important;
+  font-size: 1em !important;
+  min-height: inherit !important;
+  min-height: auto !important;
+}
+
+.syntaxhighlighter {
+  width: 100% !important;
+  margin: 1em 0 1em 0 !important;
+  position: relative !important;
+  overflow: auto !important;
+  font-size: 1em !important;
+}
+.syntaxhighlighter.source {
+  overflow: hidden !important;
+}
+.syntaxhighlighter .bold {
+  font-weight: bold !important;
+}
+.syntaxhighlighter .italic {
+  font-style: italic !important;
+}
+.syntaxhighlighter .line {
+  white-space: pre !important;
+}
+.syntaxhighlighter table {
+  width: 100% !important;
+}
+.syntaxhighlighter table caption {
+  text-align: left !important;
+  padding: .5em 0 0.5em 1em !important;
+}
+.syntaxhighlighter table td.code {
+  width: 100% !important;
+}
+.syntaxhighlighter table td.code .container {
+  position: relative !important;
+}
+.syntaxhighlighter table td.code .container textarea {
+  box-sizing: border-box !important;
+  position: absolute !important;
+  left: 0 !important;
+  top: 0 !important;
+  width: 100% !important;
+  height: 100% !important;
+  border: none !important;
+  background: white !important;
+  padding-left: 1em !important;
+  overflow: hidden !important;
+  white-space: pre !important;
+}
+.syntaxhighlighter table td.gutter .line {
+  text-align: right !important;
+  padding: 0 0.5em 0 1em !important;
+}
+.syntaxhighlighter table td.code .line {
+  padding: 0 1em !important;
+}
+.syntaxhighlighter.nogutter td.code .container textarea, .syntaxhighlighter.nogutter td.code .line {
+  padding-left: 0em !important;
+}
+.syntaxhighlighter.show {
+  display: block !important;
+}
+.syntaxhighlighter.collapsed table {
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  padding: 0.1em 0.8em 0em 0.8em !important;
+  font-size: 1em !important;
+  position: static !important;
+  width: auto !important;
+  height: auto !important;
+}
+.syntaxhighlighter.collapsed .toolbar span {
+  display: inline !important;
+  margin-right: 1em !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a {
+  padding: 0 !important;
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a.expandSource {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar {
+  position: absolute !important;
+  right: 1px !important;
+  top: 1px !important;
+  width: 11px !important;
+  height: 11px !important;
+  font-size: 10px !important;
+  z-index: 10 !important;
+}
+.syntaxhighlighter .toolbar span.title {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar a {
+  display: block !important;
+  text-align: center !important;
+  text-decoration: none !important;
+  padding-top: 1px !important;
+}
+.syntaxhighlighter .toolbar a.expandSource {
+  display: none !important;
+}
+.syntaxhighlighter.ie {
+  font-size: .9em !important;
+  padding: 1px 0 1px 0 !important;
+}
+.syntaxhighlighter.ie .toolbar {
+  line-height: 8px !important;
+}
+.syntaxhighlighter.ie .toolbar a {
+  padding-top: 0px !important;
+}
+.syntaxhighlighter.printing .line.alt1 .content,
+.syntaxhighlighter.printing .line.alt2 .content,
+.syntaxhighlighter.printing .line.highlighted .number,
+.syntaxhighlighter.printing .line.highlighted.alt1 .content,
+.syntaxhighlighter.printing .line.highlighted.alt2 .content {
+  background: none !important;
+}
+.syntaxhighlighter.printing .line .number {
+  color: #bbbbbb !important;
+}
+.syntaxhighlighter.printing .line .content {
+  color: black !important;
+}
+.syntaxhighlighter.printing .toolbar {
+  display: none !important;
+}
+.syntaxhighlighter.printing a {
+  text-decoration: none !important;
+}
+.syntaxhighlighter.printing .plain, .syntaxhighlighter.printing .plain a {
+  color: black !important;
+}
+.syntaxhighlighter.printing .comments, .syntaxhighlighter.printing .comments a {
+  color: #008200 !important;
+}
+.syntaxhighlighter.printing .string, .syntaxhighlighter.printing .string a {
+  color: blue !important;
+}
+.syntaxhighlighter.printing .keyword {
+  color: #006699 !important;
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .preprocessor {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter.printing .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter.printing .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter.printing .script {
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .color1, .syntaxhighlighter.printing .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .color2, .syntaxhighlighter.printing .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .color3, .syntaxhighlighter.printing .color3 a {
+  color: red !important;
+}
+.syntaxhighlighter.printing .break, .syntaxhighlighter.printing .break a {
+  color: black !important;
+}
+
+.syntaxhighlighter {
+  background-color: #2a2a2a !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: #2a2a2a !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: #2a2a2a !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #233729 !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: white !important;
+}
+.syntaxhighlighter table caption {
+  color: #f8f8f8 !important;
+}
+.syntaxhighlighter .gutter {
+  color: #497958 !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #41a83e !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #41a83e !important;
+  color: #0a2b1d !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #96dd3b !important;
+  background: black !important;
+  border: 1px solid #41a83e !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #96dd3b !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar {
+  color: white !important;
+  background: #41a83e !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: #ffe862 !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: #f8f8f8 !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #336442 !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: #9df39f !important;
+}
+.syntaxhighlighter .keyword {
+  color: #96dd3b !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #91bb9e !important;
+}
+.syntaxhighlighter .variable {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .value {
+  color: #f7e741 !important;
+}
+.syntaxhighlighter .functions {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .constants {
+  color: #e0e8ff !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #96dd3b !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: #eb939a !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: #91bb9e !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: #edef7d !important;
+}
+
+.syntaxhighlighter .comments {
+  font-style: italic !important;
+}
+.syntaxhighlighter .keyword {
+  font-weight: bold !important;
+}
diff --git a/bin/shCoreDefault_orig.css b/bin/shCoreDefault_orig.css
new file mode 100644
index 0000000..08f9e10
--- /dev/null
+++ b/bin/shCoreDefault_orig.css
@@ -0,0 +1,328 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter a,
+.syntaxhighlighter div,
+.syntaxhighlighter code,
+.syntaxhighlighter table,
+.syntaxhighlighter table td,
+.syntaxhighlighter table tr,
+.syntaxhighlighter table tbody,
+.syntaxhighlighter table thead,
+.syntaxhighlighter table caption,
+.syntaxhighlighter textarea {
+  -moz-border-radius: 0 0 0 0 !important;
+  -webkit-border-radius: 0 0 0 0 !important;
+  background: none !important;
+  border: 0 !important;
+  bottom: auto !important;
+  float: none !important;
+  height: auto !important;
+  left: auto !important;
+  line-height: 1.1em !important;
+  margin: 0 !important;
+  outline: 0 !important;
+  overflow: visible !important;
+  padding: 0 !important;
+  position: static !important;
+  right: auto !important;
+  text-align: left !important;
+  top: auto !important;
+  vertical-align: baseline !important;
+  width: auto !important;
+  box-sizing: content-box !important;
+  font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace !important;
+  font-weight: normal !important;
+  font-style: normal !important;
+  font-size: 1em !important;
+  min-height: inherit !important;
+  min-height: auto !important;
+}
+
+.syntaxhighlighter {
+  width: 100% !important;
+  margin: 1em 0 1em 0 !important;
+  position: relative !important;
+  overflow: auto !important;
+  font-size: 1em !important;
+}
+.syntaxhighlighter.source {
+  overflow: hidden !important;
+}
+.syntaxhighlighter .bold {
+  font-weight: bold !important;
+}
+.syntaxhighlighter .italic {
+  font-style: italic !important;
+}
+.syntaxhighlighter .line {
+  white-space: pre !important;
+}
+.syntaxhighlighter table {
+  width: 100% !important;
+}
+.syntaxhighlighter table caption {
+  text-align: left !important;
+  padding: .5em 0 0.5em 1em !important;
+}
+.syntaxhighlighter table td.code {
+  width: 100% !important;
+}
+.syntaxhighlighter table td.code .container {
+  position: relative !important;
+}
+.syntaxhighlighter table td.code .container textarea {
+  box-sizing: border-box !important;
+  position: absolute !important;
+  left: 0 !important;
+  top: 0 !important;
+  width: 100% !important;
+  height: 100% !important;
+  border: none !important;
+  background: white !important;
+  padding-left: 1em !important;
+  overflow: hidden !important;
+  white-space: pre !important;
+}
+.syntaxhighlighter table td.gutter .line {
+  text-align: right !important;
+  padding: 0 0.5em 0 1em !important;
+}
+.syntaxhighlighter table td.code .line {
+  padding: 0 1em !important;
+}
+.syntaxhighlighter.nogutter td.code .container textarea, .syntaxhighlighter.nogutter td.code .line {
+  padding-left: 0em !important;
+}
+.syntaxhighlighter.show {
+  display: block !important;
+}
+.syntaxhighlighter.collapsed table {
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  padding: 0.1em 0.8em 0em 0.8em !important;
+  font-size: 1em !important;
+  position: static !important;
+  width: auto !important;
+  height: auto !important;
+}
+.syntaxhighlighter.collapsed .toolbar span {
+  display: inline !important;
+  margin-right: 1em !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a {
+  padding: 0 !important;
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a.expandSource {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar {
+  position: absolute !important;
+  right: 1px !important;
+  top: 1px !important;
+  width: 11px !important;
+  height: 11px !important;
+  font-size: 10px !important;
+  z-index: 10 !important;
+}
+.syntaxhighlighter .toolbar span.title {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar a {
+  display: block !important;
+  text-align: center !important;
+  text-decoration: none !important;
+  padding-top: 1px !important;
+}
+.syntaxhighlighter .toolbar a.expandSource {
+  display: none !important;
+}
+.syntaxhighlighter.ie {
+  font-size: .9em !important;
+  padding: 1px 0 1px 0 !important;
+}
+.syntaxhighlighter.ie .toolbar {
+  line-height: 8px !important;
+}
+.syntaxhighlighter.ie .toolbar a {
+  padding-top: 0px !important;
+}
+.syntaxhighlighter.printing .line.alt1 .content,
+.syntaxhighlighter.printing .line.alt2 .content,
+.syntaxhighlighter.printing .line.highlighted .number,
+.syntaxhighlighter.printing .line.highlighted.alt1 .content,
+.syntaxhighlighter.printing .line.highlighted.alt2 .content {
+  background: none !important;
+}
+.syntaxhighlighter.printing .line .number {
+  color: #bbbbbb !important;
+}
+.syntaxhighlighter.printing .line .content {
+  color: black !important;
+}
+.syntaxhighlighter.printing .toolbar {
+  display: none !important;
+}
+.syntaxhighlighter.printing a {
+  text-decoration: none !important;
+}
+.syntaxhighlighter.printing .plain, .syntaxhighlighter.printing .plain a {
+  color: black !important;
+}
+.syntaxhighlighter.printing .comments, .syntaxhighlighter.printing .comments a {
+  color: #008200 !important;
+}
+.syntaxhighlighter.printing .string, .syntaxhighlighter.printing .string a {
+  color: blue !important;
+}
+.syntaxhighlighter.printing .keyword {
+  color: #006699 !important;
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .preprocessor {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter.printing .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter.printing .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter.printing .script {
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .color1, .syntaxhighlighter.printing .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .color2, .syntaxhighlighter.printing .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .color3, .syntaxhighlighter.printing .color3 a {
+  color: red !important;
+}
+.syntaxhighlighter.printing .break, .syntaxhighlighter.printing .break a {
+  color: black !important;
+}
+
+.syntaxhighlighter {
+  background-color: white !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: white !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: white !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #e0e0e0 !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: black !important;
+}
+.syntaxhighlighter table caption {
+  color: black !important;
+}
+.syntaxhighlighter .gutter {
+  color: #afafaf !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #6ce26c !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #6ce26c !important;
+  color: white !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: blue !important;
+  background: white !important;
+  border: 1px solid #6ce26c !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: blue !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: red !important;
+}
+.syntaxhighlighter .toolbar {
+  color: white !important;
+  background: #6ce26c !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: black !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: black !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #008200 !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: blue !important;
+}
+.syntaxhighlighter .keyword {
+  color: #006699 !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: gray !important;
+}
+.syntaxhighlighter .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #006699 !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: red !important;
+}
+
+.syntaxhighlighter .keyword {
+  font-weight: bold !important;
+}
diff --git a/bin/shCoreDjango.css b/bin/shCoreDjango.css
new file mode 100644
index 0000000..1db1f70
--- /dev/null
+++ b/bin/shCoreDjango.css
@@ -0,0 +1,331 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter a,
+.syntaxhighlighter div,
+.syntaxhighlighter code,
+.syntaxhighlighter table,
+.syntaxhighlighter table td,
+.syntaxhighlighter table tr,
+.syntaxhighlighter table tbody,
+.syntaxhighlighter table thead,
+.syntaxhighlighter table caption,
+.syntaxhighlighter textarea {
+  -moz-border-radius: 0 0 0 0 !important;
+  -webkit-border-radius: 0 0 0 0 !important;
+  background: none !important;
+  border: 0 !important;
+  bottom: auto !important;
+  float: none !important;
+  height: auto !important;
+  left: auto !important;
+  line-height: 1.1em !important;
+  margin: 0 !important;
+  outline: 0 !important;
+  overflow: visible !important;
+  padding: 0 !important;
+  position: static !important;
+  right: auto !important;
+  text-align: left !important;
+  top: auto !important;
+  vertical-align: baseline !important;
+  width: auto !important;
+  box-sizing: content-box !important;
+  font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace !important;
+  font-weight: normal !important;
+  font-style: normal !important;
+  font-size: 1em !important;
+  min-height: inherit !important;
+  min-height: auto !important;
+}
+
+.syntaxhighlighter {
+  width: 100% !important;
+  margin: 1em 0 1em 0 !important;
+  position: relative !important;
+  overflow: auto !important;
+  font-size: 1em !important;
+}
+.syntaxhighlighter.source {
+  overflow: hidden !important;
+}
+.syntaxhighlighter .bold {
+  font-weight: bold !important;
+}
+.syntaxhighlighter .italic {
+  font-style: italic !important;
+}
+.syntaxhighlighter .line {
+  white-space: pre !important;
+}
+.syntaxhighlighter table {
+  width: 100% !important;
+}
+.syntaxhighlighter table caption {
+  text-align: left !important;
+  padding: .5em 0 0.5em 1em !important;
+}
+.syntaxhighlighter table td.code {
+  width: 100% !important;
+}
+.syntaxhighlighter table td.code .container {
+  position: relative !important;
+}
+.syntaxhighlighter table td.code .container textarea {
+  box-sizing: border-box !important;
+  position: absolute !important;
+  left: 0 !important;
+  top: 0 !important;
+  width: 100% !important;
+  height: 100% !important;
+  border: none !important;
+  background: white !important;
+  padding-left: 1em !important;
+  overflow: hidden !important;
+  white-space: pre !important;
+}
+.syntaxhighlighter table td.gutter .line {
+  text-align: right !important;
+  padding: 0 0.5em 0 1em !important;
+}
+.syntaxhighlighter table td.code .line {
+  padding: 0 1em !important;
+}
+.syntaxhighlighter.nogutter td.code .container textarea, .syntaxhighlighter.nogutter td.code .line {
+  padding-left: 0em !important;
+}
+.syntaxhighlighter.show {
+  display: block !important;
+}
+.syntaxhighlighter.collapsed table {
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  padding: 0.1em 0.8em 0em 0.8em !important;
+  font-size: 1em !important;
+  position: static !important;
+  width: auto !important;
+  height: auto !important;
+}
+.syntaxhighlighter.collapsed .toolbar span {
+  display: inline !important;
+  margin-right: 1em !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a {
+  padding: 0 !important;
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a.expandSource {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar {
+  position: absolute !important;
+  right: 1px !important;
+  top: 1px !important;
+  width: 11px !important;
+  height: 11px !important;
+  font-size: 10px !important;
+  z-index: 10 !important;
+}
+.syntaxhighlighter .toolbar span.title {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar a {
+  display: block !important;
+  text-align: center !important;
+  text-decoration: none !important;
+  padding-top: 1px !important;
+}
+.syntaxhighlighter .toolbar a.expandSource {
+  display: none !important;
+}
+.syntaxhighlighter.ie {
+  font-size: .9em !important;
+  padding: 1px 0 1px 0 !important;
+}
+.syntaxhighlighter.ie .toolbar {
+  line-height: 8px !important;
+}
+.syntaxhighlighter.ie .toolbar a {
+  padding-top: 0px !important;
+}
+.syntaxhighlighter.printing .line.alt1 .content,
+.syntaxhighlighter.printing .line.alt2 .content,
+.syntaxhighlighter.printing .line.highlighted .number,
+.syntaxhighlighter.printing .line.highlighted.alt1 .content,
+.syntaxhighlighter.printing .line.highlighted.alt2 .content {
+  background: none !important;
+}
+.syntaxhighlighter.printing .line .number {
+  color: #bbbbbb !important;
+}
+.syntaxhighlighter.printing .line .content {
+  color: black !important;
+}
+.syntaxhighlighter.printing .toolbar {
+  display: none !important;
+}
+.syntaxhighlighter.printing a {
+  text-decoration: none !important;
+}
+.syntaxhighlighter.printing .plain, .syntaxhighlighter.printing .plain a {
+  color: black !important;
+}
+.syntaxhighlighter.printing .comments, .syntaxhighlighter.printing .comments a {
+  color: #008200 !important;
+}
+.syntaxhighlighter.printing .string, .syntaxhighlighter.printing .string a {
+  color: blue !important;
+}
+.syntaxhighlighter.printing .keyword {
+  color: #006699 !important;
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .preprocessor {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter.printing .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter.printing .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter.printing .script {
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .color1, .syntaxhighlighter.printing .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .color2, .syntaxhighlighter.printing .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .color3, .syntaxhighlighter.printing .color3 a {
+  color: red !important;
+}
+.syntaxhighlighter.printing .break, .syntaxhighlighter.printing .break a {
+  color: black !important;
+}
+
+.syntaxhighlighter {
+  background-color: #0a2b1d !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: #0a2b1d !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: #0a2b1d !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #233729 !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: white !important;
+}
+.syntaxhighlighter table caption {
+  color: #f8f8f8 !important;
+}
+.syntaxhighlighter .gutter {
+  color: #497958 !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #41a83e !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #41a83e !important;
+  color: #0a2b1d !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #96dd3b !important;
+  background: black !important;
+  border: 1px solid #41a83e !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #96dd3b !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar {
+  color: white !important;
+  background: #41a83e !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: #ffe862 !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: #f8f8f8 !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #336442 !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: #9df39f !important;
+}
+.syntaxhighlighter .keyword {
+  color: #96dd3b !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #91bb9e !important;
+}
+.syntaxhighlighter .variable {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .value {
+  color: #f7e741 !important;
+}
+.syntaxhighlighter .functions {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .constants {
+  color: #e0e8ff !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #96dd3b !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: #eb939a !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: #91bb9e !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: #edef7d !important;
+}
+
+.syntaxhighlighter .comments {
+  font-style: italic !important;
+}
+.syntaxhighlighter .keyword {
+  font-weight: bold !important;
+}
diff --git a/bin/shCoreEclipse.css b/bin/shCoreEclipse.css
new file mode 100644
index 0000000..a45de9f
--- /dev/null
+++ b/bin/shCoreEclipse.css
@@ -0,0 +1,339 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter a,
+.syntaxhighlighter div,
+.syntaxhighlighter code,
+.syntaxhighlighter table,
+.syntaxhighlighter table td,
+.syntaxhighlighter table tr,
+.syntaxhighlighter table tbody,
+.syntaxhighlighter table thead,
+.syntaxhighlighter table caption,
+.syntaxhighlighter textarea {
+  -moz-border-radius: 0 0 0 0 !important;
+  -webkit-border-radius: 0 0 0 0 !important;
+  background: none !important;
+  border: 0 !important;
+  bottom: auto !important;
+  float: none !important;
+  height: auto !important;
+  left: auto !important;
+  line-height: 1.1em !important;
+  margin: 0 !important;
+  outline: 0 !important;
+  overflow: visible !important;
+  padding: 0 !important;
+  position: static !important;
+  right: auto !important;
+  text-align: left !important;
+  top: auto !important;
+  vertical-align: baseline !important;
+  width: auto !important;
+  box-sizing: content-box !important;
+  font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace !important;
+  font-weight: normal !important;
+  font-style: normal !important;
+  font-size: 1em !important;
+  min-height: inherit !important;
+  min-height: auto !important;
+}
+
+.syntaxhighlighter {
+  width: 100% !important;
+  margin: 1em 0 1em 0 !important;
+  position: relative !important;
+  overflow: auto !important;
+  font-size: 1em !important;
+}
+.syntaxhighlighter.source {
+  overflow: hidden !important;
+}
+.syntaxhighlighter .bold {
+  font-weight: bold !important;
+}
+.syntaxhighlighter .italic {
+  font-style: italic !important;
+}
+.syntaxhighlighter .line {
+  white-space: pre !important;
+}
+.syntaxhighlighter table {
+  width: 100% !important;
+}
+.syntaxhighlighter table caption {
+  text-align: left !important;
+  padding: .5em 0 0.5em 1em !important;
+}
+.syntaxhighlighter table td.code {
+  width: 100% !important;
+}
+.syntaxhighlighter table td.code .container {
+  position: relative !important;
+}
+.syntaxhighlighter table td.code .container textarea {
+  box-sizing: border-box !important;
+  position: absolute !important;
+  left: 0 !important;
+  top: 0 !important;
+  width: 100% !important;
+  height: 100% !important;
+  border: none !important;
+  background: white !important;
+  padding-left: 1em !important;
+  overflow: hidden !important;
+  white-space: pre !important;
+}
+.syntaxhighlighter table td.gutter .line {
+  text-align: right !important;
+  padding: 0 0.5em 0 1em !important;
+}
+.syntaxhighlighter table td.code .line {
+  padding: 0 1em !important;
+}
+.syntaxhighlighter.nogutter td.code .container textarea, .syntaxhighlighter.nogutter td.code .line {
+  padding-left: 0em !important;
+}
+.syntaxhighlighter.show {
+  display: block !important;
+}
+.syntaxhighlighter.collapsed table {
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  padding: 0.1em 0.8em 0em 0.8em !important;
+  font-size: 1em !important;
+  position: static !important;
+  width: auto !important;
+  height: auto !important;
+}
+.syntaxhighlighter.collapsed .toolbar span {
+  display: inline !important;
+  margin-right: 1em !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a {
+  padding: 0 !important;
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a.expandSource {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar {
+  position: absolute !important;
+  right: 1px !important;
+  top: 1px !important;
+  width: 11px !important;
+  height: 11px !important;
+  font-size: 10px !important;
+  z-index: 10 !important;
+}
+.syntaxhighlighter .toolbar span.title {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar a {
+  display: block !important;
+  text-align: center !important;
+  text-decoration: none !important;
+  padding-top: 1px !important;
+}
+.syntaxhighlighter .toolbar a.expandSource {
+  display: none !important;
+}
+.syntaxhighlighter.ie {
+  font-size: .9em !important;
+  padding: 1px 0 1px 0 !important;
+}
+.syntaxhighlighter.ie .toolbar {
+  line-height: 8px !important;
+}
+.syntaxhighlighter.ie .toolbar a {
+  padding-top: 0px !important;
+}
+.syntaxhighlighter.printing .line.alt1 .content,
+.syntaxhighlighter.printing .line.alt2 .content,
+.syntaxhighlighter.printing .line.highlighted .number,
+.syntaxhighlighter.printing .line.highlighted.alt1 .content,
+.syntaxhighlighter.printing .line.highlighted.alt2 .content {
+  background: none !important;
+}
+.syntaxhighlighter.printing .line .number {
+  color: #bbbbbb !important;
+}
+.syntaxhighlighter.printing .line .content {
+  color: black !important;
+}
+.syntaxhighlighter.printing .toolbar {
+  display: none !important;
+}
+.syntaxhighlighter.printing a {
+  text-decoration: none !important;
+}
+.syntaxhighlighter.printing .plain, .syntaxhighlighter.printing .plain a {
+  color: black !important;
+}
+.syntaxhighlighter.printing .comments, .syntaxhighlighter.printing .comments a {
+  color: #008200 !important;
+}
+.syntaxhighlighter.printing .string, .syntaxhighlighter.printing .string a {
+  color: blue !important;
+}
+.syntaxhighlighter.printing .keyword {
+  color: #006699 !important;
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .preprocessor {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter.printing .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter.printing .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter.printing .script {
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .color1, .syntaxhighlighter.printing .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .color2, .syntaxhighlighter.printing .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .color3, .syntaxhighlighter.printing .color3 a {
+  color: red !important;
+}
+.syntaxhighlighter.printing .break, .syntaxhighlighter.printing .break a {
+  color: black !important;
+}
+
+.syntaxhighlighter {
+  background-color: white !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: white !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: white !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #c3defe !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: white !important;
+}
+.syntaxhighlighter table caption {
+  color: black !important;
+}
+.syntaxhighlighter .gutter {
+  color: #787878 !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #d4d0c8 !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #d4d0c8 !important;
+  color: white !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #3f5fbf !important;
+  background: white !important;
+  border: 1px solid #d4d0c8 !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #3f5fbf !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter .toolbar {
+  color: #a0a0a0 !important;
+  background: #d4d0c8 !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: #a0a0a0 !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: red !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: black !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #3f5fbf !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: #2a00ff !important;
+}
+.syntaxhighlighter .keyword {
+  color: #7f0055 !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #646464 !important;
+}
+.syntaxhighlighter .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #7f0055 !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: red !important;
+}
+
+.syntaxhighlighter .keyword {
+  font-weight: bold !important;
+}
+.syntaxhighlighter .xml .keyword {
+  color: #3f7f7f !important;
+  font-weight: normal !important;
+}
+.syntaxhighlighter .xml .color1, .syntaxhighlighter .xml .color1 a {
+  color: #7f007f !important;
+}
+.syntaxhighlighter .xml .string {
+  font-style: italic !important;
+  color: #2a00ff !important;
+}
diff --git a/bin/shCoreEmacs.css b/bin/shCoreEmacs.css
new file mode 100644
index 0000000..706c77a
--- /dev/null
+++ b/bin/shCoreEmacs.css
@@ -0,0 +1,324 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter a,
+.syntaxhighlighter div,
+.syntaxhighlighter code,
+.syntaxhighlighter table,
+.syntaxhighlighter table td,
+.syntaxhighlighter table tr,
+.syntaxhighlighter table tbody,
+.syntaxhighlighter table thead,
+.syntaxhighlighter table caption,
+.syntaxhighlighter textarea {
+  -moz-border-radius: 0 0 0 0 !important;
+  -webkit-border-radius: 0 0 0 0 !important;
+  background: none !important;
+  border: 0 !important;
+  bottom: auto !important;
+  float: none !important;
+  height: auto !important;
+  left: auto !important;
+  line-height: 1.1em !important;
+  margin: 0 !important;
+  outline: 0 !important;
+  overflow: visible !important;
+  padding: 0 !important;
+  position: static !important;
+  right: auto !important;
+  text-align: left !important;
+  top: auto !important;
+  vertical-align: baseline !important;
+  width: auto !important;
+  box-sizing: content-box !important;
+  font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace !important;
+  font-weight: normal !important;
+  font-style: normal !important;
+  font-size: 1em !important;
+  min-height: inherit !important;
+  min-height: auto !important;
+}
+
+.syntaxhighlighter {
+  width: 100% !important;
+  margin: 1em 0 1em 0 !important;
+  position: relative !important;
+  overflow: auto !important;
+  font-size: 1em !important;
+}
+.syntaxhighlighter.source {
+  overflow: hidden !important;
+}
+.syntaxhighlighter .bold {
+  font-weight: bold !important;
+}
+.syntaxhighlighter .italic {
+  font-style: italic !important;
+}
+.syntaxhighlighter .line {
+  white-space: pre !important;
+}
+.syntaxhighlighter table {
+  width: 100% !important;
+}
+.syntaxhighlighter table caption {
+  text-align: left !important;
+  padding: .5em 0 0.5em 1em !important;
+}
+.syntaxhighlighter table td.code {
+  width: 100% !important;
+}
+.syntaxhighlighter table td.code .container {
+  position: relative !important;
+}
+.syntaxhighlighter table td.code .container textarea {
+  box-sizing: border-box !important;
+  position: absolute !important;
+  left: 0 !important;
+  top: 0 !important;
+  width: 100% !important;
+  height: 100% !important;
+  border: none !important;
+  background: white !important;
+  padding-left: 1em !important;
+  overflow: hidden !important;
+  white-space: pre !important;
+}
+.syntaxhighlighter table td.gutter .line {
+  text-align: right !important;
+  padding: 0 0.5em 0 1em !important;
+}
+.syntaxhighlighter table td.code .line {
+  padding: 0 1em !important;
+}
+.syntaxhighlighter.nogutter td.code .container textarea, .syntaxhighlighter.nogutter td.code .line {
+  padding-left: 0em !important;
+}
+.syntaxhighlighter.show {
+  display: block !important;
+}
+.syntaxhighlighter.collapsed table {
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  padding: 0.1em 0.8em 0em 0.8em !important;
+  font-size: 1em !important;
+  position: static !important;
+  width: auto !important;
+  height: auto !important;
+}
+.syntaxhighlighter.collapsed .toolbar span {
+  display: inline !important;
+  margin-right: 1em !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a {
+  padding: 0 !important;
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a.expandSource {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar {
+  position: absolute !important;
+  right: 1px !important;
+  top: 1px !important;
+  width: 11px !important;
+  height: 11px !important;
+  font-size: 10px !important;
+  z-index: 10 !important;
+}
+.syntaxhighlighter .toolbar span.title {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar a {
+  display: block !important;
+  text-align: center !important;
+  text-decoration: none !important;
+  padding-top: 1px !important;
+}
+.syntaxhighlighter .toolbar a.expandSource {
+  display: none !important;
+}
+.syntaxhighlighter.ie {
+  font-size: .9em !important;
+  padding: 1px 0 1px 0 !important;
+}
+.syntaxhighlighter.ie .toolbar {
+  line-height: 8px !important;
+}
+.syntaxhighlighter.ie .toolbar a {
+  padding-top: 0px !important;
+}
+.syntaxhighlighter.printing .line.alt1 .content,
+.syntaxhighlighter.printing .line.alt2 .content,
+.syntaxhighlighter.printing .line.highlighted .number,
+.syntaxhighlighter.printing .line.highlighted.alt1 .content,
+.syntaxhighlighter.printing .line.highlighted.alt2 .content {
+  background: none !important;
+}
+.syntaxhighlighter.printing .line .number {
+  color: #bbbbbb !important;
+}
+.syntaxhighlighter.printing .line .content {
+  color: black !important;
+}
+.syntaxhighlighter.printing .toolbar {
+  display: none !important;
+}
+.syntaxhighlighter.printing a {
+  text-decoration: none !important;
+}
+.syntaxhighlighter.printing .plain, .syntaxhighlighter.printing .plain a {
+  color: black !important;
+}
+.syntaxhighlighter.printing .comments, .syntaxhighlighter.printing .comments a {
+  color: #008200 !important;
+}
+.syntaxhighlighter.printing .string, .syntaxhighlighter.printing .string a {
+  color: blue !important;
+}
+.syntaxhighlighter.printing .keyword {
+  color: #006699 !important;
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .preprocessor {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter.printing .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter.printing .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter.printing .script {
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .color1, .syntaxhighlighter.printing .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .color2, .syntaxhighlighter.printing .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .color3, .syntaxhighlighter.printing .color3 a {
+  color: red !important;
+}
+.syntaxhighlighter.printing .break, .syntaxhighlighter.printing .break a {
+  color: black !important;
+}
+
+.syntaxhighlighter {
+  background-color: black !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: black !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: black !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #2a3133 !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: white !important;
+}
+.syntaxhighlighter table caption {
+  color: #d3d3d3 !important;
+}
+.syntaxhighlighter .gutter {
+  color: #d3d3d3 !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #990000 !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #990000 !important;
+  color: black !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #ebdb8d !important;
+  background: black !important;
+  border: 1px solid #990000 !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #ebdb8d !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: #ff7d27 !important;
+}
+.syntaxhighlighter .toolbar {
+  color: white !important;
+  background: #990000 !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: #9ccff4 !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: #d3d3d3 !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #ff7d27 !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: #ff9e7b !important;
+}
+.syntaxhighlighter .keyword {
+  color: aqua !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #aec4de !important;
+}
+.syntaxhighlighter .variable {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter .functions {
+  color: #81cef9 !important;
+}
+.syntaxhighlighter .constants {
+  color: #ff9e7b !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: aqua !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: #ebdb8d !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: #ff7d27 !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: #aec4de !important;
+}
diff --git a/bin/shCoreFadeToGrey.css b/bin/shCoreFadeToGrey.css
new file mode 100644
index 0000000..6101eba
--- /dev/null
+++ b/bin/shCoreFadeToGrey.css
@@ -0,0 +1,328 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter a,
+.syntaxhighlighter div,
+.syntaxhighlighter code,
+.syntaxhighlighter table,
+.syntaxhighlighter table td,
+.syntaxhighlighter table tr,
+.syntaxhighlighter table tbody,
+.syntaxhighlighter table thead,
+.syntaxhighlighter table caption,
+.syntaxhighlighter textarea {
+  -moz-border-radius: 0 0 0 0 !important;
+  -webkit-border-radius: 0 0 0 0 !important;
+  background: none !important;
+  border: 0 !important;
+  bottom: auto !important;
+  float: none !important;
+  height: auto !important;
+  left: auto !important;
+  line-height: 1.1em !important;
+  margin: 0 !important;
+  outline: 0 !important;
+  overflow: visible !important;
+  padding: 0 !important;
+  position: static !important;
+  right: auto !important;
+  text-align: left !important;
+  top: auto !important;
+  vertical-align: baseline !important;
+  width: auto !important;
+  box-sizing: content-box !important;
+  font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace !important;
+  font-weight: normal !important;
+  font-style: normal !important;
+  font-size: 1em !important;
+  min-height: inherit !important;
+  min-height: auto !important;
+}
+
+.syntaxhighlighter {
+  width: 100% !important;
+  margin: 1em 0 1em 0 !important;
+  position: relative !important;
+  overflow: auto !important;
+  font-size: 1em !important;
+}
+.syntaxhighlighter.source {
+  overflow: hidden !important;
+}
+.syntaxhighlighter .bold {
+  font-weight: bold !important;
+}
+.syntaxhighlighter .italic {
+  font-style: italic !important;
+}
+.syntaxhighlighter .line {
+  white-space: pre !important;
+}
+.syntaxhighlighter table {
+  width: 100% !important;
+}
+.syntaxhighlighter table caption {
+  text-align: left !important;
+  padding: .5em 0 0.5em 1em !important;
+}
+.syntaxhighlighter table td.code {
+  width: 100% !important;
+}
+.syntaxhighlighter table td.code .container {
+  position: relative !important;
+}
+.syntaxhighlighter table td.code .container textarea {
+  box-sizing: border-box !important;
+  position: absolute !important;
+  left: 0 !important;
+  top: 0 !important;
+  width: 100% !important;
+  height: 100% !important;
+  border: none !important;
+  background: white !important;
+  padding-left: 1em !important;
+  overflow: hidden !important;
+  white-space: pre !important;
+}
+.syntaxhighlighter table td.gutter .line {
+  text-align: right !important;
+  padding: 0 0.5em 0 1em !important;
+}
+.syntaxhighlighter table td.code .line {
+  padding: 0 1em !important;
+}
+.syntaxhighlighter.nogutter td.code .container textarea, .syntaxhighlighter.nogutter td.code .line {
+  padding-left: 0em !important;
+}
+.syntaxhighlighter.show {
+  display: block !important;
+}
+.syntaxhighlighter.collapsed table {
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  padding: 0.1em 0.8em 0em 0.8em !important;
+  font-size: 1em !important;
+  position: static !important;
+  width: auto !important;
+  height: auto !important;
+}
+.syntaxhighlighter.collapsed .toolbar span {
+  display: inline !important;
+  margin-right: 1em !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a {
+  padding: 0 !important;
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a.expandSource {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar {
+  position: absolute !important;
+  right: 1px !important;
+  top: 1px !important;
+  width: 11px !important;
+  height: 11px !important;
+  font-size: 10px !important;
+  z-index: 10 !important;
+}
+.syntaxhighlighter .toolbar span.title {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar a {
+  display: block !important;
+  text-align: center !important;
+  text-decoration: none !important;
+  padding-top: 1px !important;
+}
+.syntaxhighlighter .toolbar a.expandSource {
+  display: none !important;
+}
+.syntaxhighlighter.ie {
+  font-size: .9em !important;
+  padding: 1px 0 1px 0 !important;
+}
+.syntaxhighlighter.ie .toolbar {
+  line-height: 8px !important;
+}
+.syntaxhighlighter.ie .toolbar a {
+  padding-top: 0px !important;
+}
+.syntaxhighlighter.printing .line.alt1 .content,
+.syntaxhighlighter.printing .line.alt2 .content,
+.syntaxhighlighter.printing .line.highlighted .number,
+.syntaxhighlighter.printing .line.highlighted.alt1 .content,
+.syntaxhighlighter.printing .line.highlighted.alt2 .content {
+  background: none !important;
+}
+.syntaxhighlighter.printing .line .number {
+  color: #bbbbbb !important;
+}
+.syntaxhighlighter.printing .line .content {
+  color: black !important;
+}
+.syntaxhighlighter.printing .toolbar {
+  display: none !important;
+}
+.syntaxhighlighter.printing a {
+  text-decoration: none !important;
+}
+.syntaxhighlighter.printing .plain, .syntaxhighlighter.printing .plain a {
+  color: black !important;
+}
+.syntaxhighlighter.printing .comments, .syntaxhighlighter.printing .comments a {
+  color: #008200 !important;
+}
+.syntaxhighlighter.printing .string, .syntaxhighlighter.printing .string a {
+  color: blue !important;
+}
+.syntaxhighlighter.printing .keyword {
+  color: #006699 !important;
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .preprocessor {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter.printing .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter.printing .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter.printing .script {
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .color1, .syntaxhighlighter.printing .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .color2, .syntaxhighlighter.printing .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .color3, .syntaxhighlighter.printing .color3 a {
+  color: red !important;
+}
+.syntaxhighlighter.printing .break, .syntaxhighlighter.printing .break a {
+  color: black !important;
+}
+
+.syntaxhighlighter {
+  background-color: #121212 !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: #121212 !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: #121212 !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #2c2c29 !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: white !important;
+}
+.syntaxhighlighter table caption {
+  color: white !important;
+}
+.syntaxhighlighter .gutter {
+  color: #afafaf !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #3185b9 !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #3185b9 !important;
+  color: #121212 !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #3185b9 !important;
+  background: black !important;
+  border: 1px solid #3185b9 !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #3185b9 !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: #d01d33 !important;
+}
+.syntaxhighlighter .toolbar {
+  color: white !important;
+  background: #3185b9 !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: #96daff !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: white !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #696854 !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: #e3e658 !important;
+}
+.syntaxhighlighter .keyword {
+  color: #d01d33 !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #435a5f !important;
+}
+.syntaxhighlighter .variable {
+  color: #898989 !important;
+}
+.syntaxhighlighter .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter .functions {
+  color: #aaaaaa !important;
+}
+.syntaxhighlighter .constants {
+  color: #96daff !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #d01d33 !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: #ffc074 !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: #4a8cdb !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: #96daff !important;
+}
+
+.syntaxhighlighter .functions {
+  font-weight: bold !important;
+}
diff --git a/bin/shCoreMDUltra.css b/bin/shCoreMDUltra.css
new file mode 100644
index 0000000..2923ce7
--- /dev/null
+++ b/bin/shCoreMDUltra.css
@@ -0,0 +1,324 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter a,
+.syntaxhighlighter div,
+.syntaxhighlighter code,
+.syntaxhighlighter table,
+.syntaxhighlighter table td,
+.syntaxhighlighter table tr,
+.syntaxhighlighter table tbody,
+.syntaxhighlighter table thead,
+.syntaxhighlighter table caption,
+.syntaxhighlighter textarea {
+  -moz-border-radius: 0 0 0 0 !important;
+  -webkit-border-radius: 0 0 0 0 !important;
+  background: none !important;
+  border: 0 !important;
+  bottom: auto !important;
+  float: none !important;
+  height: auto !important;
+  left: auto !important;
+  line-height: 1.1em !important;
+  margin: 0 !important;
+  outline: 0 !important;
+  overflow: visible !important;
+  padding: 0 !important;
+  position: static !important;
+  right: auto !important;
+  text-align: left !important;
+  top: auto !important;
+  vertical-align: baseline !important;
+  width: auto !important;
+  box-sizing: content-box !important;
+  font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace !important;
+  font-weight: normal !important;
+  font-style: normal !important;
+  font-size: 1em !important;
+  min-height: inherit !important;
+  min-height: auto !important;
+}
+
+.syntaxhighlighter {
+  width: 100% !important;
+  margin: 1em 0 1em 0 !important;
+  position: relative !important;
+  overflow: auto !important;
+  font-size: 1em !important;
+}
+.syntaxhighlighter.source {
+  overflow: hidden !important;
+}
+.syntaxhighlighter .bold {
+  font-weight: bold !important;
+}
+.syntaxhighlighter .italic {
+  font-style: italic !important;
+}
+.syntaxhighlighter .line {
+  white-space: pre !important;
+}
+.syntaxhighlighter table {
+  width: 100% !important;
+}
+.syntaxhighlighter table caption {
+  text-align: left !important;
+  padding: .5em 0 0.5em 1em !important;
+}
+.syntaxhighlighter table td.code {
+  width: 100% !important;
+}
+.syntaxhighlighter table td.code .container {
+  position: relative !important;
+}
+.syntaxhighlighter table td.code .container textarea {
+  box-sizing: border-box !important;
+  position: absolute !important;
+  left: 0 !important;
+  top: 0 !important;
+  width: 100% !important;
+  height: 100% !important;
+  border: none !important;
+  background: white !important;
+  padding-left: 1em !important;
+  overflow: hidden !important;
+  white-space: pre !important;
+}
+.syntaxhighlighter table td.gutter .line {
+  text-align: right !important;
+  padding: 0 0.5em 0 1em !important;
+}
+.syntaxhighlighter table td.code .line {
+  padding: 0 1em !important;
+}
+.syntaxhighlighter.nogutter td.code .container textarea, .syntaxhighlighter.nogutter td.code .line {
+  padding-left: 0em !important;
+}
+.syntaxhighlighter.show {
+  display: block !important;
+}
+.syntaxhighlighter.collapsed table {
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  padding: 0.1em 0.8em 0em 0.8em !important;
+  font-size: 1em !important;
+  position: static !important;
+  width: auto !important;
+  height: auto !important;
+}
+.syntaxhighlighter.collapsed .toolbar span {
+  display: inline !important;
+  margin-right: 1em !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a {
+  padding: 0 !important;
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a.expandSource {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar {
+  position: absolute !important;
+  right: 1px !important;
+  top: 1px !important;
+  width: 11px !important;
+  height: 11px !important;
+  font-size: 10px !important;
+  z-index: 10 !important;
+}
+.syntaxhighlighter .toolbar span.title {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar a {
+  display: block !important;
+  text-align: center !important;
+  text-decoration: none !important;
+  padding-top: 1px !important;
+}
+.syntaxhighlighter .toolbar a.expandSource {
+  display: none !important;
+}
+.syntaxhighlighter.ie {
+  font-size: .9em !important;
+  padding: 1px 0 1px 0 !important;
+}
+.syntaxhighlighter.ie .toolbar {
+  line-height: 8px !important;
+}
+.syntaxhighlighter.ie .toolbar a {
+  padding-top: 0px !important;
+}
+.syntaxhighlighter.printing .line.alt1 .content,
+.syntaxhighlighter.printing .line.alt2 .content,
+.syntaxhighlighter.printing .line.highlighted .number,
+.syntaxhighlighter.printing .line.highlighted.alt1 .content,
+.syntaxhighlighter.printing .line.highlighted.alt2 .content {
+  background: none !important;
+}
+.syntaxhighlighter.printing .line .number {
+  color: #bbbbbb !important;
+}
+.syntaxhighlighter.printing .line .content {
+  color: black !important;
+}
+.syntaxhighlighter.printing .toolbar {
+  display: none !important;
+}
+.syntaxhighlighter.printing a {
+  text-decoration: none !important;
+}
+.syntaxhighlighter.printing .plain, .syntaxhighlighter.printing .plain a {
+  color: black !important;
+}
+.syntaxhighlighter.printing .comments, .syntaxhighlighter.printing .comments a {
+  color: #008200 !important;
+}
+.syntaxhighlighter.printing .string, .syntaxhighlighter.printing .string a {
+  color: blue !important;
+}
+.syntaxhighlighter.printing .keyword {
+  color: #006699 !important;
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .preprocessor {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter.printing .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter.printing .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter.printing .script {
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .color1, .syntaxhighlighter.printing .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .color2, .syntaxhighlighter.printing .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .color3, .syntaxhighlighter.printing .color3 a {
+  color: red !important;
+}
+.syntaxhighlighter.printing .break, .syntaxhighlighter.printing .break a {
+  color: black !important;
+}
+
+.syntaxhighlighter {
+  background-color: #222222 !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: #222222 !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: #222222 !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #253e5a !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: white !important;
+}
+.syntaxhighlighter table caption {
+  color: lime !important;
+}
+.syntaxhighlighter .gutter {
+  color: #38566f !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #435a5f !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #435a5f !important;
+  color: #222222 !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #428bdd !important;
+  background: black !important;
+  border: 1px solid #435a5f !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #428bdd !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: lime !important;
+}
+.syntaxhighlighter .toolbar {
+  color: #aaaaff !important;
+  background: #435a5f !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: #aaaaff !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: #9ccff4 !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: lime !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #428bdd !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: lime !important;
+}
+.syntaxhighlighter .keyword {
+  color: #aaaaff !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #8aa6c1 !important;
+}
+.syntaxhighlighter .variable {
+  color: aqua !important;
+}
+.syntaxhighlighter .value {
+  color: #f7e741 !important;
+}
+.syntaxhighlighter .functions {
+  color: #ff8000 !important;
+}
+.syntaxhighlighter .constants {
+  color: yellow !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #aaaaff !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: red !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: yellow !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: #ffaa3e !important;
+}
diff --git a/bin/shCoreMidnight.css b/bin/shCoreMidnight.css
new file mode 100644
index 0000000..e3733ee
--- /dev/null
+++ b/bin/shCoreMidnight.css
@@ -0,0 +1,324 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter a,
+.syntaxhighlighter div,
+.syntaxhighlighter code,
+.syntaxhighlighter table,
+.syntaxhighlighter table td,
+.syntaxhighlighter table tr,
+.syntaxhighlighter table tbody,
+.syntaxhighlighter table thead,
+.syntaxhighlighter table caption,
+.syntaxhighlighter textarea {
+  -moz-border-radius: 0 0 0 0 !important;
+  -webkit-border-radius: 0 0 0 0 !important;
+  background: none !important;
+  border: 0 !important;
+  bottom: auto !important;
+  float: none !important;
+  height: auto !important;
+  left: auto !important;
+  line-height: 1.1em !important;
+  margin: 0 !important;
+  outline: 0 !important;
+  overflow: visible !important;
+  padding: 0 !important;
+  position: static !important;
+  right: auto !important;
+  text-align: left !important;
+  top: auto !important;
+  vertical-align: baseline !important;
+  width: auto !important;
+  box-sizing: content-box !important;
+  font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace !important;
+  font-weight: normal !important;
+  font-style: normal !important;
+  font-size: 1em !important;
+  min-height: inherit !important;
+  min-height: auto !important;
+}
+
+.syntaxhighlighter {
+  width: 100% !important;
+  margin: 1em 0 1em 0 !important;
+  position: relative !important;
+  overflow: auto !important;
+  font-size: 1em !important;
+}
+.syntaxhighlighter.source {
+  overflow: hidden !important;
+}
+.syntaxhighlighter .bold {
+  font-weight: bold !important;
+}
+.syntaxhighlighter .italic {
+  font-style: italic !important;
+}
+.syntaxhighlighter .line {
+  white-space: pre !important;
+}
+.syntaxhighlighter table {
+  width: 100% !important;
+}
+.syntaxhighlighter table caption {
+  text-align: left !important;
+  padding: .5em 0 0.5em 1em !important;
+}
+.syntaxhighlighter table td.code {
+  width: 100% !important;
+}
+.syntaxhighlighter table td.code .container {
+  position: relative !important;
+}
+.syntaxhighlighter table td.code .container textarea {
+  box-sizing: border-box !important;
+  position: absolute !important;
+  left: 0 !important;
+  top: 0 !important;
+  width: 100% !important;
+  height: 100% !important;
+  border: none !important;
+  background: white !important;
+  padding-left: 1em !important;
+  overflow: hidden !important;
+  white-space: pre !important;
+}
+.syntaxhighlighter table td.gutter .line {
+  text-align: right !important;
+  padding: 0 0.5em 0 1em !important;
+}
+.syntaxhighlighter table td.code .line {
+  padding: 0 1em !important;
+}
+.syntaxhighlighter.nogutter td.code .container textarea, .syntaxhighlighter.nogutter td.code .line {
+  padding-left: 0em !important;
+}
+.syntaxhighlighter.show {
+  display: block !important;
+}
+.syntaxhighlighter.collapsed table {
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  padding: 0.1em 0.8em 0em 0.8em !important;
+  font-size: 1em !important;
+  position: static !important;
+  width: auto !important;
+  height: auto !important;
+}
+.syntaxhighlighter.collapsed .toolbar span {
+  display: inline !important;
+  margin-right: 1em !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a {
+  padding: 0 !important;
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a.expandSource {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar {
+  position: absolute !important;
+  right: 1px !important;
+  top: 1px !important;
+  width: 11px !important;
+  height: 11px !important;
+  font-size: 10px !important;
+  z-index: 10 !important;
+}
+.syntaxhighlighter .toolbar span.title {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar a {
+  display: block !important;
+  text-align: center !important;
+  text-decoration: none !important;
+  padding-top: 1px !important;
+}
+.syntaxhighlighter .toolbar a.expandSource {
+  display: none !important;
+}
+.syntaxhighlighter.ie {
+  font-size: .9em !important;
+  padding: 1px 0 1px 0 !important;
+}
+.syntaxhighlighter.ie .toolbar {
+  line-height: 8px !important;
+}
+.syntaxhighlighter.ie .toolbar a {
+  padding-top: 0px !important;
+}
+.syntaxhighlighter.printing .line.alt1 .content,
+.syntaxhighlighter.printing .line.alt2 .content,
+.syntaxhighlighter.printing .line.highlighted .number,
+.syntaxhighlighter.printing .line.highlighted.alt1 .content,
+.syntaxhighlighter.printing .line.highlighted.alt2 .content {
+  background: none !important;
+}
+.syntaxhighlighter.printing .line .number {
+  color: #bbbbbb !important;
+}
+.syntaxhighlighter.printing .line .content {
+  color: black !important;
+}
+.syntaxhighlighter.printing .toolbar {
+  display: none !important;
+}
+.syntaxhighlighter.printing a {
+  text-decoration: none !important;
+}
+.syntaxhighlighter.printing .plain, .syntaxhighlighter.printing .plain a {
+  color: black !important;
+}
+.syntaxhighlighter.printing .comments, .syntaxhighlighter.printing .comments a {
+  color: #008200 !important;
+}
+.syntaxhighlighter.printing .string, .syntaxhighlighter.printing .string a {
+  color: blue !important;
+}
+.syntaxhighlighter.printing .keyword {
+  color: #006699 !important;
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .preprocessor {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter.printing .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter.printing .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter.printing .script {
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .color1, .syntaxhighlighter.printing .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .color2, .syntaxhighlighter.printing .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .color3, .syntaxhighlighter.printing .color3 a {
+  color: red !important;
+}
+.syntaxhighlighter.printing .break, .syntaxhighlighter.printing .break a {
+  color: black !important;
+}
+
+.syntaxhighlighter {
+  background-color: #0f192a !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: #0f192a !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: #0f192a !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #253e5a !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: #38566f !important;
+}
+.syntaxhighlighter table caption {
+  color: #d1edff !important;
+}
+.syntaxhighlighter .gutter {
+  color: #afafaf !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #435a5f !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #435a5f !important;
+  color: #0f192a !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #428bdd !important;
+  background: black !important;
+  border: 1px solid #435a5f !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #428bdd !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: #1dc116 !important;
+}
+.syntaxhighlighter .toolbar {
+  color: #d1edff !important;
+  background: #435a5f !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: #d1edff !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: #8aa6c1 !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: #d1edff !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #428bdd !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: #1dc116 !important;
+}
+.syntaxhighlighter .keyword {
+  color: #b43d3d !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #8aa6c1 !important;
+}
+.syntaxhighlighter .variable {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .value {
+  color: #f7e741 !important;
+}
+.syntaxhighlighter .functions {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .constants {
+  color: #e0e8ff !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #b43d3d !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: #f8bb00 !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: white !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: #ffaa3e !important;
+}
diff --git a/bin/shCoreMin.js b/bin/shCoreMin.js
new file mode 100644
index 0000000..b47b645
--- /dev/null
+++ b/bin/shCoreMin.js
@@ -0,0 +1,17 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+eval(function(p,a,c,k,e,d){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--){d[e(c)]=k[c]||e(c)}k=[function(e){return d[e]}];e=function(){return'\\w+'};c=1};while(c--){if(k[c]){p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c])}}return p}('K M;I(M)1S 2U("2a\'t 4k M 4K 2g 3l 4G 4H");(6(){6 r(f,e){I(!M.1R(f))1S 3m("3s 15 4R");K a=f.1w;f=M(f.1m,t(f)+(e||""));I(a)f.1w={1m:a.1m,19:a.19?a.19.1a(0):N};H f}6 t(f){H(f.1J?"g":"")+(f.4s?"i":"")+(f.4p?"m":"")+(f.4v?"x":"")+(f.3n?"y":"")}6 B(f,e,a,b){K c=u.L,d,h,g;v=R;5K{O(;c--;){g=u[c];I(a&g.3r&&(!g.2p||g.2p.W(b))){g.2q.12=e;I((h=g.2q.X(f))&&h.P===e){d={3k:g.2b.W(b,h,a),1C:h};1N}}}}5v(i){1S i}5q{v=11}H d}6 p(f,e,a){I(3b.Z.1i)H f.1i(e,a);O(a=a||0;a<f.L;a++)I(f[a]===e)H a;H-1}M=6(f,e){K a=[],b=M.1B,c=0,d,h;I(M.1R(f)){I(e!==1d)1S 3m("2a\'t 5r 5I 5F 5B 5C 15 5E 5p");H r(f)}I(v)1S 2U("2a\'t W 3l M 59 5m 5g 5x 5i");e=e||"";O(d={2N:11,19:[],2K:6(g){H e.1i(g)>-1},3d:6(g){e+=g}};c<f.L;)I(h=B(f,c,b,d)){a.U(h.3k);c+=h.1C[0].L||1}Y I(h=n.X.W(z[b],f.1a(c))){a.U(h[0]);c+=h[0].L}Y{h=f.3a(c);I(h==="[")b=M.2I;Y I(h==="]")b=M.1B;a.U(h);c++}a=15(a.1K(""),n.Q.W(e,w,""));a.1w={1m:f,19:d.2N?d.19:N};H a};M.3v="1.5.0";M.2I=1;M.1B=2;K C=/\\$(?:(\\d\\d?|[$&`\'])|{([$\\w]+)})/g,w=/[^5h]+|([\\s\\S])(?=[\\s\\S]*\\1)/g,A=/^(?:[?*+]|{\\d+(?:,\\d*)?})\\??/,v=11,u=[],n={X:15.Z.X,1A:15.Z.1A,1C:1r.Z.1C,Q:1r.Z.Q,1e:1r.Z.1e},x=n.X.W(/()??/,"")[1]===1d,D=6(){K f=/^/g;n.1A.W(f,"");H!f.12}(),y=6(){K f=/x/g;n.Q.W("x",f,"");H!f.12}(),E=15.Z.3n!==1d,z={};z[M.2I]=/^(?:\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\29-26-f]{2}|u[\\29-26-f]{4}|c[A-3o-z]|[\\s\\S]))/;z[M.1B]=/^(?:\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\29-26-f]{2}|u[\\29-26-f]{4}|c[A-3o-z]|[\\s\\S])|\\(\\?[:=!]|[?*+]\\?|{\\d+(?:,\\d*)?}\\??)/;M.1h=6(f,e,a,b){u.U({2q:r(f,"g"+(E?"y":"")),2b:e,3r:a||M.1B,2p:b||N})};M.2n=6(f,e){K a=f+"/"+(e||"");H M.2n[a]||(M.2n[a]=M(f,e))};M.3c=6(f){H r(f,"g")};M.5l=6(f){H f.Q(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g,"\\\\$&")};M.5e=6(f,e,a,b){e=r(e,"g"+(b&&E?"y":""));e.12=a=a||0;f=e.X(f);H b?f&&f.P===a?f:N:f};M.3q=6(){M.1h=6(){1S 2U("2a\'t 55 1h 54 3q")}};M.1R=6(f){H 53.Z.1q.W(f)==="[2m 15]"};M.3p=6(f,e,a,b){O(K c=r(e,"g"),d=-1,h;h=c.X(f);){a.W(b,h,++d,f,c);c.12===h.P&&c.12++}I(e.1J)e.12=0};M.57=6(f,e){H 6 a(b,c){K d=e[c].1I?e[c]:{1I:e[c]},h=r(d.1I,"g"),g=[],i;O(i=0;i<b.L;i++)M.3p(b[i],h,6(k){g.U(d.3j?k[d.3j]||"":k[0])});H c===e.L-1||!g.L?g:a(g,c+1)}([f],0)};15.Z.1p=6(f,e){H J.X(e[0])};15.Z.W=6(f,e){H J.X(e)};15.Z.X=6(f){K e=n.X.1p(J,14),a;I(e){I(!x&&e.L>1&&p(e,"")>-1){a=15(J.1m,n.Q.W(t(J),"g",""));n.Q.W(f.1a(e.P),a,6(){O(K c=1;c<14.L-2;c++)I(14[c]===1d)e[c]=1d})}I(J.1w&&J.1w.19)O(K b=1;b<e.L;b++)I(a=J.1w.19[b-1])e[a]=e[b];!D&&J.1J&&!e[0].L&&J.12>e.P&&J.12--}H e};I(!D)15.Z.1A=6(f){(f=n.X.W(J,f))&&J.1J&&!f[0].L&&J.12>f.P&&J.12--;H!!f};1r.Z.1C=6(f){M.1R(f)||(f=15(f));I(f.1J){K e=n.1C.1p(J,14);f.12=0;H e}H f.X(J)};1r.Z.Q=6(f,e){K a=M.1R(f),b,c;I(a&&1j e.58()==="3f"&&e.1i("${")===-1&&y)H n.Q.1p(J,14);I(a){I(f.1w)b=f.1w.19}Y f+="";I(1j e==="6")c=n.Q.W(J,f,6(){I(b){14[0]=1f 1r(14[0]);O(K d=0;d<b.L;d++)I(b[d])14[0][b[d]]=14[d+1]}I(a&&f.1J)f.12=14[14.L-2]+14[0].L;H e.1p(N,14)});Y{c=J+"";c=n.Q.W(c,f,6(){K d=14;H n.Q.W(e,C,6(h,g,i){I(g)5b(g){24"$":H"$";24"&":H d[0];24"`":H d[d.L-1].1a(0,d[d.L-2]);24"\'":H d[d.L-1].1a(d[d.L-2]+d[0].L);5a:i="";g=+g;I(!g)H h;O(;g>d.L-3;){i=1r.Z.1a.W(g,-1)+i;g=1Q.3i(g/10)}H(g?d[g]||"":"$")+i}Y{g=+i;I(g<=d.L-3)H d[g];g=b?p(b,i):-1;H g>-1?d[g+1]:h}})})}I(a&&f.1J)f.12=0;H c};1r.Z.1e=6(f,e){I(!M.1R(f))H n.1e.1p(J,14);K a=J+"",b=[],c=0,d,h;I(e===1d||+e<0)e=5D;Y{e=1Q.3i(+e);I(!e)H[]}O(f=M.3c(f);d=f.X(a);){I(f.12>c){b.U(a.1a(c,d.P));d.L>1&&d.P<a.L&&3b.Z.U.1p(b,d.1a(1));h=d[0].L;c=f.12;I(b.L>=e)1N}f.12===d.P&&f.12++}I(c===a.L){I(!n.1A.W(f,"")||h)b.U("")}Y b.U(a.1a(c));H b.L>e?b.1a(0,e):b};M.1h(/\\(\\?#[^)]*\\)/,6(f){H n.1A.W(A,f.2S.1a(f.P+f[0].L))?"":"(?:)"});M.1h(/\\((?!\\?)/,6(){J.19.U(N);H"("});M.1h(/\\(\\?<([$\\w]+)>/,6(f){J.19.U(f[1]);J.2N=R;H"("});M.1h(/\\\\k<([\\w$]+)>/,6(f){K e=p(J.19,f[1]);H e>-1?"\\\\"+(e+1)+(3R(f.2S.3a(f.P+f[0].L))?"":"(?:)"):f[0]});M.1h(/\\[\\^?]/,6(f){H f[0]==="[]"?"\\\\b\\\\B":"[\\\\s\\\\S]"});M.1h(/^\\(\\?([5A]+)\\)/,6(f){J.3d(f[1]);H""});M.1h(/(?:\\s+|#.*)+/,6(f){H n.1A.W(A,f.2S.1a(f.P+f[0].L))?"":"(?:)"},M.1B,6(){H J.2K("x")});M.1h(/\\./,6(){H"[\\\\s\\\\S]"},M.1B,6(){H J.2K("s")})})();1j 2e!="1d"&&(2e.M=M);K 1v=6(){6 r(a,b){a.1l.1i(b)!=-1||(a.1l+=" "+b)}6 t(a){H a.1i("3e")==0?a:"3e"+a}6 B(a){H e.1Y.2A[t(a)]}6 p(a,b,c){I(a==N)H N;K d=c!=R?a.3G:[a.2G],h={"#":"1c",".":"1l"}[b.1o(0,1)]||"3h",g,i;g=h!="3h"?b.1o(1):b.5u();I((a[h]||"").1i(g)!=-1)H a;O(a=0;d&&a<d.L&&i==N;a++)i=p(d[a],b,c);H i}6 C(a,b){K c={},d;O(d 2g a)c[d]=a[d];O(d 2g b)c[d]=b[d];H c}6 w(a,b,c,d){6 h(g){g=g||1P.5y;I(!g.1F){g.1F=g.52;g.3N=6(){J.5w=11}}c.W(d||1P,g)}a.3g?a.3g("4U"+b,h):a.4y(b,h,11)}6 A(a,b){K c=e.1Y.2j,d=N;I(c==N){c={};O(K h 2g e.1U){K g=e.1U[h];d=g.4x;I(d!=N){g.1V=h.4w();O(g=0;g<d.L;g++)c[d[g]]=h}}e.1Y.2j=c}d=e.1U[c[a]];d==N&&b!=11&&1P.1X(e.13.1x.1X+(e.13.1x.3E+a));H d}6 v(a,b){O(K c=a.1e("\\n"),d=0;d<c.L;d++)c[d]=b(c[d],d);H c.1K("\\n")}6 u(a,b){I(a==N||a.L==0||a=="\\n")H a;a=a.Q(/</g,"&1y;");a=a.Q(/ {2,}/g,6(c){O(K d="",h=0;h<c.L-1;h++)d+=e.13.1W;H d+" "});I(b!=N)a=v(a,6(c){I(c.L==0)H"";K d="";c=c.Q(/^(&2s;| )+/,6(h){d=h;H""});I(c.L==0)H d;H d+\'<17 1g="\'+b+\'">\'+c+"</17>"});H a}6 n(a,b){a.1e("\\n");O(K c="",d=0;d<50;d++)c+="                    ";H a=v(a,6(h){I(h.1i("\\t")==-1)H h;O(K g=0;(g=h.1i("\\t"))!=-1;)h=h.1o(0,g)+c.1o(0,b-g%b)+h.1o(g+1,h.L);H h})}6 x(a){H a.Q(/^\\s+|\\s+$/g,"")}6 D(a,b){I(a.P<b.P)H-1;Y I(a.P>b.P)H 1;Y I(a.L<b.L)H-1;Y I(a.L>b.L)H 1;H 0}6 y(a,b){6 c(k){H k[0]}O(K d=N,h=[],g=b.2D?b.2D:c;(d=b.1I.X(a))!=N;){K i=g(d,b);I(1j i=="3f")i=[1f e.2L(i,d.P,b.23)];h=h.1O(i)}H h}6 E(a){K b=/(.*)((&1G;|&1y;).*)/;H a.Q(e.3A.3M,6(c){K d="",h=N;I(h=b.X(c)){c=h[1];d=h[2]}H\'<a 2h="\'+c+\'">\'+c+"</a>"+d})}6 z(){O(K a=1E.36("1k"),b=[],c=0;c<a.L;c++)a[c].3s=="20"&&b.U(a[c]);H b}6 f(a){a=a.1F;K b=p(a,".20",R);a=p(a,".3O",R);K c=1E.4i("3t");I(!(!a||!b||p(a,"3t"))){B(b.1c);r(b,"1m");O(K d=a.3G,h=[],g=0;g<d.L;g++)h.U(d[g].4z||d[g].4A);h=h.1K("\\r");c.39(1E.4D(h));a.39(c);c.2C();c.4C();w(c,"4u",6(){c.2G.4E(c);b.1l=b.1l.Q("1m","")})}}I(1j 3F!="1d"&&1j M=="1d")M=3F("M").M;K e={2v:{"1g-27":"","2i-1s":1,"2z-1s-2t":11,1M:N,1t:N,"42-45":R,"43-22":4,1u:R,16:R,"3V-17":R,2l:11,"41-40":R,2k:11,"1z-1k":11},13:{1W:"&2s;",2M:R,46:11,44:11,34:"4n",1x:{21:"4o 1m",2P:"?",1X:"1v\\n\\n",3E:"4r\'t 4t 1D O: ",4g:"4m 4B\'t 51 O 1z-1k 4F: ",37:\'<!4T 1z 4S "-//4V//3H 4W 1.0 4Z//4Y" "1Z://2y.3L.3K/4X/3I/3H/3I-4P.4J"><1z 4I="1Z://2y.3L.3K/4L/5L"><3J><4N 1Z-4M="5G-5M" 6K="2O/1z; 6J=6I-8" /><1t>6L 1v</1t></3J><3B 1L="25-6M:6Q,6P,6O,6N-6F;6y-2f:#6x;2f:#6w;25-22:6v;2O-3D:3C;"><T 1L="2O-3D:3C;3w-32:1.6z;"><T 1L="25-22:6A-6E;">1v</T><T 1L="25-22:.6C;3w-6B:6R;"><T>3v 3.0.76 (72 73 3x)</T><T><a 2h="1Z://3u.2w/1v" 1F="38" 1L="2f:#3y">1Z://3u.2w/1v</a></T><T>70 17 6U 71.</T><T>6T 6X-3x 6Y 6D.</T></T><T>6t 61 60 J 1k, 5Z <a 2h="6u://2y.62.2w/63-66/65?64=5X-5W&5P=5O" 1L="2f:#3y">5R</a> 5V <2R/>5U 5T 5S!</T></T></3B></1z>\'}},1Y:{2j:N,2A:{}},1U:{},3A:{6n:/\\/\\*[\\s\\S]*?\\*\\//2c,6m:/\\/\\/.*$/2c,6l:/#.*$/2c,6k:/"([^\\\\"\\n]|\\\\.)*"/g,6o:/\'([^\\\\\'\\n]|\\\\.)*\'/g,6p:1f M(\'"([^\\\\\\\\"]|\\\\\\\\.)*"\',"3z"),6s:1f M("\'([^\\\\\\\\\']|\\\\\\\\.)*\'","3z"),6q:/(&1y;|<)!--[\\s\\S]*?--(&1G;|>)/2c,3M:/\\w+:\\/\\/[\\w-.\\/?%&=:@;]*/g,6a:{18:/(&1y;|<)\\?=?/g,1b:/\\?(&1G;|>)/g},69:{18:/(&1y;|<)%=?/g,1b:/%(&1G;|>)/g},6d:{18:/(&1y;|<)\\s*1k.*?(&1G;|>)/2T,1b:/(&1y;|<)\\/\\s*1k\\s*(&1G;|>)/2T}},16:{1H:6(a){6 b(i,k){H e.16.2o(i,k,e.13.1x[k])}O(K c=\'<T 1g="16">\',d=e.16.2x,h=d.2X,g=0;g<h.L;g++)c+=(d[h[g]].1H||b)(a,h[g]);c+="</T>";H c},2o:6(a,b,c){H\'<2W><a 2h="#" 1g="6e 6h\'+b+" "+b+\'">\'+c+"</a></2W>"},2b:6(a){K b=a.1F,c=b.1l||"";b=B(p(b,".20",R).1c);K d=6(h){H(h=15(h+"6f(\\\\w+)").X(c))?h[1]:N}("6g");b&&d&&e.16.2x[d].2B(b);a.3N()},2x:{2X:["21","2P"],21:{1H:6(a){I(a.V("2l")!=R)H"";K b=a.V("1t");H e.16.2o(a,"21",b?b:e.13.1x.21)},2B:6(a){a=1E.6j(t(a.1c));a.1l=a.1l.Q("47","")}},2P:{2B:6(){K a="68=0";a+=", 18="+(31.30-33)/2+", 32="+(31.2Z-2Y)/2+", 30=33, 2Z=2Y";a=a.Q(/^,/,"");a=1P.6Z("","38",a);a.2C();K b=a.1E;b.6W(e.13.1x.37);b.6V();a.2C()}}}},35:6(a,b){K c;I(b)c=[b];Y{c=1E.36(e.13.34);O(K d=[],h=0;h<c.L;h++)d.U(c[h]);c=d}c=c;d=[];I(e.13.2M)c=c.1O(z());I(c.L===0)H d;O(h=0;h<c.L;h++){O(K g=c[h],i=a,k=c[h].1l,j=3W 0,l={},m=1f M("^\\\\[(?<2V>(.*?))\\\\]$"),s=1f M("(?<27>[\\\\w-]+)\\\\s*:\\\\s*(?<1T>[\\\\w-%#]+|\\\\[.*?\\\\]|\\".*?\\"|\'.*?\')\\\\s*;?","g");(j=s.X(k))!=N;){K o=j.1T.Q(/^[\'"]|[\'"]$/g,"");I(o!=N&&m.1A(o)){o=m.X(o);o=o.2V.L>0?o.2V.1e(/\\s*,\\s*/):[]}l[j.27]=o}g={1F:g,1n:C(i,l)};g.1n.1D!=N&&d.U(g)}H d},1M:6(a,b){K c=J.35(a,b),d=N,h=e.13;I(c.L!==0)O(K g=0;g<c.L;g++){b=c[g];K i=b.1F,k=b.1n,j=k.1D,l;I(j!=N){I(k["1z-1k"]=="R"||e.2v["1z-1k"]==R){d=1f e.4l(j);j="4O"}Y I(d=A(j))d=1f d;Y 6H;l=i.3X;I(h.2M){l=l;K m=x(l),s=11;I(m.1i("<![6G[")==0){m=m.4h(9);s=R}K o=m.L;I(m.1i("]]\\>")==o-3){m=m.4h(0,o-3);s=R}l=s?m:l}I((i.1t||"")!="")k.1t=i.1t;k.1D=j;d.2Q(k);b=d.2F(l);I((i.1c||"")!="")b.1c=i.1c;i.2G.74(b,i)}}},2E:6(a){w(1P,"4k",6(){e.1M(a)})}};e.2E=e.2E;e.1M=e.1M;e.2L=6(a,b,c){J.1T=a;J.P=b;J.L=a.L;J.23=c;J.1V=N};e.2L.Z.1q=6(){H J.1T};e.4l=6(a){6 b(j,l){O(K m=0;m<j.L;m++)j[m].P+=l}K c=A(a),d,h=1f e.1U.5Y,g=J,i="2F 1H 2Q".1e(" ");I(c!=N){d=1f c;O(K k=0;k<i.L;k++)(6(){K j=i[k];g[j]=6(){H h[j].1p(h,14)}})();d.28==N?1P.1X(e.13.1x.1X+(e.13.1x.4g+a)):h.2J.U({1I:d.28.17,2D:6(j){O(K l=j.17,m=[],s=d.2J,o=j.P+j.18.L,F=d.28,q,G=0;G<s.L;G++){q=y(l,s[G]);b(q,o);m=m.1O(q)}I(F.18!=N&&j.18!=N){q=y(j.18,F.18);b(q,j.P);m=m.1O(q)}I(F.1b!=N&&j.1b!=N){q=y(j.1b,F.1b);b(q,j.P+j[0].5Q(j.1b));m=m.1O(q)}O(j=0;j<m.L;j++)m[j].1V=c.1V;H m}})}};e.4j=6(){};e.4j.Z={V:6(a,b){K c=J.1n[a];c=c==N?b:c;K d={"R":R,"11":11}[c];H d==N?c:d},3Y:6(a){H 1E.4i(a)},4c:6(a,b){K c=[];I(a!=N)O(K d=0;d<a.L;d++)I(1j a[d]=="2m")c=c.1O(y(b,a[d]));H J.4e(c.6b(D))},4e:6(a){O(K b=0;b<a.L;b++)I(a[b]!==N)O(K c=a[b],d=c.P+c.L,h=b+1;h<a.L&&a[b]!==N;h++){K g=a[h];I(g!==N)I(g.P>d)1N;Y I(g.P==c.P&&g.L>c.L)a[b]=N;Y I(g.P>=c.P&&g.P<d)a[h]=N}H a},4d:6(a){K b=[],c=2u(J.V("2i-1s"));v(a,6(d,h){b.U(h+c)});H b},3U:6(a){K b=J.V("1M",[]);I(1j b!="2m"&&b.U==N)b=[b];a:{a=a.1q();K c=3W 0;O(c=c=1Q.6c(c||0,0);c<b.L;c++)I(b[c]==a){b=c;1N a}b=-1}H b!=-1},2r:6(a,b,c){a=["1s","6i"+b,"P"+a,"6r"+(b%2==0?1:2).1q()];J.3U(b)&&a.U("67");b==0&&a.U("1N");H\'<T 1g="\'+a.1K(" ")+\'">\'+c+"</T>"},3Q:6(a,b){K c="",d=a.1e("\\n").L,h=2u(J.V("2i-1s")),g=J.V("2z-1s-2t");I(g==R)g=(h+d-1).1q().L;Y I(3R(g)==R)g=0;O(K i=0;i<d;i++){K k=b?b[i]:h+i,j;I(k==0)j=e.13.1W;Y{j=g;O(K l=k.1q();l.L<j;)l="0"+l;j=l}a=j;c+=J.2r(i,k,a)}H c},49:6(a,b){a=x(a);K c=a.1e("\\n");J.V("2z-1s-2t");K d=2u(J.V("2i-1s"));a="";O(K h=J.V("1D"),g=0;g<c.L;g++){K i=c[g],k=/^(&2s;|\\s)+/.X(i),j=N,l=b?b[g]:d+g;I(k!=N){j=k[0].1q();i=i.1o(j.L);j=j.Q(" ",e.13.1W)}i=x(i);I(i.L==0)i=e.13.1W;a+=J.2r(g,l,(j!=N?\'<17 1g="\'+h+\' 5N">\'+j+"</17>":"")+i)}H a},4f:6(a){H a?"<4a>"+a+"</4a>":""},4b:6(a,b){6 c(l){H(l=l?l.1V||g:g)?l+" ":""}O(K d=0,h="",g=J.V("1D",""),i=0;i<b.L;i++){K k=b[i],j;I(!(k===N||k.L===0)){j=c(k);h+=u(a.1o(d,k.P-d),j+"48")+u(k.1T,j+k.23);d=k.P+k.L+(k.75||0)}}h+=u(a.1o(d),c()+"48");H h},1H:6(a){K b="",c=["20"],d;I(J.V("2k")==R)J.1n.16=J.1n.1u=11;1l="20";J.V("2l")==R&&c.U("47");I((1u=J.V("1u"))==11)c.U("6S");c.U(J.V("1g-27"));c.U(J.V("1D"));a=a.Q(/^[ ]*[\\n]+|[\\n]*[ ]*$/g,"").Q(/\\r/g," ");b=J.V("43-22");I(J.V("42-45")==R)a=n(a,b);Y{O(K h="",g=0;g<b;g++)h+=" ";a=a.Q(/\\t/g,h)}a=a;a:{b=a=a;h=/<2R\\s*\\/?>|&1y;2R\\s*\\/?&1G;/2T;I(e.13.46==R)b=b.Q(h,"\\n");I(e.13.44==R)b=b.Q(h,"");b=b.1e("\\n");h=/^\\s*/;g=4Q;O(K i=0;i<b.L&&g>0;i++){K k=b[i];I(x(k).L!=0){k=h.X(k);I(k==N){a=a;1N a}g=1Q.4q(k[0].L,g)}}I(g>0)O(i=0;i<b.L;i++)b[i]=b[i].1o(g);a=b.1K("\\n")}I(1u)d=J.4d(a);b=J.4c(J.2J,a);b=J.4b(a,b);b=J.49(b,d);I(J.V("41-40"))b=E(b);1j 2H!="1d"&&2H.3S&&2H.3S.1C(/5s/)&&c.U("5t");H b=\'<T 1c="\'+t(J.1c)+\'" 1g="\'+c.1K(" ")+\'">\'+(J.V("16")?e.16.1H(J):"")+\'<3Z 5z="0" 5H="0" 5J="0">\'+J.4f(J.V("1t"))+"<3T><3P>"+(1u?\'<2d 1g="1u">\'+J.3Q(a)+"</2d>":"")+\'<2d 1g="17"><T 1g="3O">\'+b+"</T></2d></3P></3T></3Z></T>"},2F:6(a){I(a===N)a="";J.17=a;K b=J.3Y("T");b.3X=J.1H(a);J.V("16")&&w(p(b,".16"),"5c",e.16.2b);J.V("3V-17")&&w(p(b,".17"),"56",f);H b},2Q:6(a){J.1c=""+1Q.5d(1Q.5n()*5k).1q();e.1Y.2A[t(J.1c)]=J;J.1n=C(e.2v,a||{});I(J.V("2k")==R)J.1n.16=J.1n.1u=11},5j:6(a){a=a.Q(/^\\s+|\\s+$/g,"").Q(/\\s+/g,"|");H"\\\\b(?:"+a+")\\\\b"},5f:6(a){J.28={18:{1I:a.18,23:"1k"},1b:{1I:a.1b,23:"1k"},17:1f M("(?<18>"+a.18.1m+")(?<17>.*?)(?<1b>"+a.1b.1m+")","5o")}}};H e}();1j 2e!="1d"&&(2e.1v=1v);',62,441,'||||||function|||||||||||||||||||||||||||||||||||||return|if|this|var|length|XRegExp|null|for|index|replace|true||div|push|getParam|call|exec|else|prototype||false|lastIndex|config|arguments|RegExp|toolbar|code|left|captureNames|slice|right|id|undefined|split|new|class|addToken|indexOf|typeof|script|className|source|params|substr|apply|toString|String|line|title|gutter|SyntaxHighlighter|_xregexp|strings|lt|html|test|OUTSIDE_CLASS|match|brush|document|target|gt|getHtml|regex|global|join|style|highlight|break|concat|window|Math|isRegExp|throw|value|brushes|brushName|space|alert|vars|http|syntaxhighlighter|expandSource|size|css|case|font|Fa|name|htmlScript|dA|can|handler|gm|td|exports|color|in|href|first|discoveredBrushes|light|collapse|object|cache|getButtonHtml|trigger|pattern|getLineHtml|nbsp|numbers|parseInt|defaults|com|items|www|pad|highlighters|execute|focus|func|all|getDiv|parentNode|navigator|INSIDE_CLASS|regexList|hasFlag|Match|useScriptTags|hasNamedCapture|text|help|init|br|input|gi|Error|values|span|list|250|height|width|screen|top|500|tagName|findElements|getElementsByTagName|aboutDialog|_blank|appendChild|charAt|Array|copyAsGlobal|setFlag|highlighter_|string|attachEvent|nodeName|floor|backref|output|the|TypeError|sticky|Za|iterate|freezeTokens|scope|type|textarea|alexgorbatchev|version|margin|2010|005896|gs|regexLib|body|center|align|noBrush|require|childNodes|DTD|xhtml1|head|org|w3|url|preventDefault|container|tr|getLineNumbersHtml|isNaN|userAgent|tbody|isLineHighlighted|quick|void|innerHTML|create|table|links|auto|smart|tab|stripBrs|tabs|bloggerMode|collapsed|plain|getCodeLinesHtml|caption|getMatchesHtml|findMatches|figureOutLineNumbers|removeNestedMatches|getTitleHtml|brushNotHtmlScript|substring|createElement|Highlighter|load|HtmlScript|Brush|pre|expand|multiline|min|Can|ignoreCase|find|blur|extended|toLowerCase|aliases|addEventListener|innerText|textContent|wasn|select|createTextNode|removeChild|option|same|frame|xmlns|dtd|twice|1999|equiv|meta|htmlscript|transitional|1E3|expected|PUBLIC|DOCTYPE|on|W3C|XHTML|TR|EN|Transitional||configured|srcElement|Object|after|run|dblclick|matchChain|valueOf|constructor|default|switch|click|round|execAt|forHtmlScript|token|gimy|functions|getKeywords|1E6|escape|within|random|sgi|another|finally|supply|MSIE|ie|toUpperCase|catch|returnValue|definition|event|border|imsx|constructing|one|Infinity|from|when|Content|cellpadding|flags|cellspacing|try|xhtml|Type|spaces|2930402|hosted_button_id|lastIndexOf|donate|active|development|keep|to|xclick|_s|Xml|please|like|you|paypal|cgi|cmd|webscr|bin|highlighted|scrollbars|aspScriptTags|phpScriptTags|sort|max|scriptScriptTags|toolbar_item|_|command|command_|number|getElementById|doubleQuotedString|singleLinePerlComments|singleLineCComments|multiLineCComments|singleQuotedString|multiLineDoubleQuotedString|xmlComments|alt|multiLineSingleQuotedString|If|https|1em|000|fff|background|5em|xx|bottom|75em|Gorbatchev|large|serif|CDATA|continue|utf|charset|content|About|family|sans|Helvetica|Arial|Geneva|3em|nogutter|Copyright|syntax|close|write|2004|Alex|open|JavaScript|highlighter|July|02|replaceChild|offset|83'.split('|'),0,{}))
diff --git a/bin/shCoreRDark.css b/bin/shCoreRDark.css
new file mode 100644
index 0000000..d093683
--- /dev/null
+++ b/bin/shCoreRDark.css
@@ -0,0 +1,324 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter a,
+.syntaxhighlighter div,
+.syntaxhighlighter code,
+.syntaxhighlighter table,
+.syntaxhighlighter table td,
+.syntaxhighlighter table tr,
+.syntaxhighlighter table tbody,
+.syntaxhighlighter table thead,
+.syntaxhighlighter table caption,
+.syntaxhighlighter textarea {
+  -moz-border-radius: 0 0 0 0 !important;
+  -webkit-border-radius: 0 0 0 0 !important;
+  background: none !important;
+  border: 0 !important;
+  bottom: auto !important;
+  float: none !important;
+  height: auto !important;
+  left: auto !important;
+  line-height: 1.1em !important;
+  margin: 0 !important;
+  outline: 0 !important;
+  overflow: visible !important;
+  padding: 0 !important;
+  position: static !important;
+  right: auto !important;
+  text-align: left !important;
+  top: auto !important;
+  vertical-align: baseline !important;
+  width: auto !important;
+  box-sizing: content-box !important;
+  font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace !important;
+  font-weight: normal !important;
+  font-style: normal !important;
+  font-size: 1em !important;
+  min-height: inherit !important;
+  min-height: auto !important;
+}
+
+.syntaxhighlighter {
+  width: 100% !important;
+  margin: 1em 0 1em 0 !important;
+  position: relative !important;
+  overflow: auto !important;
+  font-size: 1em !important;
+}
+.syntaxhighlighter.source {
+  overflow: hidden !important;
+}
+.syntaxhighlighter .bold {
+  font-weight: bold !important;
+}
+.syntaxhighlighter .italic {
+  font-style: italic !important;
+}
+.syntaxhighlighter .line {
+  white-space: pre !important;
+}
+.syntaxhighlighter table {
+  width: 100% !important;
+}
+.syntaxhighlighter table caption {
+  text-align: left !important;
+  padding: .5em 0 0.5em 1em !important;
+}
+.syntaxhighlighter table td.code {
+  width: 100% !important;
+}
+.syntaxhighlighter table td.code .container {
+  position: relative !important;
+}
+.syntaxhighlighter table td.code .container textarea {
+  box-sizing: border-box !important;
+  position: absolute !important;
+  left: 0 !important;
+  top: 0 !important;
+  width: 100% !important;
+  height: 100% !important;
+  border: none !important;
+  background: white !important;
+  padding-left: 1em !important;
+  overflow: hidden !important;
+  white-space: pre !important;
+}
+.syntaxhighlighter table td.gutter .line {
+  text-align: right !important;
+  padding: 0 0.5em 0 1em !important;
+}
+.syntaxhighlighter table td.code .line {
+  padding: 0 1em !important;
+}
+.syntaxhighlighter.nogutter td.code .container textarea, .syntaxhighlighter.nogutter td.code .line {
+  padding-left: 0em !important;
+}
+.syntaxhighlighter.show {
+  display: block !important;
+}
+.syntaxhighlighter.collapsed table {
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  padding: 0.1em 0.8em 0em 0.8em !important;
+  font-size: 1em !important;
+  position: static !important;
+  width: auto !important;
+  height: auto !important;
+}
+.syntaxhighlighter.collapsed .toolbar span {
+  display: inline !important;
+  margin-right: 1em !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a {
+  padding: 0 !important;
+  display: none !important;
+}
+.syntaxhighlighter.collapsed .toolbar span a.expandSource {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar {
+  position: absolute !important;
+  right: 1px !important;
+  top: 1px !important;
+  width: 11px !important;
+  height: 11px !important;
+  font-size: 10px !important;
+  z-index: 10 !important;
+}
+.syntaxhighlighter .toolbar span.title {
+  display: inline !important;
+}
+.syntaxhighlighter .toolbar a {
+  display: block !important;
+  text-align: center !important;
+  text-decoration: none !important;
+  padding-top: 1px !important;
+}
+.syntaxhighlighter .toolbar a.expandSource {
+  display: none !important;
+}
+.syntaxhighlighter.ie {
+  font-size: .9em !important;
+  padding: 1px 0 1px 0 !important;
+}
+.syntaxhighlighter.ie .toolbar {
+  line-height: 8px !important;
+}
+.syntaxhighlighter.ie .toolbar a {
+  padding-top: 0px !important;
+}
+.syntaxhighlighter.printing .line.alt1 .content,
+.syntaxhighlighter.printing .line.alt2 .content,
+.syntaxhighlighter.printing .line.highlighted .number,
+.syntaxhighlighter.printing .line.highlighted.alt1 .content,
+.syntaxhighlighter.printing .line.highlighted.alt2 .content {
+  background: none !important;
+}
+.syntaxhighlighter.printing .line .number {
+  color: #bbbbbb !important;
+}
+.syntaxhighlighter.printing .line .content {
+  color: black !important;
+}
+.syntaxhighlighter.printing .toolbar {
+  display: none !important;
+}
+.syntaxhighlighter.printing a {
+  text-decoration: none !important;
+}
+.syntaxhighlighter.printing .plain, .syntaxhighlighter.printing .plain a {
+  color: black !important;
+}
+.syntaxhighlighter.printing .comments, .syntaxhighlighter.printing .comments a {
+  color: #008200 !important;
+}
+.syntaxhighlighter.printing .string, .syntaxhighlighter.printing .string a {
+  color: blue !important;
+}
+.syntaxhighlighter.printing .keyword {
+  color: #006699 !important;
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .preprocessor {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter.printing .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter.printing .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter.printing .script {
+  font-weight: bold !important;
+}
+.syntaxhighlighter.printing .color1, .syntaxhighlighter.printing .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter.printing .color2, .syntaxhighlighter.printing .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter.printing .color3, .syntaxhighlighter.printing .color3 a {
+  color: red !important;
+}
+.syntaxhighlighter.printing .break, .syntaxhighlighter.printing .break a {
+  color: black !important;
+}
+
+.syntaxhighlighter {
+  background-color: #1b2426 !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: #1b2426 !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: #1b2426 !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #323e41 !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: #b9bdb6 !important;
+}
+.syntaxhighlighter table caption {
+  color: #b9bdb6 !important;
+}
+.syntaxhighlighter .gutter {
+  color: #afafaf !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #435a5f !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #435a5f !important;
+  color: #1b2426 !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #5ba1cf !important;
+  background: black !important;
+  border: 1px solid #435a5f !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #5ba1cf !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: #5ce638 !important;
+}
+.syntaxhighlighter .toolbar {
+  color: white !important;
+  background: #435a5f !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: #e0e8ff !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: #b9bdb6 !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #878a85 !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: #5ce638 !important;
+}
+.syntaxhighlighter .keyword {
+  color: #5ba1cf !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #435a5f !important;
+}
+.syntaxhighlighter .variable {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter .functions {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .constants {
+  color: #e0e8ff !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #5ba1cf !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: #e0e8ff !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: white !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: #ffaa3e !important;
+}
diff --git a/bin/shCore_orig.js b/bin/shCore_orig.js
new file mode 100644
index 0000000..4214763
--- /dev/null
+++ b/bin/shCore_orig.js
@@ -0,0 +1,1721 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+//
+// Begin anonymous function. This is used to contain local scope variables without polutting global scope.
+//
+var SyntaxHighlighter = function() { 
+
+// CommonJS
+if (typeof(require) != 'undefined' && typeof(XRegExp) == 'undefined')
+{
+	XRegExp = require('XRegExp').XRegExp;
+}
+
+// Shortcut object which will be assigned to the SyntaxHighlighter variable.
+// This is a shorthand for local reference in order to avoid long namespace 
+// references to SyntaxHighlighter.whatever...
+var sh = {
+	defaults : {
+		/** Additional CSS class names to be added to highlighter elements. */
+		'class-name' : '',
+		
+		/** First line number. */
+		'first-line' : 1,
+		
+		/**
+		 * Pads line numbers. Possible values are:
+		 *
+		 *   false - don't pad line numbers.
+		 *   true  - automaticaly pad numbers with minimum required number of leading zeroes.
+		 *   [int] - length up to which pad line numbers.
+		 */
+		'pad-line-numbers' : false,
+		
+		/** Lines to highlight. */
+		'highlight' : null,
+		
+		/** Title to be displayed above the code block. */
+		'title' : null,
+		
+		/** Enables or disables smart tabs. */
+		'smart-tabs' : true,
+		
+		/** Gets or sets tab size. */
+		'tab-size' : 4,
+		
+		/** Enables or disables gutter. */
+		'gutter' : true,
+		
+		/** Enables or disables toolbar. */
+		'toolbar' : true,
+		
+		/** Enables quick code copy and paste from double click. */
+		'quick-code' : true,
+		
+		/** Forces code view to be collapsed. */
+		'collapse' : false,
+		
+		/** Enables or disables automatic links. */
+		'auto-links' : true,
+		
+		/** Gets or sets light mode. Equavalent to turning off gutter and toolbar. */
+		'light' : false,
+		
+		'html-script' : false
+	},
+	
+	config : {
+		space : '&nbsp;',
+		
+		/** Enables use of <SCRIPT type="syntaxhighlighter" /> tags. */
+		useScriptTags : true,
+		
+		/** Blogger mode flag. */
+		bloggerMode : false,
+		
+		stripBrs : false,
+		
+		/** Name of the tag that SyntaxHighlighter will automatically look for. */
+		tagName : 'pre',
+		
+		strings : {
+			expandSource : 'expand source',
+			help : '?',
+			alert: 'SyntaxHighlighter\n\n',
+			noBrush : 'Can\'t find brush for: ',
+			brushNotHtmlScript : 'Brush wasn\'t configured for html-script option: ',
+			
+			// this is populated by the build script
+			aboutDialog : '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>About SyntaxHighlighter</title></head><body style="font-family:Geneva,Arial,Helvetica,sans-serif;background-color:#fff;color:#000;font-size:1em;text-align:center;"><div style="text-align:center;margin-top:1.5em;"><div style="font-size:xx-large;">SyntaxHighlighter</div><div style="font-size:.75em;margin-bottom:3em;"><div>version 3.0.83 (July 02 2010)</div><div><a href="http://alexgorbatchev.com/SyntaxHighlighter" target="_blank" style="color:#005896">http://alexgorbatchev.com/SyntaxHighlighter</a></div><div>JavaScript code syntax highlighter.</div><div>Copyright 2004-2010 Alex Gorbatchev.</div></div><div>If you like this script, please <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=2930402" style="color:#005896">donate</a> to <br/>keep development active!</div></div></body></html>'
+		}
+	},
+	
+	/** Internal 'global' variables. */
+	vars : {
+		discoveredBrushes : null,
+		highlighters : {}
+	},
+	
+	/** This object is populated by user included external brush files. */
+	brushes : {},
+
+	/** Common regular expressions. */
+	regexLib : {
+		multiLineCComments			: /\/\*[\s\S]*?\*\//gm,
+		singleLineCComments			: /\/\/.*$/gm,
+		singleLinePerlComments		: /#.*$/gm,
+		doubleQuotedString			: /"([^\\"\n]|\\.)*"/g,
+		singleQuotedString			: /'([^\\'\n]|\\.)*'/g,
+		multiLineDoubleQuotedString	: new XRegExp('"([^\\\\"]|\\\\.)*"', 'gs'),
+		multiLineSingleQuotedString	: new XRegExp("'([^\\\\']|\\\\.)*'", 'gs'),
+		xmlComments					: /(&lt;|<)!--[\s\S]*?--(&gt;|>)/gm,
+		url							: /\w+:\/\/[\w-.\/?%&=:@;]*/g,
+		
+		/** <?= ?> tags. */
+		phpScriptTags 				: { left: /(&lt;|<)\?=?/g, right: /\?(&gt;|>)/g },
+		
+		/** <%= %> tags. */
+		aspScriptTags				: { left: /(&lt;|<)%=?/g, right: /%(&gt;|>)/g },
+		
+		/** <script></script> tags. */
+		scriptScriptTags			: { left: /(&lt;|<)\s*script.*?(&gt;|>)/gi, right: /(&lt;|<)\/\s*script\s*(&gt;|>)/gi }
+	},
+
+	toolbar: {
+		/**
+		 * Generates HTML markup for the toolbar.
+		 * @param {Highlighter} highlighter Highlighter instance.
+		 * @return {String} Returns HTML markup.
+		 */
+		getHtml: function(highlighter)
+		{
+			var html = '<div class="toolbar">',
+				items = sh.toolbar.items,
+				list = items.list
+				;
+			
+			function defaultGetHtml(highlighter, name)
+			{
+				return sh.toolbar.getButtonHtml(highlighter, name, sh.config.strings[name]);
+			};
+			
+			for (var i = 0; i < list.length; i++)
+				html += (items[list[i]].getHtml || defaultGetHtml)(highlighter, list[i]);
+			
+			html += '</div>';
+			
+			return html;
+		},
+		
+		/**
+		 * Generates HTML markup for a regular button in the toolbar.
+		 * @param {Highlighter} highlighter Highlighter instance.
+		 * @param {String} commandName		Command name that would be executed.
+		 * @param {String} label			Label text to display.
+		 * @return {String}					Returns HTML markup.
+		 */
+		getButtonHtml: function(highlighter, commandName, label)
+		{
+			return '<span><a href="#" class="toolbar_item'
+				+ ' command_' + commandName
+				+ ' ' + commandName
+				+ '">' + label + '</a></span>'
+				;
+		},
+		
+		/**
+		 * Event handler for a toolbar anchor.
+		 */
+		handler: function(e)
+		{
+			var target = e.target,
+				className = target.className || ''
+				;
+
+			function getValue(name)
+			{
+				var r = new RegExp(name + '_(\\w+)'),
+					match = r.exec(className)
+					;
+
+				return match ? match[1] : null;
+			};
+			
+			var highlighter = getHighlighterById(findParentElement(target, '.syntaxhighlighter').id),
+				commandName = getValue('command')
+				;
+			
+			// execute the toolbar command
+			if (highlighter && commandName)
+				sh.toolbar.items[commandName].execute(highlighter);
+
+			// disable default A click behaviour
+			e.preventDefault();
+		},
+		
+		/** Collection of toolbar items. */
+		items : {
+			// Ordered lis of items in the toolbar. Can't expect `for (var n in items)` to be consistent.
+			list: ['expandSource', 'help'],
+
+			expandSource: {
+				getHtml: function(highlighter)
+				{
+					if (highlighter.getParam('collapse') != true)
+						return '';
+						
+					var title = highlighter.getParam('title');
+					return sh.toolbar.getButtonHtml(highlighter, 'expandSource', title ? title : sh.config.strings.expandSource);
+				},
+			
+				execute: function(highlighter)
+				{
+					var div = getHighlighterDivById(highlighter.id);
+					removeClass(div, 'collapsed');
+				}
+			},
+
+			/** Command to display the about dialog window. */
+			help: {
+				execute: function(highlighter)
+				{	
+					var wnd = popup('', '_blank', 500, 250, 'scrollbars=0'),
+						doc = wnd.document
+						;
+					
+					doc.write(sh.config.strings.aboutDialog);
+					doc.close();
+					wnd.focus();
+				}
+			}
+		}
+	},
+
+	/**
+	 * Finds all elements on the page which should be processes by SyntaxHighlighter.
+	 *
+	 * @param {Object} globalParams		Optional parameters which override element's 
+	 * 									parameters. Only used if element is specified.
+	 * 
+	 * @param {Object} element	Optional element to highlight. If none is
+	 * 							provided, all elements in the current document 
+	 * 							are returned which qualify.
+	 *
+	 * @return {Array}	Returns list of <code>{ target: DOMElement, params: Object }</code> objects.
+	 */
+	findElements: function(globalParams, element)
+	{
+		var elements = element ? [element] : toArray(document.getElementsByTagName(sh.config.tagName)), 
+			conf = sh.config,
+			result = []
+			;
+
+		// support for <SCRIPT TYPE="syntaxhighlighter" /> feature
+		if (conf.useScriptTags)
+			elements = elements.concat(getSyntaxHighlighterScriptTags());
+
+		if (elements.length === 0) 
+			return result;
+	
+		for (var i = 0; i < elements.length; i++) 
+		{
+			var item = {
+				target: elements[i], 
+				// local params take precedence over globals
+				params: merge(globalParams, parseParams(elements[i].className))
+			};
+
+			if (item.params['brush'] == null)
+				continue;
+				
+			result.push(item);
+		}
+		
+		return result;
+	},
+
+	/**
+	 * Shorthand to highlight all elements on the page that are marked as 
+	 * SyntaxHighlighter source code.
+	 * 
+	 * @param {Object} globalParams		Optional parameters which override element's 
+	 * 									parameters. Only used if element is specified.
+	 * 
+	 * @param {Object} element	Optional element to highlight. If none is
+	 * 							provided, all elements in the current document 
+	 * 							are highlighted.
+	 */ 
+	highlight: function(globalParams, element)
+	{
+		var elements = this.findElements(globalParams, element),
+			propertyName = 'innerHTML', 
+			highlighter = null,
+			conf = sh.config
+			;
+
+		if (elements.length === 0) 
+			return;
+	
+		for (var i = 0; i < elements.length; i++) 
+		{
+			var element = elements[i],
+				target = element.target,
+				params = element.params,
+				brushName = params.brush,
+				code
+				;
+
+			if (brushName == null)
+				continue;
+
+			// Instantiate a brush
+			if (params['html-script'] == 'true' || sh.defaults['html-script'] == true) 
+			{
+				highlighter = new sh.HtmlScript(brushName);
+				brushName = 'htmlscript';
+			}
+			else
+			{
+				var brush = findBrush(brushName);
+				
+				if (brush)
+					highlighter = new brush();
+				else
+					continue;
+			}
+			
+			code = target[propertyName];
+			
+			// remove CDATA from <SCRIPT/> tags if it's present
+			if (conf.useScriptTags)
+				code = stripCData(code);
+				
+			// Inject title if the attribute is present
+			if ((target.title || '') != '')
+				params.title = target.title;
+				
+			params['brush'] = brushName;
+			highlighter.init(params);
+			element = highlighter.getDiv(code);
+			
+			// carry over ID
+			if ((target.id || '') != '')
+				element.id = target.id;
+			
+			target.parentNode.replaceChild(element, target);
+		}
+	},
+
+	/**
+	 * Main entry point for the SyntaxHighlighter.
+	 * @param {Object} params Optional params to apply to all highlighted elements.
+	 */
+	all: function(params)
+	{
+		attachEvent(
+			window,
+			'load',
+			function() { sh.highlight(params); }
+		);
+	}
+}; // end of sh
+
+sh['all']			= sh.all;
+sh['highlight']		= sh.highlight;
+
+/**
+ * Checks if target DOM elements has specified CSS class.
+ * @param {DOMElement} target Target DOM element to check.
+ * @param {String} className Name of the CSS class to check for.
+ * @return {Boolean} Returns true if class name is present, false otherwise.
+ */
+function hasClass(target, className)
+{
+	return target.className.indexOf(className) != -1;
+};
+
+/**
+ * Adds CSS class name to the target DOM element.
+ * @param {DOMElement} target Target DOM element.
+ * @param {String} className New CSS class to add.
+ */
+function addClass(target, className)
+{
+	if (!hasClass(target, className))
+		target.className += ' ' + className;
+};
+
+/**
+ * Removes CSS class name from the target DOM element.
+ * @param {DOMElement} target Target DOM element.
+ * @param {String} className CSS class to remove.
+ */
+function removeClass(target, className)
+{
+	target.className = target.className.replace(className, '');
+};
+
+/**
+ * Converts the source to array object. Mostly used for function arguments and 
+ * lists returned by getElementsByTagName() which aren't Array objects.
+ * @param {List} source Source list.
+ * @return {Array} Returns array.
+ */
+function toArray(source)
+{
+	var result = [];
+	
+	for (var i = 0; i < source.length; i++) 
+		result.push(source[i]);
+		
+	return result;
+};
+
+/**
+ * Splits block of text into lines.
+ * @param {String} block Block of text.
+ * @return {Array} Returns array of lines.
+ */
+function splitLines(block)
+{
+	return block.split('\n');
+}
+
+/**
+ * Generates HTML ID for the highlighter.
+ * @param {String} highlighterId Highlighter ID.
+ * @return {String} Returns HTML ID.
+ */
+function getHighlighterId(id)
+{
+	var prefix = 'highlighter_';
+	return id.indexOf(prefix) == 0 ? id : prefix + id;
+};
+
+/**
+ * Finds Highlighter instance by ID.
+ * @param {String} highlighterId Highlighter ID.
+ * @return {Highlighter} Returns instance of the highlighter.
+ */
+function getHighlighterById(id)
+{
+	return sh.vars.highlighters[getHighlighterId(id)];
+};
+
+/**
+ * Finds highlighter's DIV container.
+ * @param {String} highlighterId Highlighter ID.
+ * @return {Element} Returns highlighter's DIV element.
+ */
+function getHighlighterDivById(id)
+{
+	return document.getElementById(getHighlighterId(id));
+};
+
+/**
+ * Stores highlighter so that getHighlighterById() can do its thing. Each
+ * highlighter must call this method to preserve itself.
+ * @param {Highilghter} highlighter Highlighter instance.
+ */
+function storeHighlighter(highlighter)
+{
+	sh.vars.highlighters[getHighlighterId(highlighter.id)] = highlighter;
+};
+
+/**
+ * Looks for a child or parent node which has specified classname.
+ * Equivalent to jQuery's $(container).find(".className")
+ * @param {Element} target Target element.
+ * @param {String} search Class name or node name to look for.
+ * @param {Boolean} reverse If set to true, will go up the node tree instead of down.
+ * @return {Element} Returns found child or parent element on null.
+ */
+function findElement(target, search, reverse /* optional */)
+{
+	if (target == null)
+		return null;
+		
+	var nodes			= reverse != true ? target.childNodes : [ target.parentNode ],
+		propertyToFind	= { '#' : 'id', '.' : 'className' }[search.substr(0, 1)] || 'nodeName',
+		expectedValue,
+		found
+		;
+
+	expectedValue = propertyToFind != 'nodeName'
+		? search.substr(1)
+		: search.toUpperCase()
+		;
+		
+	// main return of the found node
+	if ((target[propertyToFind] || '').indexOf(expectedValue) != -1)
+		return target;
+	
+	for (var i = 0; nodes && i < nodes.length && found == null; i++)
+		found = findElement(nodes[i], search, reverse);
+	
+	return found;
+};
+
+/**
+ * Looks for a parent node which has specified classname.
+ * This is an alias to <code>findElement(container, className, true)</code>.
+ * @param {Element} target Target element.
+ * @param {String} className Class name to look for.
+ * @return {Element} Returns found parent element on null.
+ */
+function findParentElement(target, className)
+{
+	return findElement(target, className, true);
+};
+
+/**
+ * Finds an index of element in the array.
+ * @ignore
+ * @param {Object} searchElement
+ * @param {Number} fromIndex
+ * @return {Number} Returns index of element if found; -1 otherwise.
+ */
+function indexOf(array, searchElement, fromIndex)
+{
+	fromIndex = Math.max(fromIndex || 0, 0);
+
+	for (var i = fromIndex; i < array.length; i++)
+		if(array[i] == searchElement)
+			return i;
+	
+	return -1;
+};
+
+/**
+ * Generates a unique element ID.
+ */
+function guid(prefix)
+{
+	return (prefix || '') + Math.round(Math.random() * 1000000).toString();
+};
+
+/**
+ * Merges two objects. Values from obj2 override values in obj1.
+ * Function is NOT recursive and works only for one dimensional objects.
+ * @param {Object} obj1 First object.
+ * @param {Object} obj2 Second object.
+ * @return {Object} Returns combination of both objects.
+ */
+function merge(obj1, obj2)
+{
+	var result = {}, name;
+
+	for (name in obj1) 
+		result[name] = obj1[name];
+	
+	for (name in obj2) 
+		result[name] = obj2[name];
+		
+	return result;
+};
+
+/**
+ * Attempts to convert string to boolean.
+ * @param {String} value Input string.
+ * @return {Boolean} Returns true if input was "true", false if input was "false" and value otherwise.
+ */
+function toBoolean(value)
+{
+	var result = { "true" : true, "false" : false }[value];
+	return result == null ? value : result;
+};
+
+/**
+ * Opens up a centered popup window.
+ * @param {String} url		URL to open in the window.
+ * @param {String} name		Popup name.
+ * @param {int} width		Popup width.
+ * @param {int} height		Popup height.
+ * @param {String} options	window.open() options.
+ * @return {Window}			Returns window instance.
+ */
+function popup(url, name, width, height, options)
+{
+	var x = (screen.width - width) / 2,
+		y = (screen.height - height) / 2
+		;
+		
+	options +=	', left=' + x + 
+				', top=' + y +
+				', width=' + width +
+				', height=' + height
+		;
+	options = options.replace(/^,/, '');
+
+	var win = window.open(url, name, options);
+	win.focus();
+	return win;
+};
+
+/**
+ * Adds event handler to the target object.
+ * @param {Object} obj		Target object.
+ * @param {String} type		Name of the event.
+ * @param {Function} func	Handling function.
+ */
+function attachEvent(obj, type, func, scope)
+{
+	function handler(e)
+	{
+		e = e || window.event;
+		
+		if (!e.target)
+		{
+			e.target = e.srcElement;
+			e.preventDefault = function()
+			{
+				this.returnValue = false;
+			};
+		}
+			
+		func.call(scope || window, e);
+	};
+	
+	if (obj.attachEvent) 
+	{
+		obj.attachEvent('on' + type, handler);
+	}
+	else 
+	{
+		obj.addEventListener(type, handler, false);
+	}
+};
+
+/**
+ * Displays an alert.
+ * @param {String} str String to display.
+ */
+function alert(str)
+{
+	window.alert(sh.config.strings.alert + str);
+};
+
+/**
+ * Finds a brush by its alias.
+ *
+ * @param {String} alias		Brush alias.
+ * @param {Boolean} showAlert	Suppresses the alert if false.
+ * @return {Brush}				Returns bursh constructor if found, null otherwise.
+ */
+function findBrush(alias, showAlert)
+{
+	var brushes = sh.vars.discoveredBrushes,
+		result = null
+		;
+	
+	if (brushes == null) 
+	{
+		brushes = {};
+		
+		// Find all brushes
+		for (var brush in sh.brushes) 
+		{
+			var info = sh.brushes[brush],
+				aliases = info.aliases
+				;
+			
+			if (aliases == null) 
+				continue;
+			
+			// keep the brush name
+			info.brushName = brush.toLowerCase();
+			
+			for (var i = 0; i < aliases.length; i++) 
+				brushes[aliases[i]] = brush;
+		}
+		
+		sh.vars.discoveredBrushes = brushes;
+	}
+	
+	result = sh.brushes[brushes[alias]];
+
+	if (result == null && showAlert != false)
+		alert(sh.config.strings.noBrush + alias);
+	
+	return result;
+};
+
+/**
+ * Executes a callback on each line and replaces each line with result from the callback.
+ * @param {Object} str			Input string.
+ * @param {Object} callback		Callback function taking one string argument and returning a string.
+ */
+function eachLine(str, callback)
+{
+	var lines = splitLines(str);
+	
+	for (var i = 0; i < lines.length; i++)
+		lines[i] = callback(lines[i], i);
+		
+	return lines.join('\n');
+};
+
+/**
+ * This is a special trim which only removes first and last empty lines
+ * and doesn't affect valid leading space on the first line.
+ * 
+ * @param {String} str   Input string
+ * @return {String}      Returns string without empty first and last lines.
+ */
+function trimFirstAndLastLines(str)
+{
+	return str.replace(/^[ ]*[\n]+|[\n]*[ ]*$/g, '');
+};
+
+/**
+ * Parses key/value pairs into hash object.
+ * 
+ * Understands the following formats:
+ * - name: word;
+ * - name: [word, word];
+ * - name: "string";
+ * - name: 'string';
+ * 
+ * For example:
+ *   name1: value; name2: [value, value]; name3: 'value'
+ *   
+ * @param {String} str    Input string.
+ * @return {Object}       Returns deserialized object.
+ */
+function parseParams(str)
+{
+	var match, 
+		result = {},
+		arrayRegex = new XRegExp("^\\[(?<values>(.*?))\\]$"),
+		regex = new XRegExp(
+			"(?<name>[\\w-]+)" +
+			"\\s*:\\s*" +
+			"(?<value>" +
+				"[\\w-%#]+|" +		// word
+				"\\[.*?\\]|" +		// [] array
+				'".*?"|' +			// "" string
+				"'.*?'" +			// '' string
+			")\\s*;?",
+			"g"
+		)
+		;
+
+	while ((match = regex.exec(str)) != null) 
+	{
+		var value = match.value
+			.replace(/^['"]|['"]$/g, '') // strip quotes from end of strings
+			;
+		
+		// try to parse array value
+		if (value != null && arrayRegex.test(value))
+		{
+			var m = arrayRegex.exec(value);
+			value = m.values.length > 0 ? m.values.split(/\s*,\s*/) : [];
+		}
+		
+		result[match.name] = value;
+	}
+	
+	return result;
+};
+
+/**
+ * Wraps each line of the string into <code/> tag with given style applied to it.
+ * 
+ * @param {String} str   Input string.
+ * @param {String} css   Style name to apply to the string.
+ * @return {String}      Returns input string with each line surrounded by <span/> tag.
+ */
+function wrapLinesWithCode(str, css)
+{
+	if (str == null || str.length == 0 || str == '\n') 
+		return str;
+
+	str = str.replace(/</g, '&lt;');
+
+	// Replace two or more sequential spaces with &nbsp; leaving last space untouched.
+	str = str.replace(/ {2,}/g, function(m)
+	{
+		var spaces = '';
+		
+		for (var i = 0; i < m.length - 1; i++)
+			spaces += sh.config.space;
+		
+		return spaces + ' ';
+	});
+
+	// Split each line and apply <span class="...">...</span> to them so that
+	// leading spaces aren't included.
+	if (css != null) 
+		str = eachLine(str, function(line)
+		{
+			if (line.length == 0) 
+				return '';
+			
+			var spaces = '';
+			
+			line = line.replace(/^(&nbsp;| )+/, function(s)
+			{
+				spaces = s;
+				return '';
+			});
+			
+			if (line.length == 0) 
+				return spaces;
+			
+			return spaces + '<code class="' + css + '">' + line + '</code>';
+		});
+
+	return str;
+};
+
+/**
+ * Pads number with zeros until it's length is the same as given length.
+ * 
+ * @param {Number} number	Number to pad.
+ * @param {Number} length	Max string length with.
+ * @return {String}			Returns a string padded with proper amount of '0'.
+ */
+function padNumber(number, length)
+{
+	var result = number.toString();
+	
+	while (result.length < length)
+		result = '0' + result;
+	
+	return result;
+};
+
+/**
+ * Replaces tabs with spaces.
+ * 
+ * @param {String} code		Source code.
+ * @param {Number} tabSize	Size of the tab.
+ * @return {String}			Returns code with all tabs replaces by spaces.
+ */
+function processTabs(code, tabSize)
+{
+	var tab = '';
+	
+	for (var i = 0; i < tabSize; i++)
+		tab += ' ';
+
+	return code.replace(/\t/g, tab);
+};
+
+/**
+ * Replaces tabs with smart spaces.
+ * 
+ * @param {String} code    Code to fix the tabs in.
+ * @param {Number} tabSize Number of spaces in a column.
+ * @return {String}        Returns code with all tabs replaces with roper amount of spaces.
+ */
+function processSmartTabs(code, tabSize)
+{
+	var lines = splitLines(code),
+		tab = '\t',
+		spaces = ''
+		;
+	
+	// Create a string with 1000 spaces to copy spaces from... 
+	// It's assumed that there would be no indentation longer than that.
+	for (var i = 0; i < 50; i++) 
+		spaces += '                    '; // 20 spaces * 50
+			
+	// This function inserts specified amount of spaces in the string
+	// where a tab is while removing that given tab.
+	function insertSpaces(line, pos, count)
+	{
+		return line.substr(0, pos)
+			+ spaces.substr(0, count)
+			+ line.substr(pos + 1, line.length) // pos + 1 will get rid of the tab
+			;
+	};
+
+	// Go through all the lines and do the 'smart tabs' magic.
+	code = eachLine(code, function(line)
+	{
+		if (line.indexOf(tab) == -1) 
+			return line;
+		
+		var pos = 0;
+		
+		while ((pos = line.indexOf(tab)) != -1) 
+		{
+			// This is pretty much all there is to the 'smart tabs' logic.
+			// Based on the position within the line and size of a tab,
+			// calculate the amount of spaces we need to insert.
+			var spaces = tabSize - pos % tabSize;
+			line = insertSpaces(line, pos, spaces);
+		}
+		
+		return line;
+	});
+	
+	return code;
+};
+
+/**
+ * Performs various string fixes based on configuration.
+ */
+function fixInputString(str)
+{
+	var br = /<br\s*\/?>|&lt;br\s*\/?&gt;/gi;
+	
+	if (sh.config.bloggerMode == true)
+		str = str.replace(br, '\n');
+
+	if (sh.config.stripBrs == true)
+		str = str.replace(br, '');
+		
+	return str;
+};
+
+/**
+ * Removes all white space at the begining and end of a string.
+ * 
+ * @param {String} str   String to trim.
+ * @return {String}      Returns string without leading and following white space characters.
+ */
+function trim(str)
+{
+	return str.replace(/^\s+|\s+$/g, '');
+};
+
+/**
+ * Unindents a block of text by the lowest common indent amount.
+ * @param {String} str   Text to unindent.
+ * @return {String}      Returns unindented text block.
+ */
+function unindent(str)
+{
+	var lines = splitLines(fixInputString(str)),
+		indents = new Array(),
+		regex = /^\s*/,
+		min = 1000
+		;
+	
+	// go through every line and check for common number of indents
+	for (var i = 0; i < lines.length && min > 0; i++) 
+	{
+		var line = lines[i];
+		
+		if (trim(line).length == 0) 
+			continue;
+		
+		var matches = regex.exec(line);
+		
+		// In the event that just one line doesn't have leading white space
+		// we can't unindent anything, so bail completely.
+		if (matches == null) 
+			return str;
+			
+		min = Math.min(matches[0].length, min);
+	}
+	
+	// trim minimum common number of white space from the begining of every line
+	if (min > 0) 
+		for (var i = 0; i < lines.length; i++) 
+			lines[i] = lines[i].substr(min);
+	
+	return lines.join('\n');
+};
+
+/**
+ * Callback method for Array.sort() which sorts matches by
+ * index position and then by length.
+ * 
+ * @param {Match} m1	Left object.
+ * @param {Match} m2    Right object.
+ * @return {Number}     Returns -1, 0 or -1 as a comparison result.
+ */
+function matchesSortCallback(m1, m2)
+{
+	// sort matches by index first
+	if(m1.index < m2.index)
+		return -1;
+	else if(m1.index > m2.index)
+		return 1;
+	else
+	{
+		// if index is the same, sort by length
+		if(m1.length < m2.length)
+			return -1;
+		else if(m1.length > m2.length)
+			return 1;
+	}
+	
+	return 0;
+};
+
+/**
+ * Executes given regular expression on provided code and returns all
+ * matches that are found.
+ * 
+ * @param {String} code    Code to execute regular expression on.
+ * @param {Object} regex   Regular expression item info from <code>regexList</code> collection.
+ * @return {Array}         Returns a list of Match objects.
+ */ 
+function getMatches(code, regexInfo)
+{
+	function defaultAdd(match, regexInfo)
+	{
+		return match[0];
+	};
+	
+	var index = 0,
+		match = null,
+		matches = [],
+		func = regexInfo.func ? regexInfo.func : defaultAdd
+		;
+	
+	while((match = regexInfo.regex.exec(code)) != null)
+	{
+		var resultMatch = func(match, regexInfo);
+		
+		if (typeof(resultMatch) == 'string')
+			resultMatch = [new sh.Match(resultMatch, match.index, regexInfo.css)];
+
+		matches = matches.concat(resultMatch);
+	}
+	
+	return matches;
+};
+
+/**
+ * Turns all URLs in the code into <a/> tags.
+ * @param {String} code Input code.
+ * @return {String} Returns code with </a> tags.
+ */
+function processUrls(code)
+{
+	var gt = /(.*)((&gt;|&lt;).*)/;
+	
+	return code.replace(sh.regexLib.url, function(m)
+	{
+		var suffix = '',
+			match = null
+			;
+		
+		// We include &lt; and &gt; in the URL for the common cases like <http://google.com>
+		// The problem is that they get transformed into &lt;http://google.com&gt;
+		// Where as &gt; easily looks like part of the URL string.
+	
+		if (match = gt.exec(m))
+		{
+			m = match[1];
+			suffix = match[2];
+		}
+		
+		return '<a href="' + m + '">' + m + '</a>' + suffix;
+	});
+};
+
+/**
+ * Finds all <SCRIPT TYPE="syntaxhighlighter" /> elementss.
+ * @return {Array} Returns array of all found SyntaxHighlighter tags.
+ */
+function getSyntaxHighlighterScriptTags()
+{
+	var tags = document.getElementsByTagName('script'),
+		result = []
+		;
+	
+	for (var i = 0; i < tags.length; i++)
+		if (tags[i].type == 'syntaxhighlighter')
+			result.push(tags[i]);
+			
+	return result;
+};
+
+/**
+ * Strips <![CDATA[]]> from <SCRIPT /> content because it should be used
+ * there in most cases for XHTML compliance.
+ * @param {String} original	Input code.
+ * @return {String} Returns code without leading <![CDATA[]]> tags.
+ */
+function stripCData(original)
+{
+	var left = '<![CDATA[',
+		right = ']]>',
+		// for some reason IE inserts some leading blanks here
+		copy = trim(original),
+		changed = false,
+		leftLength = left.length,
+		rightLength = right.length
+		;
+	
+	if (copy.indexOf(left) == 0)
+	{
+		copy = copy.substring(leftLength);
+		changed = true;
+	}
+	
+	var copyLength = copy.length;
+	
+	if (copy.indexOf(right) == copyLength - rightLength)
+	{
+		copy = copy.substring(0, copyLength - rightLength);
+		changed = true;
+	}
+	
+	return changed ? copy : original;
+};
+
+
+/**
+ * Quick code mouse double click handler.
+ */
+function quickCodeHandler(e)
+{
+	var target = e.target,
+		highlighterDiv = findParentElement(target, '.syntaxhighlighter'),
+		container = findParentElement(target, '.container'),
+		textarea = document.createElement('textarea'),
+		highlighter
+		;
+
+	if (!container || !highlighterDiv || findElement(container, 'textarea'))
+		return;
+
+	highlighter = getHighlighterById(highlighterDiv.id);
+	
+	// add source class name
+	addClass(highlighterDiv, 'source');
+
+	// Have to go over each line and grab it's text, can't just do it on the
+	// container because Firefox loses all \n where as Webkit doesn't.
+	var lines = container.childNodes,
+		code = []
+		;
+	
+	for (var i = 0; i < lines.length; i++)
+		code.push(lines[i].innerText || lines[i].textContent);
+	
+	// using \r instead of \r or \r\n makes this work equally well on IE, FF and Webkit
+	code = code.join('\r');
+	
+	// inject <textarea/> tag
+	textarea.appendChild(document.createTextNode(code));
+	container.appendChild(textarea);
+	
+	// preselect all text
+	textarea.focus();
+	textarea.select();
+	
+	// set up handler for lost focus
+	attachEvent(textarea, 'blur', function(e)
+	{
+		textarea.parentNode.removeChild(textarea);
+		removeClass(highlighterDiv, 'source');
+	});
+};
+
+/**
+ * Match object.
+ */
+sh.Match = function(value, index, css)
+{
+	this.value = value;
+	this.index = index;
+	this.length = value.length;
+	this.css = css;
+	this.brushName = null;
+};
+
+sh.Match.prototype.toString = function()
+{
+	return this.value;
+};
+
+/**
+ * Simulates HTML code with a scripting language embedded.
+ * 
+ * @param {String} scriptBrushName Brush name of the scripting language.
+ */
+sh.HtmlScript = function(scriptBrushName)
+{
+	var brushClass = findBrush(scriptBrushName),
+		scriptBrush,
+		xmlBrush = new sh.brushes.Xml(),
+		bracketsRegex = null,
+		ref = this,
+		methodsToExpose = 'getDiv getHtml init'.split(' ')
+		;
+
+	if (brushClass == null)
+		return;
+	
+	scriptBrush = new brushClass();
+	
+	for(var i = 0; i < methodsToExpose.length; i++)
+		// make a closure so we don't lose the name after i changes
+		(function() {
+			var name = methodsToExpose[i];
+			
+			ref[name] = function()
+			{
+				return xmlBrush[name].apply(xmlBrush, arguments);
+			};
+		})();
+	
+	if (scriptBrush.htmlScript == null)
+	{
+		alert(sh.config.strings.brushNotHtmlScript + scriptBrushName);
+		return;
+	}
+	
+	xmlBrush.regexList.push(
+		{ regex: scriptBrush.htmlScript.code, func: process }
+	);
+	
+	function offsetMatches(matches, offset)
+	{
+		for (var j = 0; j < matches.length; j++) 
+			matches[j].index += offset;
+	}
+	
+	function process(match, info)
+	{
+		var code = match.code,
+			matches = [],
+			regexList = scriptBrush.regexList,
+			offset = match.index + match.left.length,
+			htmlScript = scriptBrush.htmlScript,
+			result
+			;
+
+		// add all matches from the code
+		for (var i = 0; i < regexList.length; i++)
+		{
+			result = getMatches(code, regexList[i]);
+			offsetMatches(result, offset);
+			matches = matches.concat(result);
+		}
+		
+		// add left script bracket
+		if (htmlScript.left != null && match.left != null)
+		{
+			result = getMatches(match.left, htmlScript.left);
+			offsetMatches(result, match.index);
+			matches = matches.concat(result);
+		}
+		
+		// add right script bracket
+		if (htmlScript.right != null && match.right != null)
+		{
+			result = getMatches(match.right, htmlScript.right);
+			offsetMatches(result, match.index + match[0].lastIndexOf(match.right));
+			matches = matches.concat(result);
+		}
+		
+		for (var j = 0; j < matches.length; j++)
+			matches[j].brushName = brushClass.brushName;
+			
+		return matches;
+	}
+};
+
+/**
+ * Main Highlither class.
+ * @constructor
+ */
+sh.Highlighter = function()
+{
+	// not putting any code in here because of the prototype inheritance
+};
+
+sh.Highlighter.prototype = {
+	/**
+	 * Returns value of the parameter passed to the highlighter.
+	 * @param {String} name				Name of the parameter.
+	 * @param {Object} defaultValue		Default value.
+	 * @return {Object}					Returns found value or default value otherwise.
+	 */
+	getParam: function(name, defaultValue)
+	{
+		var result = this.params[name];
+		return toBoolean(result == null ? defaultValue : result);
+	},
+	
+	/**
+	 * Shortcut to document.createElement().
+	 * @param {String} name		Name of the element to create (DIV, A, etc).
+	 * @return {HTMLElement}	Returns new HTML element.
+	 */
+	create: function(name)
+	{
+		return document.createElement(name);
+	},
+	
+	/**
+	 * Applies all regular expression to the code and stores all found
+	 * matches in the `this.matches` array.
+	 * @param {Array} regexList		List of regular expressions.
+	 * @param {String} code			Source code.
+	 * @return {Array}				Returns list of matches.
+	 */
+	findMatches: function(regexList, code)
+	{
+		var result = [];
+		
+		if (regexList != null)
+			for (var i = 0; i < regexList.length; i++) 
+				// BUG: length returns len+1 for array if methods added to prototype chain (oising@gmail.com)
+				if (typeof (regexList[i]) == "object")
+					result = result.concat(getMatches(code, regexList[i]));
+		
+		// sort and remove nested the matches
+		return this.removeNestedMatches(result.sort(matchesSortCallback));
+	},
+	
+	/**
+	 * Checks to see if any of the matches are inside of other matches. 
+	 * This process would get rid of highligted strings inside comments, 
+	 * keywords inside strings and so on.
+	 */
+	removeNestedMatches: function(matches)
+	{
+		// Optimized by Jose Prado (http://joseprado.com)
+		for (var i = 0; i < matches.length; i++) 
+		{ 
+			if (matches[i] === null)
+				continue;
+			
+			var itemI = matches[i],
+				itemIEndPos = itemI.index + itemI.length
+				;
+			
+			for (var j = i + 1; j < matches.length && matches[i] !== null; j++) 
+			{
+				var itemJ = matches[j];
+				
+				if (itemJ === null) 
+					continue;
+				else if (itemJ.index > itemIEndPos) 
+					break;
+				else if (itemJ.index == itemI.index && itemJ.length > itemI.length)
+					matches[i] = null;
+				else if (itemJ.index >= itemI.index && itemJ.index < itemIEndPos) 
+					matches[j] = null;
+			}
+		}
+		
+		return matches;
+	},
+	
+	/**
+	 * Creates an array containing integer line numbers starting from the 'first-line' param.
+	 * @return {Array} Returns array of integers.
+	 */
+	figureOutLineNumbers: function(code)
+	{
+		var lines = [],
+			firstLine = parseInt(this.getParam('first-line'))
+			;
+		
+		eachLine(code, function(line, index)
+		{
+			lines.push(index + firstLine);
+		});
+		
+		return lines;
+	},
+	
+	/**
+	 * Determines if specified line number is in the highlighted list.
+	 */
+	isLineHighlighted: function(lineNumber)
+	{
+		var list = this.getParam('highlight', []);
+		
+		if (typeof(list) != 'object' && list.push == null) 
+			list = [ list ];
+		
+		return indexOf(list, lineNumber.toString()) != -1;
+	},
+	
+	/**
+	 * Generates HTML markup for a single line of code while determining alternating line style.
+	 * @param {Integer} lineNumber	Line number.
+	 * @param {String} code Line	HTML markup.
+	 * @return {String}				Returns HTML markup.
+	 */
+	getLineHtml: function(lineIndex, lineNumber, code)
+	{
+		var classes = [
+			'line',
+			'number' + lineNumber,
+			'index' + lineIndex,
+			'alt' + (lineNumber % 2 == 0 ? 1 : 2).toString()
+		];
+		
+		if (this.isLineHighlighted(lineNumber))
+		 	classes.push('highlighted');
+		
+		if (lineNumber == 0)
+			classes.push('break');
+			
+		return '<div class="' + classes.join(' ') + '">' + code + '</div>';
+	},
+	
+	/**
+	 * Generates HTML markup for line number column.
+	 * @param {String} code			Complete code HTML markup.
+	 * @param {Array} lineNumbers	Calculated line numbers.
+	 * @return {String}				Returns HTML markup.
+	 */
+	getLineNumbersHtml: function(code, lineNumbers)
+	{
+		var html = '',
+			count = splitLines(code).length,
+			firstLine = parseInt(this.getParam('first-line')),
+			pad = this.getParam('pad-line-numbers')
+			;
+		
+		if (pad == true)
+			pad = (firstLine + count - 1).toString().length;
+		else if (isNaN(pad) == true)
+			pad = 0;
+			
+		for (var i = 0; i < count; i++)
+		{
+			var lineNumber = lineNumbers ? lineNumbers[i] : firstLine + i,
+				code = lineNumber == 0 ? sh.config.space : padNumber(lineNumber, pad)
+				;
+				
+			html += this.getLineHtml(i, lineNumber, code);
+		}
+		
+		return html;
+	},
+	
+	/**
+	 * Splits block of text into individual DIV lines.
+	 * @param {String} code			Code to highlight.
+	 * @param {Array} lineNumbers	Calculated line numbers.
+	 * @return {String}				Returns highlighted code in HTML form.
+	 */
+	getCodeLinesHtml: function(html, lineNumbers)
+	{
+		html = trim(html);
+		
+		var lines = splitLines(html),
+			padLength = this.getParam('pad-line-numbers'),
+			firstLine = parseInt(this.getParam('first-line')),
+			html = '',
+			brushName = this.getParam('brush')
+			;
+
+		for (var i = 0; i < lines.length; i++)
+		{
+			var line = lines[i],
+				indent = /^(&nbsp;|\s)+/.exec(line),
+				spaces = null,
+				lineNumber = lineNumbers ? lineNumbers[i] : firstLine + i;
+				;
+
+			if (indent != null)
+			{
+				spaces = indent[0].toString();
+				line = line.substr(spaces.length);
+				spaces = spaces.replace(' ', sh.config.space);
+			}
+
+			line = trim(line);
+			
+			if (line.length == 0)
+				line = sh.config.space;
+			
+			html += this.getLineHtml(
+				i,
+				lineNumber, 
+				(spaces != null ? '<code class="' + brushName + ' spaces">' + spaces + '</code>' : '') + line
+			);
+		}
+		
+		return html;
+	},
+	
+	/**
+	 * Returns HTML for the table title or empty string if title is null.
+	 */
+	getTitleHtml: function(title)
+	{
+		return title ? '<caption>' + title + '</caption>' : '';
+	},
+	
+	/**
+	 * Finds all matches in the source code.
+	 * @param {String} code		Source code to process matches in.
+	 * @param {Array} matches	Discovered regex matches.
+	 * @return {String} Returns formatted HTML with processed mathes.
+	 */
+	getMatchesHtml: function(code, matches)
+	{
+		var pos = 0, 
+			result = '',
+			brushName = this.getParam('brush', '')
+			;
+		
+		function getBrushNameCss(match)
+		{
+			var result = match ? (match.brushName || brushName) : brushName;
+			return result ? result + ' ' : '';
+		};
+		
+		// Finally, go through the final list of matches and pull the all
+		// together adding everything in between that isn't a match.
+		for (var i = 0; i < matches.length; i++) 
+		{
+			var match = matches[i],
+				matchBrushName
+				;
+			
+			if (match === null || match.length === 0) 
+				continue;
+			
+			matchBrushName = getBrushNameCss(match);
+			
+			result += wrapLinesWithCode(code.substr(pos, match.index - pos), matchBrushName + 'plain')
+					+ wrapLinesWithCode(match.value, matchBrushName + match.css)
+					;
+
+			pos = match.index + match.length + (match.offset || 0);
+		}
+
+		// don't forget to add whatever's remaining in the string
+		result += wrapLinesWithCode(code.substr(pos), getBrushNameCss() + 'plain');
+
+		return result;
+	},
+	
+	/**
+	 * Generates HTML markup for the whole syntax highlighter.
+	 * @param {String} code Source code.
+	 * @return {String} Returns HTML markup.
+	 */
+	getHtml: function(code)
+	{
+		var html = '',
+			classes = [ 'syntaxhighlighter' ],
+			tabSize,
+			matches,
+			lineNumbers
+			;
+		
+		// process light mode
+		if (this.getParam('light') == true)
+			this.params.toolbar = this.params.gutter = false;
+
+		className = 'syntaxhighlighter';
+
+		if (this.getParam('collapse') == true)
+			classes.push('collapsed');
+		
+		if ((gutter = this.getParam('gutter')) == false)
+			classes.push('nogutter');
+
+		// add custom user style name
+		classes.push(this.getParam('class-name'));
+
+		// add brush alias to the class name for custom CSS
+		classes.push(this.getParam('brush'));
+
+		code = trimFirstAndLastLines(code)
+			.replace(/\r/g, ' ') // IE lets these buggers through
+			;
+
+		tabSize = this.getParam('tab-size');
+
+		// replace tabs with spaces
+		code = this.getParam('smart-tabs') == true
+			? processSmartTabs(code, tabSize)
+			: processTabs(code, tabSize)
+			;
+
+		// unindent code by the common indentation
+		code = unindent(code);
+
+		if (gutter)
+			lineNumbers = this.figureOutLineNumbers(code);
+		
+		// find matches in the code using brushes regex list
+		matches = this.findMatches(this.regexList, code);
+		// processes found matches into the html
+		html = this.getMatchesHtml(code, matches);
+		// finally, split all lines so that they wrap well
+		html = this.getCodeLinesHtml(html, lineNumbers);
+
+		// finally, process the links
+		if (this.getParam('auto-links'))
+			html = processUrls(html);
+		
+		if (typeof(navigator) != 'undefined' && navigator.userAgent && navigator.userAgent.match(/MSIE/))
+			classes.push('ie');
+		
+		html = 
+			'<div id="' + getHighlighterId(this.id) + '" class="' + classes.join(' ') + '">'
+				+ (this.getParam('toolbar') ? sh.toolbar.getHtml(this) : '')
+				+ '<table border="0" cellpadding="0" cellspacing="0">'
+					+ this.getTitleHtml(this.getParam('title'))
+					+ '<tbody>'
+						+ '<tr>'
+							+ (gutter ? '<td class="gutter">' + this.getLineNumbersHtml(code) + '</td>' : '')
+							+ '<td class="code">'
+								+ '<div class="container">'
+									+ html
+								+ '</div>'
+							+ '</td>'
+						+ '</tr>'
+					+ '</tbody>'
+				+ '</table>'
+			+ '</div>'
+			;
+			
+		return html;
+	},
+	
+	/**
+	 * Highlights the code and returns complete HTML.
+	 * @param {String} code     Code to highlight.
+	 * @return {Element}        Returns container DIV element with all markup.
+	 */
+	getDiv: function(code)
+	{
+		if (code === null) 
+			code = '';
+		
+		this.code = code;
+
+		var div = this.create('div');
+
+		// create main HTML
+		div.innerHTML = this.getHtml(code);
+		
+		// set up click handlers
+		if (this.getParam('toolbar'))
+			attachEvent(findElement(div, '.toolbar'), 'click', sh.toolbar.handler);
+		
+		if (this.getParam('quick-code'))
+			attachEvent(findElement(div, '.code'), 'dblclick', quickCodeHandler);
+		
+		return div;
+	},
+	
+	/**
+	 * Initializes the highlighter/brush.
+	 *
+	 * Constructor isn't used for initialization so that nothing executes during necessary
+	 * `new SyntaxHighlighter.Highlighter()` call when setting up brush inheritence.
+	 *
+	 * @param {Hash} params Highlighter parameters.
+	 */
+	init: function(params)
+	{
+		this.id = guid();
+		
+		// register this instance in the highlighters list
+		storeHighlighter(this);
+		
+		// local params take precedence over defaults
+		this.params = merge(sh.defaults, params || {})
+		
+		// process light mode
+		if (this.getParam('light') == true)
+			this.params.toolbar = this.params.gutter = false;
+	},
+	
+	/**
+	 * Converts space separated list of keywords into a regular expression string.
+	 * @param {String} str    Space separated keywords.
+	 * @return {String}       Returns regular expression string.
+	 */
+	getKeywords: function(str)
+	{
+		str = str
+			.replace(/^\s+|\s+$/g, '')
+			.replace(/\s+/g, '|')
+			;
+		
+		return '\\b(?:' + str + ')\\b';
+	},
+	
+	/**
+	 * Makes a brush compatible with the `html-script` functionality.
+	 * @param {Object} regexGroup Object containing `left` and `right` regular expressions.
+	 */
+	forHtmlScript: function(regexGroup)
+	{
+		this.htmlScript = {
+			left : { regex: regexGroup.left, css: 'script' },
+			right : { regex: regexGroup.right, css: 'script' },
+			code : new XRegExp(
+				"(?<left>" + regexGroup.left.source + ")" +
+				"(?<code>.*?)" +
+				"(?<right>" + regexGroup.right.source + ")",
+				"sgi"
+				)
+		};
+	}
+}; // end of Highlighter
+
+return sh;
+}(); // end of anonymous function
+
+// CommonJS
+typeof(exports) != 'undefined' ? exports['SyntaxHighlighter'] = SyntaxHighlighter : null;
diff --git a/bin/shThemeDefault.css b/bin/shThemeDefault.css
new file mode 100644
index 0000000..1365411
--- /dev/null
+++ b/bin/shThemeDefault.css
@@ -0,0 +1,117 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter {
+  background-color: white !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: white !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: white !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #e0e0e0 !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: black !important;
+}
+.syntaxhighlighter table caption {
+  color: black !important;
+}
+.syntaxhighlighter .gutter {
+  color: #afafaf !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #6ce26c !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #6ce26c !important;
+  color: white !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: blue !important;
+  background: white !important;
+  border: 1px solid #6ce26c !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: blue !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: red !important;
+}
+.syntaxhighlighter .toolbar {
+  color: white !important;
+  background: #6ce26c !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: black !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: black !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #008200 !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: blue !important;
+}
+.syntaxhighlighter .keyword {
+  color: #006699 !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: gray !important;
+}
+.syntaxhighlighter .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #006699 !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: red !important;
+}
+
+.syntaxhighlighter .keyword {
+  font-weight: bold !important;
+}
diff --git a/bin/shThemeDjango.css b/bin/shThemeDjango.css
new file mode 100644
index 0000000..d8b4313
--- /dev/null
+++ b/bin/shThemeDjango.css
@@ -0,0 +1,120 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter {
+  background-color: #0a2b1d !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: #0a2b1d !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: #0a2b1d !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #233729 !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: white !important;
+}
+.syntaxhighlighter table caption {
+  color: #f8f8f8 !important;
+}
+.syntaxhighlighter .gutter {
+  color: #497958 !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #41a83e !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #41a83e !important;
+  color: #0a2b1d !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #96dd3b !important;
+  background: black !important;
+  border: 1px solid #41a83e !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #96dd3b !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar {
+  color: white !important;
+  background: #41a83e !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: #ffe862 !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: #f8f8f8 !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #336442 !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: #9df39f !important;
+}
+.syntaxhighlighter .keyword {
+  color: #96dd3b !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #91bb9e !important;
+}
+.syntaxhighlighter .variable {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .value {
+  color: #f7e741 !important;
+}
+.syntaxhighlighter .functions {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .constants {
+  color: #e0e8ff !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #96dd3b !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: #eb939a !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: #91bb9e !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: #edef7d !important;
+}
+
+.syntaxhighlighter .comments {
+  font-style: italic !important;
+}
+.syntaxhighlighter .keyword {
+  font-weight: bold !important;
+}
diff --git a/bin/shThemeEclipse.css b/bin/shThemeEclipse.css
new file mode 100644
index 0000000..77377d9
--- /dev/null
+++ b/bin/shThemeEclipse.css
@@ -0,0 +1,128 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter {
+  background-color: white !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: white !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: white !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #c3defe !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: white !important;
+}
+.syntaxhighlighter table caption {
+  color: black !important;
+}
+.syntaxhighlighter .gutter {
+  color: #787878 !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #d4d0c8 !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #d4d0c8 !important;
+  color: white !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #3f5fbf !important;
+  background: white !important;
+  border: 1px solid #d4d0c8 !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #3f5fbf !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter .toolbar {
+  color: #a0a0a0 !important;
+  background: #d4d0c8 !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: #a0a0a0 !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: red !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: black !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #3f5fbf !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: #2a00ff !important;
+}
+.syntaxhighlighter .keyword {
+  color: #7f0055 !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #646464 !important;
+}
+.syntaxhighlighter .variable {
+  color: #aa7700 !important;
+}
+.syntaxhighlighter .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter .functions {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter .constants {
+  color: #0066cc !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #7f0055 !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: gray !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: #ff1493 !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: red !important;
+}
+
+.syntaxhighlighter .keyword {
+  font-weight: bold !important;
+}
+.syntaxhighlighter .xml .keyword {
+  color: #3f7f7f !important;
+  font-weight: normal !important;
+}
+.syntaxhighlighter .xml .color1, .syntaxhighlighter .xml .color1 a {
+  color: #7f007f !important;
+}
+.syntaxhighlighter .xml .string {
+  font-style: italic !important;
+  color: #2a00ff !important;
+}
diff --git a/bin/shThemeEmacs.css b/bin/shThemeEmacs.css
new file mode 100644
index 0000000..dae5053
--- /dev/null
+++ b/bin/shThemeEmacs.css
@@ -0,0 +1,113 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter {
+  background-color: black !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: black !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: black !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #2a3133 !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: white !important;
+}
+.syntaxhighlighter table caption {
+  color: #d3d3d3 !important;
+}
+.syntaxhighlighter .gutter {
+  color: #d3d3d3 !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #990000 !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #990000 !important;
+  color: black !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #ebdb8d !important;
+  background: black !important;
+  border: 1px solid #990000 !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #ebdb8d !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: #ff7d27 !important;
+}
+.syntaxhighlighter .toolbar {
+  color: white !important;
+  background: #990000 !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: #9ccff4 !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: #d3d3d3 !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #ff7d27 !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: #ff9e7b !important;
+}
+.syntaxhighlighter .keyword {
+  color: aqua !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #aec4de !important;
+}
+.syntaxhighlighter .variable {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter .functions {
+  color: #81cef9 !important;
+}
+.syntaxhighlighter .constants {
+  color: #ff9e7b !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: aqua !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: #ebdb8d !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: #ff7d27 !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: #aec4de !important;
+}
diff --git a/bin/shThemeFadeToGrey.css b/bin/shThemeFadeToGrey.css
new file mode 100644
index 0000000..8fbd871
--- /dev/null
+++ b/bin/shThemeFadeToGrey.css
@@ -0,0 +1,117 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter {
+  background-color: #121212 !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: #121212 !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: #121212 !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #2c2c29 !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: white !important;
+}
+.syntaxhighlighter table caption {
+  color: white !important;
+}
+.syntaxhighlighter .gutter {
+  color: #afafaf !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #3185b9 !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #3185b9 !important;
+  color: #121212 !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #3185b9 !important;
+  background: black !important;
+  border: 1px solid #3185b9 !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #3185b9 !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: #d01d33 !important;
+}
+.syntaxhighlighter .toolbar {
+  color: white !important;
+  background: #3185b9 !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: #96daff !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: white !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #696854 !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: #e3e658 !important;
+}
+.syntaxhighlighter .keyword {
+  color: #d01d33 !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #435a5f !important;
+}
+.syntaxhighlighter .variable {
+  color: #898989 !important;
+}
+.syntaxhighlighter .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter .functions {
+  color: #aaaaaa !important;
+}
+.syntaxhighlighter .constants {
+  color: #96daff !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #d01d33 !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: #ffc074 !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: #4a8cdb !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: #96daff !important;
+}
+
+.syntaxhighlighter .functions {
+  font-weight: bold !important;
+}
diff --git a/bin/shThemeMDUltra.css b/bin/shThemeMDUltra.css
new file mode 100644
index 0000000..f4db39c
--- /dev/null
+++ b/bin/shThemeMDUltra.css
@@ -0,0 +1,113 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter {
+  background-color: #222222 !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: #222222 !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: #222222 !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #253e5a !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: white !important;
+}
+.syntaxhighlighter table caption {
+  color: lime !important;
+}
+.syntaxhighlighter .gutter {
+  color: #38566f !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #435a5f !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #435a5f !important;
+  color: #222222 !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #428bdd !important;
+  background: black !important;
+  border: 1px solid #435a5f !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #428bdd !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: lime !important;
+}
+.syntaxhighlighter .toolbar {
+  color: #aaaaff !important;
+  background: #435a5f !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: #aaaaff !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: #9ccff4 !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: lime !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #428bdd !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: lime !important;
+}
+.syntaxhighlighter .keyword {
+  color: #aaaaff !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #8aa6c1 !important;
+}
+.syntaxhighlighter .variable {
+  color: aqua !important;
+}
+.syntaxhighlighter .value {
+  color: #f7e741 !important;
+}
+.syntaxhighlighter .functions {
+  color: #ff8000 !important;
+}
+.syntaxhighlighter .constants {
+  color: yellow !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #aaaaff !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: red !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: yellow !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: #ffaa3e !important;
+}
diff --git a/bin/shThemeMidnight.css b/bin/shThemeMidnight.css
new file mode 100644
index 0000000..c49563c
--- /dev/null
+++ b/bin/shThemeMidnight.css
@@ -0,0 +1,113 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter {
+  background-color: #0f192a !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: #0f192a !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: #0f192a !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #253e5a !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: #38566f !important;
+}
+.syntaxhighlighter table caption {
+  color: #d1edff !important;
+}
+.syntaxhighlighter .gutter {
+  color: #afafaf !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #435a5f !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #435a5f !important;
+  color: #0f192a !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #428bdd !important;
+  background: black !important;
+  border: 1px solid #435a5f !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #428bdd !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: #1dc116 !important;
+}
+.syntaxhighlighter .toolbar {
+  color: #d1edff !important;
+  background: #435a5f !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: #d1edff !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: #8aa6c1 !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: #d1edff !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #428bdd !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: #1dc116 !important;
+}
+.syntaxhighlighter .keyword {
+  color: #b43d3d !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #8aa6c1 !important;
+}
+.syntaxhighlighter .variable {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .value {
+  color: #f7e741 !important;
+}
+.syntaxhighlighter .functions {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .constants {
+  color: #e0e8ff !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #b43d3d !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: #f8bb00 !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: white !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: #ffaa3e !important;
+}
diff --git a/bin/shThemeRDark.css b/bin/shThemeRDark.css
new file mode 100644
index 0000000..6305a10
--- /dev/null
+++ b/bin/shThemeRDark.css
@@ -0,0 +1,113 @@
+/**
+ * SyntaxHighlighter
+ * http://alexgorbatchev.com/SyntaxHighlighter
+ *
+ * SyntaxHighlighter is donationware. If you are using it, please donate.
+ * http://alexgorbatchev.com/SyntaxHighlighter/donate.html
+ *
+ * @version
+ * 3.0.83 (July 02 2010)
+ * 
+ * @copyright
+ * Copyright (C) 2004-2010 Alex Gorbatchev.
+ *
+ * @license
+ * Dual licensed under the MIT and GPL licenses.
+ */
+.syntaxhighlighter {
+  background-color: #1b2426 !important;
+}
+.syntaxhighlighter .line.alt1 {
+  background-color: #1b2426 !important;
+}
+.syntaxhighlighter .line.alt2 {
+  background-color: #1b2426 !important;
+}
+.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
+  background-color: #323e41 !important;
+}
+.syntaxhighlighter .line.highlighted.number {
+  color: #b9bdb6 !important;
+}
+.syntaxhighlighter table caption {
+  color: #b9bdb6 !important;
+}
+.syntaxhighlighter .gutter {
+  color: #afafaf !important;
+}
+.syntaxhighlighter .gutter .line {
+  border-right: 3px solid #435a5f !important;
+}
+.syntaxhighlighter .gutter .line.highlighted {
+  background-color: #435a5f !important;
+  color: #1b2426 !important;
+}
+.syntaxhighlighter.printing .line .content {
+  border: none !important;
+}
+.syntaxhighlighter.collapsed {
+  overflow: visible !important;
+}
+.syntaxhighlighter.collapsed .toolbar {
+  color: #5ba1cf !important;
+  background: black !important;
+  border: 1px solid #435a5f !important;
+}
+.syntaxhighlighter.collapsed .toolbar a {
+  color: #5ba1cf !important;
+}
+.syntaxhighlighter.collapsed .toolbar a:hover {
+  color: #5ce638 !important;
+}
+.syntaxhighlighter .toolbar {
+  color: white !important;
+  background: #435a5f !important;
+  border: none !important;
+}
+.syntaxhighlighter .toolbar a {
+  color: white !important;
+}
+.syntaxhighlighter .toolbar a:hover {
+  color: #e0e8ff !important;
+}
+.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
+  color: #b9bdb6 !important;
+}
+.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
+  color: #878a85 !important;
+}
+.syntaxhighlighter .string, .syntaxhighlighter .string a {
+  color: #5ce638 !important;
+}
+.syntaxhighlighter .keyword {
+  color: #5ba1cf !important;
+}
+.syntaxhighlighter .preprocessor {
+  color: #435a5f !important;
+}
+.syntaxhighlighter .variable {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .value {
+  color: #009900 !important;
+}
+.syntaxhighlighter .functions {
+  color: #ffaa3e !important;
+}
+.syntaxhighlighter .constants {
+  color: #e0e8ff !important;
+}
+.syntaxhighlighter .script {
+  font-weight: bold !important;
+  color: #5ba1cf !important;
+  background-color: none !important;
+}
+.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
+  color: #e0e8ff !important;
+}
+.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
+  color: white !important;
+}
+.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
+  color: #ffaa3e !important;
+}
diff --git a/edit.php b/edit.php
index 1f35edd..52e175d 100644
--- a/edit.php
+++ b/edit.php
@@ -75,7 +75,7 @@
 	}
 
 	// Clean up message from POST
-	$message = pun_linebreaks(pun_trim($_POST['req_message']));
+	$orig_message = $message = pun_linebreaks(pun_trim($_POST['req_message']));
 
 	// Here we use strlen() not pun_strlen() as we want to limit the post to PUN_MAX_POSTSIZE bytes, not characters
 	if (strlen($message) > PUN_MAX_POSTSIZE)
@@ -172,7 +172,7 @@
 <?php
 
 	foreach ($errors as $cur_error)
-		echo "\t\t\t\t".'<li><strong>'.$cur_error.'</strong></li>'."\n";
+		echo "\t\t\t\t".'<li class="err">'.$cur_error.'</li>'."\n";
 ?>
 			</ul>
 		</div>
@@ -182,10 +182,11 @@
 <?php
 
 }
-else if (isset($_POST['preview']))
+if (isset($_POST['preview']))
 {
 	require_once PUN_ROOT.'include/parser.php';
 	$preview_message = parse_message($message, $hide_smilies);
+	if (!empty($errors)) $message =& $orig_message;
 
 ?>
 <div id="postpreview" class="blockpost">
diff --git a/footer.php b/footer.php
index 6c92e00..24edd21 100644
--- a/footer.php
+++ b/footer.php
@@ -121,6 +121,23 @@
 	</div>
 </div>
 <?php
+// Code to implement CODE syntax highlighting through Javascript.
+if (defined('PUN_PARSER'))
+{
+	if (isset($pd['code_scripts'])) {	// Check if any CODE tags have highlighting?
+		foreach($pd['code_scripts'] as $script) {	// Yes. Add the scripts at bottom of page.
+			echo '<script type="text/javascript" src="bin/'. $script .'"></script>'."\n";
+		}
+	} elseif (isset($pd['config']['syntax_style']) &&
+		// If there are no CODe tags calling for syntax highlighting,
+		file_exists(PUN_ROOT .'bin/'. $pd['config']['syntax_style'])) { // No SH tags.
+		$tpl_main = str_replace(										// Remove unneeded CSS sheet.
+			'<link rel="stylesheet" type="text/css" href="bin/'. $pd['config']['syntax_style'] ."\" />\n",
+			'',
+			$tpl_main);
+	}
+	unset($script);
+}
 
 // Display debug info (if enabled/defined)
 if (defined('PUN_DEBUG'))
diff --git a/header.php b/header.php
index 0f300db..49fdd06 100644
--- a/header.php
+++ b/header.php
@@ -95,6 +95,18 @@
 		echo '<link rel="stylesheet" type="text/css" href="style/imports/base_admin.css" />'."\n";
 }
 
+// Code to implement CODE syntax highlighting through Javascript.
+// Add the highlighter CSS file here in case its needed. Removed
+// by footer if there are no CODE tags with highlighting.
+if (defined('PUN_PARSER'))
+{
+	if (isset($pd['config']['syntax_style']) &&
+			file_exists(PUN_ROOT .'bin/'. $pd['config']['syntax_style'])) {
+		echo('<link rel="stylesheet" type="text/css" href="bin/'.
+			$pd['config']['syntax_style'] ."\" />\n");
+	}
+}
+
 if (isset($required_fields))
 {
 	// Output JavaScript to validate form (make sure required fields are filled out)
diff --git a/help.php b/help.php
index c1e94ae..b9f86b6 100644
--- a/help.php
+++ b/help.php
@@ -131,11 +131,13 @@
 
 $smiley_groups = array();
 
-foreach ($smilies as $smiley_text => $smiley_img)
-	$smiley_groups[$smiley_img][] = $smiley_text;
+foreach ($pd['smilies'] as $smiley_text => $smiley_data)
+	$smiley_groups[$smiley_data['file']][] = $smiley_text;
 
 foreach ($smiley_groups as $smiley_img => $smiley_texts)
-	echo "\t\t".'<p><code>'.implode('</code> '.$lang_common['and'].' <code>', $smiley_texts).'</code> <span>'.$lang_help['produces'].'</span> <samp><img src="'.pun_htmlspecialchars(get_base_url(true)).'/img/smilies/'.$smiley_img.'" width="15" height="15" alt="'.$smiley_texts[0].'" /></samp></p>'."\n";
+	echo "\t\t<p><code>". implode('</code> ' .$lang_common['and']. ' <code>', $smiley_texts).
+		'</code> <span>' .$lang_help['produces']. '</span> <samp>'.
+		$pd['smilies'][$smiley_texts[0]]['html'] .'</samp></p>'."\n";
 
 ?>
 	</div>
diff --git a/include/bbcd_compile.php b/include/bbcd_compile.php
new file mode 100644
index 0000000..3bb8f4a
--- /dev/null
+++ b/include/bbcd_compile.php
@@ -0,0 +1,434 @@
+<?php // bbcd_compile.php Rev:20110402_1600
+// This script compiles the $options, $syntaxes, $smilies and $bbcd arrays (from bbcd_source.php script
+// or from an admin page web form) into the cache/cache_parser_data.php.
+
+// Initialize a new global parser data array $pd:
+$pd = array(
+	'newer_php_version'		=> version_compare(PHP_VERSION, '5.2.0', '>='), // PHP version affects PCRE error checking.
+	'in_signature'			=> FALSE,				// TRUE when parsing signatures, FALSE when parsing posts.
+	'ipass'					=> 0,					// Pass number (for multi-pass pre-parsing).
+	'tag_stack'				=> array('_ROOT_'),		// current stack trace of tags in recursive callback
+	'config'				=> $config,				// Array of various global parser options.
+
+// -----------------------------------------------------------------------------
+// Parser Regular Expressions. (All fully commented in 'x'-"free-spacing" mode.)
+// -----------------------------------------------------------------------------
+    're_smilies'            => '/ # re_smilies Rev:20110220_1200
+# Match special smiley character sequences within BBCode content.
+(?<=^|[>\s])                    # Only if preceeded by ">" or whitespace.
+(?:%smilies%)
+(?=$|[\[<\s])                   # Only if followed by "<", "[" or whitespace.
+                                /Sx',
+
+    're_color'              => '% # re_color Rev:20110220_1200
+# Match a valid CSS color value. #123, #123456, or "red", "blue", etc.
+^                               # Anchor to start of string.
+(                               # $1: Foreground color (required).
+  \#(?:[0-9A-Fa-f]{3}){1,2}     # Either a "#" and a 3 or 6 digit hex number,
+| (?: maroon|red|orange|yellow| # or a recognized CSS color word.
+      olive|purple|fuchsia|white|
+      lime|green|navy|blue|aqua|
+      teal|black|silver|gray
+  )                             # End group of recognized color words.
+)                               # End $1. Foreground color.
+# Match optional CSS background color value. ;#123, ;#123456, or ;"red", "blue", etc.
+(?:                             # Begin group for optional background color
+  ;?+                           # foreground;background delimiter: e.g. "#123;#456".
+  ((?1))                        # $2: Background color. (Same regex as the first.)
+)?+                             # Background color spec is optional.
+$                               # Anchor to end of string.
+                                %ix',
+
+    're_textile'            => '/ # re_textile Rev:20110220_1200
+# Match textile inline phrase: _em_ *strong* @tt@ ^super^ ~sub~ -del- +ins+
+([+\-@*_\^~])                   # $1: literal exposed start of phrase char, but
+(?<=                            # only if preceded by...
+  ^          [+\-@*_]           # start of string (for _em_ *strong* -del- +ins+ @code)
+| \s         [+\-@*_]           # or whitespace   (for _em_ *strong* -del- +ins+ @code)
+| [A-Za-z0-9)}\]>][\^~]         # or alphanum or bracket (for ^superscript^ ~subscript~).
+)                               # only if preceded by whitespace or start of string.
+(                               # $2: Textile phrase contents.
+  [A-Za-z0-9({\[<]              # First char following delim must be alphanum or bracket.
+  [^+\-@*_\^~\n]*+              # "normal*" == Zero or more non-delim, non-newline.
+  (?>                           # Begin unrolling-the-loop. "(special normal*)*"
+    (?!                         # One of two conditions must be true for inside delim:
+      (?:(?<=[A-Za-z0-9)}\]>][.,;:!?])(?=\1(?:\s|$)))
+    | (?:(?<=[A-Za-z0-9)}\]>])(?=\1(?:[\s.,;:!?]|$)))
+    )[+\-@*_\^~]                # If so then not yet at phrase end. Match delim and
+    [^+\-@*_\^~\n]*+            # more "normal*" non-delim, non-linefeeds.
+  )*+                           # Continue unrolling. "(special normal*)*"
+)                               # End $2: Textile phrase contents.
+(?>
+  (?:(?<=[A-Za-z0-9)}\]>][.,;:!?])(?=\1(?:\s|$)))
+| (?:(?<=[A-Za-z0-9)}\]>])(?=\1(?:[\s.,;:!?]|$)))
+)
+\1                              # Match delim end of phrase, but only if
+                                /Smx',
+
+    're_bbcode'             => '% # re_bbcode Rev:20110220_1200
+# First, match opening tag of syntax: "[TAGNAME (= ("\')ATTRIBUTE("\') )]";
+\[                              # Match opening bracket of outermost opening TAGNAME tag.
+(?>(%taglist%)\s*+) # $1:
+(?>                             # Atomically group remainder of opening tag.
+  (?:                           # Optional attribute.
+    (=)\s*+                     # $2: = Optional attribute\'s equals sign delimiter, ws.
+    (?:                         # Group for 1-line attribute value alternatives.
+      \'([^\'\r\n\\\\]*+(?:\\\\.[^\'\r\n\\\\]*+)*+)\'  # Either $3: == single quoted,
+    | "([^"\r\n\\\\]*+(?:\\\\.[^"\r\n\\\\]*+)*+)"      # or     $4: == double quoted,
+    | ( [^[\]\r\n]*+            # or $5: == un-or-any-quoted. "normal*" == non-"[]"
+        (?:                     # Begin "(special normal*)*" "Unrolling-the-loop" construct.
+          \[[^[\]\r\n]*+\]      # Allow matching [square brackets] 1 level deep. "special".
+            [^[\]\r\n]*+        # More "normal*" any non-"[]", non-newline characters.
+        )*+                     # End "(special normal*)*" "Unrolling-the-loop" construct.
+      )                         # End $5: Un-or-any-quoted attribute value.
+    )                           # End group of attribute values alternatives.
+    \s*+                        # Optional whitespace following quoted values.
+  )?                            # End optional attribute group.
+  \]                            # Match closing bracket of outermost opening TAGNAME tag.
+)                               # End atomic group with opening tag remainder.
+# Second, match the contents of the tag.
+(                               # $6: Non-trimmed contents of TAGNAME tag.
+  (?>                           # Atomic group for contents alternatives.
+    [^\[]++                     # Option 1: Match non-tag chars (starting with non-"[").
+    (?:                         # Begin "(special normal*)*" "Unrolling-the-loop" construct.
+      (?!\[/?+\1[\]=\s])\[      # "special" = "[" if not start of [TAGNAME*] or [/TAGNAME].
+      [^\[]*+                   # More "normal*".
+    )*+                         # Zero or more "special normal*"s allowed for option 1.
+  | (?:                         # or Option 2: Match non-tag chars (starting with "[").
+      (?!\[/?+\1[\]=\s])\[      # "special" = "[" if not start of [TAGNAME*] or [/TAGNAME].
+      [^\[]*+                   # More "normal*".
+    )++                         # One or more "special normal*"s required for option 2.
+  | (?R)                        # Or option 3: recursively match nested [TAGNAME]..[/TAGNAME].
+  )*+                           # One of these three options as many times as necessary.
+)                               # End $6: Non-trimmed contents of TAGNAME tag.
+# Finally, match the closing tag.
+\[/\1\s*+\]                     # Match outermost closing [/  TAGNAME  ]
+                                %ix',
+
+    're_bbtag'              => '%# re_bbtag Rev:20110220_1200
+# Match open or close BBtag.
+\[/?+                           # Match opening bracket of outermost opening TAGNAME tag.
+(?>(%taglist%)\s*+) #$1:
+(?:                             # Optional attribute.
+  (=)\s*+                       # $2: = Optional attribute\'s equals sign delimiter, ws.
+  (?:                           # Group for 1-line attribute value alternatives.
+    \'([^\'\r\n\\\\]*+(?:\\\\.[^\'\r\n\\\\]*+)*+)\'  # Either $3: == single quoted,
+  | "([^"\r\n\\\\]*+(?:\\\\.[^"\r\n\\\\]*+)*+)"      # or     $4: == double quoted,
+  | ( [^[\]\r\n]*+              # or $5: == un-or-any-quoted. "normal*" == non-"[]"
+      (?:                       # Begin "(special normal*)*" "Unrolling-the-loop" construct.
+        \[[^[\]\r\n]*+\]        # Allow matching [square brackets] 1 level deep. "special".
+          [^[\]\r\n]*+          # More "normal*" any non-"[]", non-newline characters.
+      )*+                       # End loop construct. See: "Mastering Regular Expressions".
+    )                           # End $5: Un-or-any-quoted attribute value.
+  )                             # End group of attribute values alternatives.
+  \s*+                          # Optional whitespace following quoted values.
+)?                              # End optional attribute.
+\]                              # Match closing bracket of outermost opening TAGNAME tag.
+                                %ix',
+	're_fixlist_1'			=> '%# re_fixlist_1 Rev:20110220_1200
+# Match and repair invalid characters at start of LIST tag (before first [*]).
+^                               # Anchor to start of subject text.
+(                               # $1: Substring with invalid chars to be enclosed.
+  \s*+                          # Optional whitespace before first invalid char.
+  (?!\[(?:\*|/list)\])          # Assert invalid char(s). (i.e. valid if [*] or [/list]).
+  [^[]*                         # (Normal*) Zero or more non-[.
+  (?:                           # Begin (special normal*)* "Unroll-the-loop- construct.
+    (?!\[(?:\*|/list)\])        # If this [ is not the start of [*] or [/list], then
+    \[                          # go ahead and match non-[*], non-[/list] left bracket.
+    [^[]*                       # More (normal*).
+  )*                            # End (special normal*)* "unroll-the-loop- construct.
+)                               # End $1: non-whitespace before first [*] (or [/list]).
+(?<!\s)                         # Backtrack to exclude any trailing whitespace.
+(?=\s*\[(?:\*|/list)\])         # Done once we reach a [*] or [/list].
+								%ix',
+	're_fixlist_2'			=> '%# re_fixlist_2 Rev:20110220_1200
+# Match and repair invalid characters between [/*] and next [*] (or [/list]].
+\[/\*\]                         # Match [/*] close tag.
+(                               # $1: Substring with invalid chars to be enclosed.
+  \s*+                          # Optional whitespace before first invalid char.
+  (?!\[(?:\*|/list)\])          # Assert invalid char(s). (i.e. valid if [*] or [/list]).
+  [^[]*                         # (Normal*) Zero or more non-[.
+  (?:                           # Begin (special normal*)* "Unroll-the-loop- construct.
+    (?!\[(?:\*|/list)\])        # If this [ is not the start of [*] or [/list], then
+    \[                          # go ahead and match non-[*], non-[/list] left bracket.
+    [^[]*                       # More (normal*).
+  )*                            # End (special normal*)* "unroll-the-loop- construct.
+)                               # End $1: non-whitespace before first [*] (or [/list]).
+(?<!\s)                         # Backtrack to exclude any trailing whitespace.
+(?=\s*\[(?:\*|/list)\])         # Done once we reach a [*] or [/list].
+								%ix',
+	'syntaxes'				=> $syntaxes,			// Array of CODE syntax highlighting scripts.
+	'smilies'				=> array(),				// Array of Smilies, each an array with filename and html.
+	'bbcd'					=> array(),    			// Array of BBCode tag definitions.
+
+);
+unset($config); unset($syntaxes);
+
+// If this server's PHP installation won't allow access to remote files,
+//   then unconditionally turn off validate images option.
+if (!ini_get('allow_url_fopen')) $pd['config']['valid_imgs'] = FALSE;
+
+// Validate and compute replacement texts for smilies array.
+$re_keys = array();									// Array of regex-safe smiley texts.
+$file_path = PUN_ROOT . 'img/smilies/';				// File system path to smilies.
+$url_path = get_base_url(true);						// Convert abs URL to relative URL.
+$url_path = preg_replace('%^https?://[^/]++(.*)$%i', '$1', $url_path) . '/img/smilies/';
+foreach($smilies as $smiley_text => $smiley_img) {	// Loop through all smilieys in array.
+	$file = $file_path . $smiley_img['file'];		// Local file system address of smiley.
+	if (!file_exists($file)) continue;				// Skip if the file does not exist.
+	$info = getimagesize($file);					// Fetch width & height the image.
+	// Scale the smiley image to fit inside tiny smiley box; default = 15 by 15 pixels (@ 100%).
+	if (isset($info) && is_array($info) && ($iw = (int)$info[0]) && ($ih = (int)$info[1])) {
+		$ar = (float)$iw / (float)$ih;
+		if ($iw > $ih) { // Check if landscape?
+			$w = (int)((($pd['config']['smiley_size'] * 15.0) / 100.0) + 0.5);
+			$h = (int)round((float)$w / $ar);
+		} else {
+			$h = (int)((($pd['config']['smiley_size'] * 15.0) / 100.0) + 0.5);
+			$w = (int)round((float)$h * $ar);
+		}
+		unset($ar);
+	}
+	$re_keys[] = preg_quote($smiley_text, '/');		// Gather array of regex-safe smiley texts.
+	$url = $url_path . $smiley_img['file'];			// url address of this smiley.
+	$url = htmlspecialchars($url);					// Make sure all [&<>""] are escaped.
+	$desc = file2title($smiley_img['file']);		// Convert filename to a title.
+	$format = '<img width="%d" height="%d" src="%s" alt="%s" title="%s" />';
+	$pd['smilies'][$smiley_text] = array(
+		'file' => $smiley_img['file'],
+		'html' => sprintf($format, $w, $h, $url, $desc, $desc)
+		);
+}
+// Assemble "the-one-regex-to-match-them-all" (smilies that is!) 8^)
+$pd['re_smilies'] = str_replace('%smilies%', implode('|', $re_keys), $pd['re_smilies']);
+unset($re_keys); unset($file_path); unset($url_path); unset($file);
+unset($info); unset($url); unset($desc); unset($format);
+unset($smiley_text); unset($smiley_img); unset($smilies);
+unset($w); unset($h); unset($iw); unset($ih);
+
+// Local arrays:
+$all_tags					= array();				// array of all tag names allowed in posts
+$all_tags_re				= array();				// array of all tag names allowed in posts (preg_quoted)
+$all_block_tags				= array();				// array of all block type tag names
+
+// loop through all BBCodes to pre-assemble and initialize-once global data structures
+foreach ($bbcd as $tagname => $tagdata)
+{ // pass 1: accumulate regex pattern string fragments counting block and inline types
+	$pd['bbcd'][$tagname] 	= $tagdata;            	// Copy initial tag data to $pd['bbcd']['tagname'].
+	$tag =& $pd['bbcd'][$tagname];					// tag is shortcut to member of $pd['bbcd']['tagname'] array
+	$tag['depth']			= 0;						// initialize tag nesting depth level to zero
+
+	// assign default values for members that were not specified
+	if (!isset($tag['in_post']))	$tag['in_post'] 	= TRUE;			// default in_post = TRUE
+	if (!isset($tag['in_sig']))		$tag['in_sig'] 		= TRUE;			// default in_sig = TRUE
+	if (!isset($tag['html_type']))	$tag['html_type'] 	= 'inline';		// default html_type = inline
+	if (!isset($tag['tag_type']))	$tag['tag_type']	= 'normal';		// default tag_type = normal
+	if (!isset($tag['nest_type'])) {
+		if ($tag['html_type'] === 'inline')	$tag['nest_type'] = 'fix';	// default inline nest_type = fix
+		else 								$tag['nest_type'] = 'err';	// default block nest_type = err
+	}
+	if (!isset($tag['handlers'])) {
+			$tag['handlers'] 	= array(
+				'NO_ATTRIB'		=> array(
+					'format' => '<'. $tag['html_name'] .'>%c_str%</'. $tag['html_name'] .'>'
+				)
+			);
+	}
+	// Loop through attribute handlers assigning default values to a_type and c_type.
+	foreach ($tag['handlers'] as $key => $value) {
+		$handler =& $tag['handlers'][$key];
+		// Detect when width/height types are being used.
+		$w_typ = (preg_match('/%[wh]_str%/', $handler['format'])) ?  'width_height' : FALSE;
+		switch ($key) {
+		case 'ATTRIB':							// Variable attribute handler.
+			if (!isset($handler['a_type']))		$handler['a_type'] = ($w_typ) ? $w_typ : 'text';
+			if (!isset($handler['c_type']))		$handler['c_type'] = 'text';
+			break;
+
+		case 'NO_ATTRIB':						// No attribute handler.
+			if (!isset($handler['a_type']))		$handler['a_type'] = 'none';
+			if (!isset($handler['c_type']))		$handler['c_type'] = ($w_typ) ? $w_typ : 'text';
+			break;
+
+		default:								// Fixed attribute handlers.
+			if (!isset($handler['a_type']))		$handler['a_type'] = ($w_typ) ? $w_typ : 'text';
+			if (!isset($handler['c_type']))		$handler['c_type'] = 'text';
+			break;
+		}
+		ksort($handler);
+	}
+	unset($w_typ);
+	// fill arrays with names of tags for block, inline and hidden tag categories
+	if ($tagname == '_ROOT_') continue; 		// Dont add _ROOT_ to tag lists
+	$all_tags[$tagname]	= TRUE;					// Array of all tags. with the names stored in the $keys.
+	$re_name = preg_quote($tagname);			// this name is metachar-safe to concatenate into a regex pattern string
+	$all_tags_re[]						= $re_name;
+	if ($tag['html_type'] == 'block') {
+		$all_block_tags[]				= $tagname;
+		if (!isset($tag['depth_max'])) {
+			$tag['depth_max'] = 5;					// default block tags max depth = 5
+		}
+	}
+	if ($tag['html_type'] == 'inline') {
+		$tag['depth_max']	= 1;					// all inline tags max depth = 1
+	}
+	if ($tag['tag_type'] === 'hidden') {
+		$tag['depth_max'] = 1;						// all hidden tags max depth = 1
+		$tag['tags_allowed'] 			= array();	// no tags allowed in hidden tags.
+	}
+	// clean excess whitespace (added for human readable formatting above) from format conversion strings
+	foreach($tag['handlers'] as $ikey => $i) { 		// loop through all tag attribute handlers
+		if (isset($tag['handlers'][$ikey]['format'])) {
+			$format_str =& $tag['handlers'][$ikey]['format'];
+			// Strip all whitespace between tags.
+			$format_str = preg_replace('/(^|>)\s++(<|$)/S', '$1$2', $format_str);
+			// Consolidate consecutive whitespace into a single space.
+			$format_str = preg_replace('/\s++/S', ' ', $format_str);
+			// Clean out any old version byte marker cruft.
+			$format_str = str_replace(array("\1", "\2"), '', $format_str);
+			// Wrap all hidden chunks like so: "\1\2<tag>\1 stuff \1\2</tag>\1".
+			if ($tag['tag_type'] === 'hidden' || $tag['handlers'][$ikey]['c_type'] === 'url')
+				$format_str = "\1\2". $format_str ."\1";
+			else
+				$format_str = preg_replace('/((?:<[^>]*+>)++(?:%a_str%(?:<[^>]*+>)++)?+)/S', "\1\2$1\1", $format_str);
+		} else {
+			exit(sprintf("Compile error! \$bbcd['%s']['handlers']['%s']['format'] format string is missing!",
+				$tagname, $ikey));
+		}
+	} unset($i); unset($ikey);
+} // end pass 1
+
+// Now we can complete the regex patterns with precise list of recognized tags.
+$re_tag_names = empty($all_tags_re) ? '_ROOT_' : implode($all_tags_re, "|");
+$pd['re_bbcode'] = str_replace('%taglist%', $re_tag_names, $pd['re_bbcode']);
+$pd['re_bbtag'] = str_replace('%taglist%', $re_tag_names, $pd['re_bbtag']);
+
+unset($all_tags_re); unset($re_tag_names);
+
+foreach ($pd['bbcd'] as $tagname => $tagdata)
+{ // pass 2: initialize allowed and excluded arrays
+	$tag =& $pd['bbcd'][$tagname];							// Alias to "tagname" member of global array
+	if (!isset($tag['tags_allowed']) ||						// if allowed_tags not specified or if
+		isset($tag['tags_allowed']['all']) ) {				// 'all' has been specified as an allowed tag
+		$tag['tags_allowed'] =	$all_tags;					// then create and set tags_allowed to allow all
+	}
+	if (isset($tag['tags_excluded'])) {						// if tags_excluded specified
+		foreach ($tag['tags_allowed'] as $iname => $value) {// remove them from tags_allow array
+			if (isset($tag['tags_excluded'][$iname])) {
+				unset($tag['tags_allowed'][$iname]);
+			}		// remove tags_excluded tags from tags_allowed array
+		}
+	}
+	if ($tag['html_type'] === 'inline') {					// tag type is inline.
+		foreach ($tag['tags_allowed'] as $iname => $value) {// remove them from tags_allow array
+			if (in_array($iname, $all_block_tags)) {		// if this is a block type tag then remove
+				unset($tag['tags_allowed'][$iname]);
+			}												// remove tags_excluded tags from tags_allowed array
+		}
+	}
+	// Build the (shorter/faster) excluded list to be used in the code. (discard tags_allowed[]).
+	$tag['tags_excluded'] = array();
+	foreach($all_tags as $iname => $value) {
+		if (!isset($tag['tags_allowed'][$iname]))
+			$tag['tags_excluded'][$iname] = TRUE;
+	}
+	// Hidden tags have no use for these arrays so set them to minimum.
+	if ($tag['tag_type'] === 'hidden') {
+		$tag['tags_excluded'] = array();
+		$tag['tags_allowed'] = array();
+	}
+	unset($iname); unset($value);
+	unset($tag['tags_allowed']);
+	unset($tag['html_name']);
+	ksort($tag);
+}
+unset($i); unset($iname); unset($n); unset($re_name); unset($tagname); unset($tagdata); unset($tag);
+
+
+//
+// SUPPORT FUNCTIONS
+//
+
+function esc_sq($str) { // Escape single quotes and escapes.
+	// Note: When sprintf is used to write a string into another string, it is
+	//      interpreted and thus loses its escapes in front of single quotes
+	//      and escapes. This function puts the necessary extras in so that
+	//		when it is written, it looks the same as when it started.
+	$str = preg_replace('/ # Regex to reliably escape non-escaped single quotes.
+		( [^\'\\\\]++(?:\\\\.[^\'\\\\]*+)*+  # One or more non-quotes and escaped anything.
+		|            (?:\\\\.[^\'\\\\]*+)++  # or (same thing but start on an escape).
+		) \'/sx', "$1\\'", $str); // Replace all non-escaped quotes with an escaped one.
+	$str = preg_replace('/ # Regex to reliably escape non-escaped escapes.
+		( [^\\\\]++(?:\\\\[^\\\\][^\\\\]*+)*+       # One or more non-escapes and escaped anything-but-escape.
+		|          (?:\\\\[^\\\\][^\\\\]*+)++       # or (same thing but start on an escape).
+		) \\\\\\\\/x', '$1\\\\\\\\\\\\\\\\', $str); // Match an escaped escape, then double it.
+		// Note: The above may look pretty "slashy", but this is precisely what it takes!
+		// There may be a built-in PHP function that this, but couldnt find it.
+	return $str;
+}
+
+function print_array($a) {	// Pretty-print an array to string $s.
+	global $s;
+	static $depth = 0;	// Keep track of nesting depth to allow tidy indentation.
+	++$depth;
+	foreach ($a as $key => $value) {
+		for ($i = 0; $i < $depth; $i++) $s .= "\t";
+		if (is_string($key)) {
+			$s .= sprintf("'%s'\t=> ", esc_sq($key));
+		} elseif (is_int($key)){
+			$s .= sprintf("%d\t=> ", $key);
+		}
+		if (is_array($value)) {
+			$s .= sprintf("array( // count == %d\n", count($value));
+			print_array($value);
+			for ($i = 0; $i < $depth; $i++) $s .= "\t";
+			$s .= sprintf("),\n");
+		} elseif (is_int($value)) {
+			$s .= sprintf("%d,\n", $value);
+		} elseif (is_bool($value)) {
+			if ($value) {
+				$s .= sprintf("TRUE,\n");
+			} else {
+				$s .= sprintf("FALSE,\n");
+			}
+		} elseif (is_string($value)) {
+			$s .= sprintf("'%s',\n", esc_sq($value));
+		}
+	}
+	$s = preg_replace('/,$/', '', $s);
+	--$depth;
+}
+
+// Make a nice title out of a file name.
+function file2title($file) {
+	// Strip off file extention.
+	$title = preg_replace('/\.[^.]*$/', '', $file);
+	// Convert underscores and dashes to spaces.
+	$title = str_replace(array('_', '-'),' ', $title);
+	// Make first letter of each word uppercase.
+	$title = preg_replace('/\b([a-z])/e', 'strtoupper("$1")', $title);
+	// Space out camelcase words.
+	$title = preg_replace('/(?<=[a-z])(?=[A-Z])/', ' ', $title);
+	// Make first letter of insignificant words lowercase.
+	$title = preg_replace('/(?!^)\b(And|At|A|In|Is|Of|The|To)\b/ie', 'strtolower("$1")', $title);
+	// Ensure this is HTML-safe (No [&<>""]).
+	$title = htmlspecialchars($title);
+	return $title;
+}
+
+// Output the $pd global data array to the cache file. Convert to string first.
+$s = "<?php // File: cache_parser_data.php. Automatically generated: " . date('Y-m-d h:i:s') . ". DO NOT EDIT!!!\n";
+
+$s .= sprintf("\$pd = array( // count == %d\n", count($pd));
+print_array($pd);
+$s .= ");\n";
+
+$s .= "?>";
+file_put_contents(PUN_ROOT.'cache/cache_parser_data.php', $s);
+
+// Clean up our global variables.
+unset($all_tags); unset($all_block_tags);
+unset($bbcd); unset($format_str); unset($handler); unset($key); unset($s);
+
+
+?>
diff --git a/include/bbcd_readme.txt b/include/bbcd_readme.txt
new file mode 100644
index 0000000..de4aae9
--- /dev/null
+++ b/include/bbcd_readme.txt
@@ -0,0 +1,172 @@
+/* bbcd_readme.txt Rev:20110402_1600
+
+ $bbcd[] - BBCode Database Array.
+
+  The $bbcd associative array contains one key=>value pair for each recognized BBCode tag. The name
+of the BBCode tag (which is used in BBCode markup; e.g. 'QUOTE'), is stored in the key, and the
+various properties of the BBcode tag are stored in the value (in the form of an array). The following
+comments describe the names and acceptable values for each of these BBCode properties. The array
+which follows defines (loosely) all the BBCodes which FluxBB recognizes. This sparse, human-editable
+array is compiled by the bbcd_compile.php script into the fully defined version which is stored in the
+cache_parser_data.php file which is used during run-time. The compile script (which must be run each time
+the BBCodes are modified), computes and fills in all the missing values not specified here, and uses the
+finalized array of tag data to generate the regular expressions and global variables needed by the parser.
+When defining tags in the $$bbcd array below, the only tag property required to be defined for each tag
+is: 'html_name'. All others are assigned defaults as follows:
+$bbcd = array(								// The BBCode database tag definitions array.
+'bbcode_tag_name'		=	array(			// The key is the BBCode tag name (e.g. 'QUOTE').
+	'in_post'			=> TRUE,			// "TRUE": Enable this tag in post messages (if the global
+											// config variable: p_message_bbcode is set). "FALSE": Don't.
+	'in_sig'			=> FALSE,			// "TRUE": Enable this tag in post signatures (if the global
+											// config variable: p_sig_bbcode is set). "FALSE": Don't.
+	'html_name'			=> 'html_tag_name', // Name of html tag this bbcode is associated with (required).
+											// If no 'handlers' property is provided, then the default
+											// handler will be set to just 'NO_ATTRIB' and the generated
+											// HTML markup will substitute the BBCode tag name with this
+											// 'html_name' property value. i.e. the 'format' string will
+											// be set to: '<html_name>%c_str%</html_name>'. For example:
+											// if a tag is defined as: 'i' => array('html_name'=>'em')
+											// and the BBCode markup is: [i]stuff[/i], then the generated
+											// HTML markup would be simply: <em>stuff</em>. If the
+											// 'handlers' property is specified, then this property is
+											// not used. Once the $bbcd array is compiled, this member
+											// is not needed (and does not appear in the cache file.)
+	'html_type'			=> 'inline',		// "inline": Tags are not nested. If \n\n is inside the tag,
+											//			 the tag is automatically closed then reopened.
+											// "block": Can be nested to a depth defined by: 'depth_max'.
+	'depth_max'			=> 5,				// Maximum tag nesting depth for block types. (default = 5).
+											// For inline and hidden types, depth_max is always == 1.
+											// The pre-parser automatically fixes nested inline tags by
+											// stripping the bbtags for all but the outermost tag pair.
+	'nest_type'			=> 'fix',			// Over-nested type. This determines how the tag is handled
+											// when the tag nesting level exceeds its depth_max. There are
+											// three possible values: "clip", "err" and "fix":
+											//	 "clip":  Strip tags and contents (default for block types).
+											//	 "fix":	  Strip tags and keep contents (default for inline types).
+											//	 "err":	  Flag as erroneous. (Wrap in ERR tags)
+	'tag_type'			=> 'normal',		// Determines special circumstance handling of tag by the parser.
+											//	 "zombie":	When a 'zombie' tag is enabled, it is parsed normally.
+											//			   When a 'zombie' tag is not enabled, the open and close
+											//			   tags and contents are preserved. Nothing is stripped.
+											//	 "normal": When a 'normal' tag is enabled, it is parsed normally.
+											//			   When a 'normal' tag is not enabled, the open and close
+											//			   tags are stripped, but the contents are preserved.
+											//	 "atomic": When an 'atomic' tag is enabled, it is parsed normally.
+											//			   When an 'atomic' tag is not enabled, the open and close
+											//			   tags and the tag contents are all completely stripped.
+											//	 "hidden": Pre-formatted CODE. When a 'hidden' tag is enabled (or
+											//			   not enabled), the contents are never parsed. It may
+											//			   contain any text at all including BBCode tags. The
+											//			   HTML tag used to contain hidden tag contents should be
+											//			   one which preserves whitespace (such as PRE and TT).
+											//			   When a 'hidden' tag is not enabled, the open and close
+											//			   tags and contents are preserved (just like 'zombie').
+	'tags_allowed'		=> array('all' = TRUE), // Array of tag names to be allowed inside this tag (as child tags).
+											// For each allowable child tag in the array, the tag name is stored
+											// in the key (and the value is simply set to TRUE). (Note: This is
+											// done for speed to allow using the fast isset() built-in function.)
+											// If this parameter is not supplied, the default is set to all tags
+											// for html block_type tags, and for inline types the default is to
+											// allow all inline tags. The 'tags_allowed' array is NOT stored in
+											// the cache file. (The parser only needs/uses: 'tags_excluded'.)
+	'tags_excluded'		=> array(),			// Array of tag names to be excluded. By default, all tags are
+											// allowed for block tags and all inline tags are allowed in
+											// inline tags. If tags_excluded is specified, then these tags
+											// are removed from the tags_allowed array. Members of this array
+											// are specified in the same manner as tags_allowed, where the
+											// tag name is stored as: 'tag_name' => TRUE". The 'tags_excluded'
+											// array is stored in the cache file and is used by the parser.
+	'x_padding'			=> 0,				// For tags that have x-y dimensions (IMG, YOUTUBE, ...), add
+											// this many pixels to the width of the object's window.
+	'y_padding'			=> 0,				// For tags that have x-y dimensions (IMG, YOUTUBE, ...), add
+											// this many pixels to the height of the object's window.
+	'handlers'			=> array(			// Array of attribute/content HTML conversion handlers. Each handler
+											// is an associative array consisting of a key, which is either
+											// the name of a fixed attribute value (e.g. the "a" in [LIST=a]),
+											// or one of the special names: 'ATTRIB' or 'NO_ATTRIB', and the
+											// value is an array containing three members: 1.) the content
+											// type, 2.) the attribute type, and 3.) the HTML format
+											// conversion string. If the handlers property is not defined, a
+											// default value is assigned having only NO_ATTRIB defined.
+		'ATTRIB'		=> array(			// Variable attribute handler. When this handler is specified, then
+											// any attribute value is allowed in the tag. This handler is used
+											// by the parser when an attribute is specified that does NOT match
+											// any recognized fixed attribute handler. If the ATTRIB handler is
+											// specified and the NO_ATTRIB handler is NOT specified, then tags
+											// of this type MUST specify an attribute, otherwise an error is
+											// generated. If the ATTRIB and NO_ATTRIB handlers are both
+											// specified, then the attribute is optional (i.e. it may exist
+											// but it is NOT required).
+			'c_type'	=> 'text',			// Content type. Specifies how the content is to be interpreted,
+											// which allows the pre-parser to validate and/or fixup the input
+											// and to generate an error if the input is non-conforming.
+											//	 "text": Normal BBCode text between open and close tags.
+											//	 "url": An absolute URL. This is validated during the
+											//			pre-parsing phase.
+											//	 "email": An email address. The address is validated during the
+											//			  pre-parsing phase.
+											//	 "width_height": Sets width and/or height of visual object tags.
+											//					 e.g. [youtube]iuhdfiusdhf width=240[/youtube].
+			'a_type'	=> 'text',			// Attribute type: Specifies how the attribute is to be interpreted,
+											// which allows the pre-parser to validate and/or fixup the input.
+											//	 "text": Generic CDATA text. Suitable for inside HTML attributes.
+											//	 "url": An absolute URL. This is validated during the
+											//			  pre-parsing phase.
+											//	 "email": An email address. This is validated during the
+											//			  pre-parsing phase.
+											//	 "color": Valid value for insertion into CSS color rule.
+											//			  e.g. "#FFF" or "#FFFFFF" or "red" ("blue", ...).
+											//	 "width_height": Sets width and/or height of visual object tags.
+											//					 e.g. [youtube=640x480]iuhdfiusdhf[/youtube].
+											//	 "none": The tag must not specify an attribute. Otherwise error.
+			'format'	=>	"<html_tag attr=\"%a_str%\">%c_str%</html_tag>" // Format string.
+											// This simplified printf-like format string defines how BBCode
+											// contents and attribute values are encoded into HTML markup.
+											// Each occurrence of: "%a_str%" within the format string is
+											// replaced with the tag's attribute value, and each occurrence
+		),									// of: "%c_str" is replaced with the tag's contents. For tags
+											// having attribute type 'width_height', there are two additional
+											// specifiers: '%w_str%' and '%h_str%' which are replaced with
+											// the width and height respectively. Note that HTML attributes
+											// should be specified with the values enclosed within double
+											// quoted string.
+	  		'a_regex'	=> '/^/v(\w{11})$/',// Optional attribute matching regular expression. If it exists,
+	  										// this is used to validate and trim the tag attribute value. The
+	  										// magic/trimmed value is in capture group number one ($1).
+	  		'c_regex'	=> '/^/v(\w{11})$/',// Optional contents matching regular expression. If it exists,
+	  										// this is used to validate and trim the tag contents. The
+	  										// magic/trimmed value is in capture group number one ($1).
+		'NO_ATTRIB'		=> array(			// No attribute handler. When this handler is specified, then
+											// tags having no attribute are allowed. This handler is used
+											// by the parser when no attribute is specified. If this is
+											// the only handler specified, then tags of this type MUST NOT
+											// specify any attribute, otherwise an error is generated. If
+											// NO_ATTRIB and any other handlers are specified, then the
+											// attribute is optional (i.e. it may exist but is NOT required).
+			'c_type'	=> 'bbcode',		// Content type. Same as for ATTRIB handler described above.
+			'a_type'	=> 'n/a',			// Attribute type: For NO_ATTRIB handlers, this value is ignored.
+			'format'	=>	"\3<html_tag>\3%c_str%\3</html_tag>\3") // Format string. Same as "ATTRIB", however
+											// the "%a_str%" format specifier is not needed since there is
+											// never an attribute. However, if the "%a_str%' is specified,
+											// it is simply replaced with an empty string during parsing.
+		'fixed1'		=> array(			// Fixed attribute handler. This is the handler used when the
+											// BBcode's attribute value is a known, fixed value == "fixed1".
+											// Zero or more fixed attribute handlers may be specified.
+											// For example, the LIST tag can have only one of three fixed
+											// values: either "a", "1" or "*" (or none == "*"). When the
+											// parser encounters one of these tags which has an attribute
+											// specified, it first searches the fixed handlers looking for
+											// one having a key name equal to the attribute value. If there
+											// is no matching fixed attribute handler, then the ATTRIB handler
+											// is used if it exists, otherwise an error is generated.
+			'c_type'	=> 'bbcode',		// Content type. Same as for ATTRIB handler described above.
+			'a_type'	=> 'n/a',			// Attribute type: For fixed attrib handlers, this value is ignored.
+											// Since the attribute value is known ahead of time, the format
+											// string directly defines the converted attribute value.
+			'format'	=>	"\3<html_tag attrib=\"fixed1\">\3%c_str%\3</html_tag>\3"), // Format string.
+											// Same as ATTRIB type but the "a_str" substitution is not needed
+											// since the fixed attribute value is already known in advance
+											// and can be encoded directly into the format string.
+	)										// End of 'handlers' array.
+)											// End of $bbcd array.
+*/
diff --git a/include/bbcd_source.php b/include/bbcd_source.php
new file mode 100644
index 0000000..0cb8b78
--- /dev/null
+++ b/include/bbcd_source.php
@@ -0,0 +1,594 @@
+<?php // File: $bbcd_source.php Rev:20110403_2100
+// Contains master default: $config, $syntaxes, $smilies and $bbcd arrays.
+// This file is not used during runtime. It is used to compile the actual runtime
+// cache file: cache_parser_data.php whenever the parser options need to be reset
+// or initialized. These are the "factory default" settings. This file is designed
+// to be hand edited.
+
+// Global parser options (These should eventually be migrated to the config db table?)
+$config = array(
+	'textile'		=> TRUE,		// Allow simple textile phrase extensions.
+	'quote_links'	=> TRUE,		// Make quote citation a link back to source post.
+	'quote_imgs'	=> FALSE,		// Allow IMG tags withing QUOTEs flag.
+	'valid_imgs'	=> TRUE,		// Validate images and clip size during pre-parsing.
+	'click_imgs'	=> TRUE,		// Wrap IMG tags in a url link to the original image.
+	'max_size'		=> 100000,		// Maximum remote filesize for posting IMG links.
+	'max_width'		=> 800,			// Max width of visual media objects in pixels.
+	'max_height'	=> 600,			// Max height of visual media objects in pixels.
+	'def_width'		=> 240,			// Default width of visual media objects in pixels.
+	'def_height'	=> 180,			// Default height of visual media objects in pixels.
+	'smiley_size'   => 100,			// Percent size adjust for display of smilies.
+	'syntax_style'	=> 'shCoreDefault.css'
+); // End $config array.
+
+// $syntaxes: Array of Javascript CODE syntax highlighter scripts. Each member is an
+// array of script names which need to be loaded for this syntax highlighting to work.
+// Only one copy of any script is loaded and they are loaded in the order listed.
+$syntaxes = array(
+	'regex'			=> array('DynamicRegexHighlighter.js'),
+	'regex_x'		=> array('DynamicRegexHighlighter.js'),
+	'applescript'	=> array('shCore.js', 'shBrushAppleScript.js'),
+	'as3'			=> array('shCore.js', 'shBrushAS3.js'),
+	'bash'			=> array('shCore.js', 'shBrushBash.js'),
+	'coldfusion'	=> array('shCore.js', 'shBrushColdFusion.js'),
+	'c'				=> array('shCore.js', 'shBrushCpp.js'),
+	'cpp'			=> array('shCore.js', 'shBrushCpp.js'),
+	'csharp'		=> array('shCore.js', 'shBrushCSharp.js'),
+	'css'			=> array('shCore.js', 'shBrushCss.js'),
+	'delphi'		=> array('shCore.js', 'shBrushDelphi.js'),
+	'diff'			=> array('shCore.js', 'shBrushDiff.js'),
+	'erlang'		=> array('shCore.js', 'shBrushErlang.js'),
+	'groovy'		=> array('shCore.js', 'shBrushGroovy.js'),
+	'java'			=> array('shCore.js', 'shBrushJava.js'),
+	'javafx'		=> array('shCore.js', 'shBrushJavaFX.js'),
+	'js'			=> array('shCore.js', 'shBrushJScript.js'),
+	'jscript'		=> array('shCore.js', 'shBrushJScript.js'),
+	'perl'			=> array('shCore.js', 'shBrushPerl.js'),
+	'php'			=> array('shCore.js', 'shBrushPhp.js'),
+	'plain'			=> array('shCore.js', 'shBrushPlain.js'),
+	'powershell'	=> array('shCore.js', 'shBrushPowerShell.js'),
+	'python'		=> array('shCore.js', 'shBrushPython.js'),
+	'ruby'			=> array('shCore.js', 'shBrushRuby.js'),
+	'sass'			=> array('shCore.js', 'shBrushSass.js'),
+	'scala'			=> array('shCore.js', 'shBrushScala.js'),
+	'sql'			=> array('shCore.js', 'shBrushSql.js'),
+	'vb'			=> array('shCore.js', 'shBrushVb.js'),
+	'xml'			=> array('shCore.js', 'shBrushXml.js'),
+); // End $syntaxes array.
+
+// Array of smileys. These files are located in the img/smilies folder).
+$smilies = array(
+	':)' 			=> array('file'	=> 'smile.png'),
+	'=)' 			=> array('file'	=> 'smile.png'),
+	':|' 			=> array('file'	=> 'neutral.png'),
+	'=|' 			=> array('file'	=> 'neutral.png'),
+	':(' 			=> array('file'	=> 'sad.png'),
+	'=(' 			=> array('file'	=> 'sad.png'),
+	':D' 			=> array('file'	=> 'big_smile.png'),
+	'=D' 			=> array('file'	=> 'big_smile.png'),
+	':o' 			=> array('file'	=> 'yikes.png'),
+	':O' 			=> array('file'	=> 'yikes.png'),
+	';)' 			=> array('file'	=> 'wink.png'),
+	':/' 			=> array('file'	=> 'hmm.png'),
+	':P' 			=> array('file'	=> 'tongue.png'),
+	':p' 			=> array('file'	=> 'tongue.png'),
+	':lol:' 		=> array('file'	=> 'lol.png'),
+	':mad:' 		=> array('file'	=> 'mad.png'),
+	':rolleyes:'	=> array('file'	=> 'roll.png'),
+	':cool:' 		=> array('file'	=> 'cool.png')
+); // End $smilies array.
+
+/*
+FluxBB 1.4.3 Old parser tags:
+array('quote', 'code', 'b', 'i', 'u', 's', 'ins', 'del', 'em', 'color', 'colour', 'url', 'email', 'img', 'list', '*', 'h')
+array('quote', 'code', 'b', 'i', 'u',
+*/
+$bbcd = array( // Array of recognised BBCode tag structures (arrays).
+	'b' => array(
+		'html_name'				=> 'strong'
+	),
+	'code' => array(
+		'html_name'				=> 'pre',
+		'tag_type'				=> 'hidden',
+		'html_type'				=> 'block',
+		'handlers'				=> array(
+			'applescript'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: AppleScript</h4>
+										<pre class="brush: applescript;">%c_str%</pre></div><p>'
+			),
+			'as3'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: AS3</h4>
+										<pre class="brush: as3;">%c_str%</pre></div><p>'
+			),
+			'bash'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: bash</h4>
+										<pre class="brush: bash;">%c_str%</pre></div><p>'
+			),
+			'c'					=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: "C"</h4>
+										<pre class="brush: c;">%c_str%</pre></div><p>'
+			),
+			'coldfusion'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: ColdFusion</h4>
+										<pre class="brush: coldfusion;">%c_str%</pre></div><p>'
+			),
+			'cpp'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: "C++"</h4>
+										<pre class="brush: cpp;">%c_str%</pre></div><p>'
+			),
+			'csharp'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: C#</h4>
+										<pre class="brush: csharp;">%c_str%</pre></div><p>'
+			),
+			'css'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: CSS</h4>
+										<pre class="brush: css;">%c_str%</pre></div><p>'
+			),
+			'delphi'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Delphi</h4>
+										<pre class="brush: delphi;">%c_str%</pre></div><p>'
+			),
+			'diff'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Diff/Patch</h4>
+										<pre class="brush: diff;">%c_str%</pre></div><p>'
+			),
+			'erlang'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Erlang</h4>
+										<pre class="brush: erlang;">%c_str%</pre></div><p>'
+			),
+			'groovy'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Groovy</h4>
+										<pre class="brush: groovy;">%c_str%</pre></div><p>'
+			),
+			'java'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Java</h4>
+										<pre class="brush: java;">%c_str%</pre></div><p>'
+			),
+			'javafx'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: JavaFX</h4>
+										<pre class="brush: javafx;">%c_str%</pre></div><p>'
+			),
+			'jscript'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: JScript</h4>
+										<pre class="brush: jscript;">%c_str%</pre></div><p>'
+			),
+			'js'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Javascript</h4>
+										<pre class="brush: js;">%c_str%</pre></div><p>'
+			),
+			'perl'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Perl</h4>
+										<pre class="brush: perl;">%c_str%</pre></div><p>'
+			),
+			'php'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: PHP</h4>
+										<pre class="brush: php;">%c_str%</pre></div><p>'
+			),
+			'plain'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Plain</h4>
+										<pre class="brush: plain;">%c_str%</pre></div><p>'
+			),
+			'powershell'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: PowerShell</h3><pre class="brush: powershell;">%c_str%</pre></div><p>'
+			),
+			'python'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Python</h4>
+										<pre class="brush: python;">%c_str%</pre></div><p>'
+			),
+			'ruby'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Ruby</h4>
+										<pre class="brush: ruby;">%c_str%</pre></div><p>'
+			),
+			'sass'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Sass</h4>
+										<pre class="brush: sass;">%c_str%</pre></div><p>'
+			),
+			'scala'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Scala</h4>
+										<pre class="brush: scala;">%c_str%</pre></div><p>'
+			),
+			'sql'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: SQL</h4>
+										<pre class="brush: sql;">%c_str%</pre></div><p>'
+			),
+			'vb'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Visual Basic</h4>
+										<pre class="brush: vb;">%c_str%</pre></div><p>'
+			),
+			'xml'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: XML</h4>
+										<pre class="brush: xml;">%c_str%</pre></div><p>'
+			),
+			'regex'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Regex (PCRE)</h4>
+										<pre class="regex">%c_str%</pre></div><p>'
+			),
+			'regex_x'				=> array(
+				'format'		=> '</p><div class="codebox"><h4>Code: Regex (PCREx)</h4>
+										<pre class="regex_x">%c_str%</pre></div><p>'
+			),
+			'ATTRIB'			=> array(
+				'format'		=> '
+					</p>
+					<div class="codebox">
+						<h4>Code: "%a_str%"</h4>
+						<pre>%c_str%</pre>
+					</div>
+					<p>'
+			),
+			'NO_ATTRIB'			=> array(
+				'format'		=> '
+					</p>
+					<div class="codebox">
+						<pre>%c_str%</pre>
+					</div>
+					<p>'
+			)
+		)
+	),
+	'color' => array(
+		'html_name'				=> 'span',
+		'nest_type'				=> 'err',
+		'handlers'				=> array(
+			'ATTRIB'			=> array(
+				'a_type'		=> 'color',
+				'format'		=> '<span style="color: %a_str%;">%c_str%</span>'
+			)
+		)
+	),
+	'colour' => array(
+		'html_name'				=> 'span',
+		'nest_type'				=> 'err',
+		'handlers'				=> array(
+			'ATTRIB'			=> array(
+				'a_type'		=> 'color',
+				'format'		=> '<span style="color: %a_str%;">%c_str%</span>'
+			)
+		)
+	),
+	'del' => array(
+		'html_name'				=> 'del'
+	),
+	'email' => array(
+		'html_name'				=> 'a',
+		'nest_type'				=> 'err',
+		'tags_excluded'			=> array('email' => TRUE, 'url' => TRUE),
+		'handlers'				=> array(
+			'ATTRIB'			=> array(
+				'a_type'		=> 'email',
+				'c_type'		=> 'text',
+				'format'		=> '<a href="mailto:%a_str%" rel="nofollow">%c_str%</a>'
+			),
+			'NO_ATTRIB'			=> array(
+				'a_type'		=> 'none',
+				'c_type'		=> 'email',
+				'format'		=> '<a href="mailto:%c_str%" rel="nofollow">%c_str%</a>'
+			)
+		)
+	),
+	'em' => array(
+		'html_name'				=> 'em'
+	),
+	'h' => array(
+		'html_name'				=> 'h5',
+		'handlers'				=> array(
+			'NO_ATTRIB'			=> array(
+				'format'		=> '</p><h5>%c_str%</h5><p>'
+			)
+		)
+	),
+	'img' => array(
+		'html_name'				=> 'img',
+		'tag_type'				=> 'atomic',
+		'tags_allowed'			=> array('img' => TRUE),
+		'handlers'				=> array(
+			'ATTRIB'			=> array(
+				'a_type'		=> 'width_height',
+				'c_type'		=> 'url',
+				'format'		=> '<img src="%c_str%" alt="%a_str%" title="%a_str%" width="%w_str%" height="%h_str%" />'
+			),
+			'NO_ATTRIB'			=> array(
+				'a_type'		=> 'none',
+				'c_type'		=> 'url',
+				'format'		=> '<img src="%c_str%" alt="%c_str%" />'
+			)
+		)
+	),
+	'ins' => array(
+		'html_name'				=> 'ins'
+	),
+	'i' => array(
+		'html_name'				=> 'em'
+	),
+
+
+	'table' => array(
+		'html_name'				=> 'table',
+		'html_type'				=> 'block',
+		'handlers'		=> array(
+			'NO_ATTRIB'			=> array('format' => '</p><table>%c_str%</table><p>' )
+		),
+		'tags_only'				=> true,
+		'tags_allowed'			=> array(
+			'tr'				=>	TRUE,
+			'err'				=>	TRUE,
+		)
+	),
+	'tr' => array(
+		'html_name'				=> 'tr',
+		'html_type'				=> 'block',
+		'parents'				=> array('table' => TRUE),
+		'handlers'		=> array(
+			'NO_ATTRIB'			=> array('format' => '<tr>%c_str%</tr>' )
+		),
+		'tags_only'				=> true,
+		'tags_allowed'			=> array(
+			'th'				=>	TRUE,
+			'td'				=>	TRUE,
+			'err'				=>	TRUE,
+		)
+	),
+	'th' => array(
+		'html_name'				=> 'th',
+		'html_type'				=> 'block',
+		'parents'				=> array('tr' => TRUE),
+		'handlers'		=> array(
+			'NO_ATTRIB'			=> array('format' => '<th><p>%c_str%</p></th>' )
+		),
+	),
+	'td' => array(
+		'html_name'				=> 'td',
+		'html_type'				=> 'block',
+		'parents'				=> array('tr' => TRUE),
+		'handlers'		=> array(
+			'NO_ATTRIB'			=> array('format' => '<td><p>%c_str%</p></td>' )
+		),
+	),
+
+
+	'list' => array(
+		'html_name'				=> 'ul',
+		'html_type'				=> 'block',
+		'handlers'		=> array(
+			'1'					=> array('format' => '</p><ol class="decimal">%c_str%</ol><p>'),
+			'a'					=> array('format' => '</p><ol class="alpha">%c_str%</ol><p>'),
+			'*'					=> array('format' => '</p><ul>%c_str%</ul><p>'),
+			'NO_ATTRIB'			=> array('format' => '</p><ul>%c_str%</ul><p>' )
+		),
+		'tags_only'				=> true,
+		'tags_allowed'			=> array(
+			'list'				=>	TRUE,
+			'*'					=>	TRUE)
+	),
+	'*' => array(
+		'html_name'				=> 'li',
+		'html_type'				=> 'block',
+		'parents'				=> array('list' => TRUE),
+		'handlers'		=> array(
+			'NO_ATTRIB'			=> array('format' => '<li><p>%c_str%</p></li>' )
+		)
+	),
+	'quote' => array(
+		'html_name'				=> 'blockquote',
+		'html_type'				=> 'block',
+		'tag_type'				=> 'zombie',
+		'nest_type'				=> 'clip',
+//		'depth_max'				=> 3,
+		'handlers'				=> array(
+			'ATTRIB'			=> array(
+				'format'		=> '
+				</p>
+				<div class="quotebox">
+					<cite>%a_str%</cite>
+					<blockquote>
+						<div>
+							<p>%c_str%</p>
+						</div>
+					</blockquote>
+				</div>
+				<p>'
+			),
+			'NO_ATTRIB'			=> array(
+				'format'		=> '
+				</p>
+				<div class="quotebox">
+					<blockquote>
+						<div>
+							<p>%c_str%</p>
+						</div>
+					</blockquote>
+				</div>
+				<p>'
+			),
+		),
+	),
+	'sub' => array(
+		'html_name'				=> 'sub'
+	),
+	'sup' => array(
+		'html_name'				=> 'sup'
+	),
+	's' => array(
+		'html_name'				=> 'span',
+		'handlers'				=> array(
+			'NO_ATTRIB'			=> array(
+				'format'		=> '<span class="bbs">%c_str%</span>'
+			)
+		)
+	),
+	'tt' => array(
+		'html_name'				=> 'tt',
+		'tag_type'				=> 'hidden',
+		'handlers'	=> array( // count == 1
+			'NO_ATTRIB'	=> array( // count == 3
+				'a_type'	=> 'none',
+				'c_type'	=> 'text',
+				'format'	=> '<tt>%c_str%</tt>'
+			)
+		),
+
+
+	),
+	'url' => array(
+		'html_name'				=> 'a',
+//		'nest_type'				=> 'err',
+		'tags_excluded'			=> array('email' => TRUE, 'url' => TRUE),
+		'handlers'				=> array(
+			'ATTRIB'			=> array(
+				'a_type'		=> 'url',
+				'c_type'		=> 'text',
+				'format'		=> '<a href="%a_str%" rel="nofollow">%c_str%</a>'
+			),
+			'NO_ATTRIB'			=> array(
+				'a_type'		=> 'none',
+				'c_type'		=> 'url',
+				'format'		=> '<a href="%c_str%" rel="nofollow">%c_str%</a>'
+			)
+		)
+	),
+	'u' => array(
+		'html_name'				=> 'span',
+		'handlers'				=> array(
+			'NO_ATTRIB'			=> array(
+				'format'		=> '<span class="bbu">%c_str%</span>'
+			)
+		)
+	),
+
+	// New Tags.
+
+
+	'vimeo' => array(
+	/* Supplied in one of four acceptable formats:  (Note: smallest good youtube dimensions: 260x225)
+		1. 12397369
+		2. http://www.vimeo.com/12397369
+		3. <iframe src="http://player.vimeo.com/video/12397369" width="400" height="265" frameborder="0"></iframe><p><a href="http://vimeo.com/12397369">Blender test 01 - Ocean - step 09</a> from <a href="http://vimeo.com/user738479">ridgerunner</a> on <a href="http://vimeo.com">Vimeo</a>.</p>
+		4. <object width="400" height="265"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=12397369&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=1&amp;color=00ADEF&amp;fullscreen=1&amp;autoplay=0&amp;loop=0" /><embed src="http://vimeo.com/moogaloop.swf?clip_id=12397369&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=1&amp;color=00ADEF&amp;fullscreen=1&amp;autoplay=0&amp;loop=0" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="265"></embed></object><p><a href="http://vimeo.com/12397369">Blender test 01 - Ocean - step 09</a> from <a href="http://vimeo.com/user738479">ridgerunner</a> on <a href="http://vimeo.com">Vimeo</a>.</p>
+	*/
+		'in_post'				=> TRUE,
+		'in_sig'				=> FALSE,
+		'html_name'				=> 'object',
+		'tags_allowed'			=> array(),
+		'handlers'				=> array(
+			'ATTRIB'			=> array(
+				'a_type'		=> 'width_height',
+				'c_type'		=> 'text',
+				'c_regex'		=> '%(?:^|\bvimeo.com/(?:moogaloop.swf?clip_id=)?)(\d{7,10})\b%S',
+				'format'		=> '
+					<object type="application/x-shockwave-flash" width="%w_str%" height="%h_str%" data="http://vimeo.com/moogaloop.swf?clip_id=%c_str%&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1">
+						<param name="allowscriptaccess" value="always" />
+						<param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=%c_str%&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" />
+						<param name="allowFullScreen" value="true" />
+					</object>'
+			),
+			'NO_ATTRIB'			=> array(
+				'a_type'		=> 'width_height',
+				'c_type'		=> 'width_height',
+				'c_regex'		=> '%(?:^|\bvimeo.com/(?:moogaloop.swf?clip_id=)?)(\d{7,10})\b%S',
+				'format'		=> '
+					<object type="application/x-shockwave-flash" width="%w_str%" height="%h_str%" data="http://vimeo.com/moogaloop.swf?clip_id=%c_str%&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1">
+						<param name="allowscriptaccess" value="always" />
+						<param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=%c_str%&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1" />
+						<param name="allowFullScreen" value="true" />
+					</object>'
+			)
+		)
+	),
+
+
+//    'v' => array(
+//        'html_name' => 'var'
+//    ),
+
+
+	'youtube' => array(
+	/* Supplied in one of three acceptable formats:  (Note: smallest good youtube dimensions: 260x225)
+		1. XWlhKllqnAk
+		2. http://www.youtube.com/watch?v=XWlhKllqnAk
+		3. <object width="480" height="385"><param name="movie" value="http://www.youtube.com/v/XWlhKllqnAk?fs=1&amp;hl=en_US&amp;rel=0"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/XWlhKllqnAk?fs=1&amp;hl=en_US&amp;rel=0" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="480" height="385"></embed></object>
+		SIZING:
+		With wxh set to 480x385 and no borders, the object uses 480x385 and the image takes 480x360.
+		With wxh set to 480x385 and borders, the object uses 480x385 and the image takes 460x340.
+		  Border width = 10px. Controller height = 25.
+	*/
+		'in_post'				=> TRUE,
+		'in_sig'				=> FALSE,
+		'html_name'				=> 'object',
+		'tags_allowed'			=> array(),
+		'x_padding'				=> 20,
+		'y_padding'				=> 45,
+		'handlers'				=> array(
+			'ATTRIB'			=> array(
+				'a_type'		=> 'width_height',
+				'c_type'		=> 'text',
+				'c_regex'		=> '%(?:^|\bv[=/])(\w{10,12})\b%S',
+				'format'		=> '
+					<object type="application/x-shockwave-flash" width="%w_str%" height="%h_str%"
+						data="http://www.youtube.com/v/%c_str%&amp;hl=en_US&amp;fs=1&amp;border=1&amp;rel=0">
+						<param name="movie" value="http://www.youtube.com/v/%c_str%&amp;hl=en_US&amp;fs=1&amp;border=1" />
+						<param name="allowFullScreen" value="true" />
+					</object>'
+			),
+			'NO_ATTRIB'			=> array(
+				'a_type'		=> 'width_height',
+				'c_type'		=> 'width_height',
+				'c_regex'		=> '%(?:^|\bv[=/])(\w{10,12})\b%S',
+				'format'		=> '
+					<object type="application/x-shockwave-flash" width="%w_str%" height="%h_str%"
+						data="http://www.youtube.com/v/%c_str%&amp;hl=en_US&amp;fs=1&amp;border=1&amp;rel=0">
+						<param name="movie" value="http://www.youtube.com/v/%c_str%&amp;hl=en_US&amp;fs=1&amp;border=1" />
+						<param name="allowFullScreen" value="true" />
+					</object>'
+			)
+		)
+	),
+
+
+
+
+
+
+
+	// System Tags. DO NOT DISABLE
+	'err' => array(
+		'html_name'				=> 'span',
+		'tag_type'				=> 'hidden',
+		'html_type'				=> 'inline',
+		'handlers'				=> array(
+			'ATTRIB'			=> array(
+				'format'		=>
+					'<span class="err" title="%a_str%">%c_str%</span>'
+			),
+			'NO_ATTRIB'			=> array(
+				'format'		=>
+					'<span class="err">%c_str%</span>'
+			)
+		)
+	),
+	'dbug' => array(
+		'html_name'				=> 'div',
+		'html_type'				=> 'block',
+		'handlers'				=> array(
+			'ATTRIB'			=> array(
+				'format'		=>
+					'</p><p class="debug" title="%a_str%">%c_str%</p><p>'
+			)
+		)
+	),
+	'_ROOT_' => array(
+		'in_post'				=> FALSE,
+		'in_sig'				=> FALSE,
+		'html_name'				=> 'div',
+		'tag_type'				=> 'normal',
+		'html_type'				=> 'block',
+		'depth_max'				=> 1,
+		'handlers'				=> array( // Default handler for erroneously defined tag.
+			'NO_ATTRIB'			=> array(
+				'a_type'		=> 'text',
+				'c_type'		=> 'text',
+				'format'		=> "\1\2<span class=\"err\" title=\"_ROOT_\">%c_str%</span>\1",
+			)
+		)
+	)
+) // End $bbcd array.
+?>
diff --git a/include/common_admin.php b/include/common_admin.php
index 5ce1319..7f1b39c 100644
--- a/include/common_admin.php
+++ b/include/common_admin.php
@@ -61,6 +61,7 @@ function generate_admin_menu($page = '')
 					<li<?php if ($page == 'groups') echo ' class="isactive"'; ?>><a href="admin_groups.php"><?php echo $lang_admin_common['User groups'] ?></a></li>
 					<li<?php if ($page == 'censoring') echo ' class="isactive"'; ?>><a href="admin_censoring.php"><?php echo $lang_admin_common['Censoring'] ?></a></li>
 					<li<?php if ($page == 'ranks') echo ' class="isactive"'; ?>><a href="admin_ranks.php"><?php echo $lang_admin_common['Ranks'] ?></a></li>
+					<li<?php if ($page == 'parser') echo ' class="isactive"'; ?>><a href="admin_parser.php"><?php echo $lang_admin_common['Parser'] ?></a></li>
 					<li<?php if ($page == 'maintenance') echo ' class="isactive"'; ?>><a href="admin_maintenance.php"><?php echo $lang_admin_common['Maintenance'] ?></a></li>
 				</ul>
 			</div>
diff --git a/include/functions.php b/include/functions.php
index 8ba8ca5..fdf4b70 100644
--- a/include/functions.php
+++ b/include/functions.php
@@ -1743,41 +1743,6 @@ function forum_list_plugins($is_admin)
 	return $plugins;
 }
 
-
-//
-// Split text into chunks ($inside contains all text inside $start and $end, and $outside contains all text outside)
-//
-function split_text($text, $start, $end, &$errors, $retab = true)
-{
-	global $pun_config, $lang_common;
-
-	$tokens = explode($start, $text);
-
-	$outside[] = $tokens[0];
-
-	$num_tokens = count($tokens);
-	for ($i = 1; $i < $num_tokens; ++$i)
-	{
-		$temp = explode($end, $tokens[$i]);
-
-		if (count($temp) != 2)
-		{
-			$errors[] = $lang_common['BBCode code problem'];
-			return array(null, array($text));
-		}
-		$inside[] = $temp[0];
-		$outside[] = $temp[1];
-	}
-
-	if ($pun_config['o_indent_num_spaces'] != 8 && $retab)
-	{
-		$spaces = str_repeat(' ', $pun_config['o_indent_num_spaces']);
-		$inside = str_replace("\t", $spaces, $inside);
-	}
-
-	return array($inside, $outside);
-}
-
 //
 // function url_valid($url) {
 //
@@ -1989,3 +1954,161 @@ function dump()
 	echo '</pre>';
 	exit;
 }
+/* Convert open urls into clickable links. */
+function linkify($text) {
+	return preg_replace_callback('/ # Rev:20110220_1200 github.com\/jmrware\/LinkifyURL
+	# Match http & ftp URL that is not already linkified.
+	  # Alternative 1: URL delimited by (parentheses).
+	  (\()					   # $1	 "(" start delimiter.
+	  ((?:ht|f)tps?:\/\/[a-z0-9\-._~!$&\'()*+,;=:\/?#[\]@%]+)  # $2: URL.
+	  (\))					   # $3: ")" end delimiter.
+	| # Alternative 2: URL delimited by [square brackets].
+	  (\[)					   # $4: "[" start delimiter.
+	  ((?:ht|f)tps?:\/\/[a-z0-9\-._~!$&\'()*+,;=:\/?#[\]@%]+)  # $5: URL.
+	  (\])					   # $6: "]" end delimiter.
+	| # Alternative 3: URL delimited by {curly braces}.
+	  (\{)					   # $7: "{" start delimiter.
+	  ((?:ht|f)tps?:\/\/[a-z0-9\-._~!$&\'()*+,;=:\/?#[\]@%]+)  # $8: URL.
+	  (\})					   # $9: "}" end delimiter.
+	| # Alternative 4: URL delimited by <angle brackets>.
+	  (<|&(?:lt|\#60|\#x3c);)  # $10: "<" start delimiter (or HTML entity).
+	  ((?:ht|f)tps?:\/\/[a-z0-9\-._~!$&\'()*+,;=:\/?#[\]@%]+)  # $11: URL.
+	  (>|&(?:gt|\#62|\#x3e);)  # $12: ">" end delimiter (or HTML entity).
+	| # Alternative 5: URL not delimited by (), [], {} or <>.
+	  (						   # $13: Prefix proving URL not already linked.
+		(?: ^				   # Can be a beginning of line or string, or
+		| [^=\s\'"\]]		   # a non-"=", non-quote, non-"]", followed by
+		) \s*[\'"]?			   # optional whitespace and optional quote;
+	  | [^=\s]\s+			   # or... a non-equals sign followed by whitespace.
+	  )						   # End $13. Non-prelinkified-proof prefix.
+	  ( \b					   # $14: Other non-delimited URL.
+		(?:ht|f)tps?:\/\/	   # Required literal http, https, ftp or ftps prefix.
+		[a-z0-9\-._~!$\'()*+,;=:\/?#[\]@%]+ # All URI chars except "&" (normal*).
+		(?:					   # Either on a "&" or at the end of URI.
+		  (?!				   # Allow a "&" char only if not start of an...
+			&(?:gt|\#0*62|\#x0*3e);					 # HTML ">" entity, or
+		  | &(?:amp|apos|quot|\#0*3[49]|\#x0*2[27]); # a [&\'"] entity if
+			[.!&\',:?;]?		# followed by optional punctuation then
+			(?:[^a-z0-9\-._~!$&\'()*+,;=:\/?#[\]@%]|$)	# a non-URI char or EOS.
+		  ) &				   # If neg-assertion true, match "&" (special).
+		  [a-z0-9\-._~!$\'()*+,;=:\/?#[\]@%]* # More non-& URI chars (normal*).
+		)*					   # Unroll-the-loop (special normal*)*.
+		[a-z0-9\-_~$()*+=\/#[\]@%]	# Last char can\'t be [.!&\',;:?]
+	  )						   # End $14. Other non-delimited URL.
+	/imx', '_linkify_callback', $text);
+//	  $url_replace = '$1$4$7$10$13[url]$2$5$8$11$14[/url]$3$6$9$12';
+}
+function _linkify_callback($m) { // Only linkify valid urls.
+	$url = $m[2] . $m[5] . $m[8] . $m[11] . $m[14];
+	if (is_array($u = url_valid($url))) {
+		if (preg_match('%\.(?:jpe?g|gif|png)$%Si', $u['path_abempty']))
+			return	$m[1].$m[4].$m[7].$m[10].$m[13] .'[img]'. $u['url'] .'[/img]'. $m[3].$m[6].$m[9].$m[12];
+		else
+			return	$m[1].$m[4].$m[7].$m[10].$m[13] .'[url]'. $u['url'] .'[/url]'. $m[3].$m[6].$m[9].$m[12];
+	}
+	else
+		return	$m[1].$m[4].$m[7].$m[10].$m[13].		$url.			   $m[3].$m[6].$m[9].$m[12];
+}
+/*----------------------------------------------------------------------------
+ function benchmark_12($funcname, $p1, $reptime = 1.0, $verbose = true, $p2 = NULL) {}
+	By: Jeff Roberson
+	Created:		2010-03-17
+	Last edited:	2011-02-14
+
+Discussion:
+	This function measures the time required to execute a given function by
+	calling it as many times as possible within an allowed period == $reptime.
+	A first pass determines a rough measurement of function execution time
+	by increasing the $nreps count by a factor of 10 - (i.e. 1, 10, 100, ...),
+	until an $nreps value is found which takes more than 0.01 secs to finish.
+	A second pass uses the value determined in the first pass to compute the
+	number of reps that can be performed within the alloted $reptime seconds.
+	The second pass then measures the time required to call the function the
+	computed number of times (which should take about $reptime seconds). The
+	average function execution time is then computed by dividing the total
+	measured elapsed time by the number of reps performed in that time, and
+	then all the pertinent values are returned to the caller in an array.
+
+	Note that this function is limited to measuring only those functions
+	having one or two arguments and return value that are passed by value and
+	not by reference. This is why the name of this function ends with "12".
+	Variations of this function can be easily cloned which can have more
+	than one or two parameters.
+
+Parameters:
+	$funcname:	String containing name of function to be measured. The
+				function to be measured must take one or two parameters.
+	$p1:		First (required) argument to be passed to $funcname function.
+	$reptime	Target number of seconds allowed for benchmark test.
+				(float) (Default=1.0)
+	$verbose	Boolean value determines if results are printed.
+				(bool) (Default=true)
+	$p2:		Second (optional) argument to be passed to $funcname function.
+Return value:
+	$result[]	Array containing measured and computed values:
+	$result['funcname']		: $funcname - Name of function measured.
+	$result['msg']			: $msg - String with formatted results.
+	$result['nreps']		: $nreps - Number of function calls made.
+	$result['time_total']	: $time - Seconds to call function $nreps times.
+	$result['time_func']	: $t_func - Seconds to call function once.
+	$result['result']		: $result - Last value returned by function.
+
+Variables:
+	$time:		Float epoch time (secs since 1/1/1970) or benchmark elapsed secs.
+	$i:			Integer loop counter.
+	$nreps		Number of times function called in benchmark measurement loops.
+
+----------------------------------------------------------------------------*/
+function benchmark_12($funcname, $p1, $reptime = 1.0, $verbose = false, $p2 = NULL) {
+	if (!function_exists($funcname)) {
+		exit("\n[benchmark1] Error: function \"{$funcname}()\" does not exist.\n");
+	}
+	if (!isset($p2)) { // Case 1: function takes one parameter ($p1).
+	// Pass 1: Measure order of magnitude number of calls needed to exceed 10 milliseconds.
+		for ($time = 0.0, $n = 1; $time < 0.01; $n *= 10) { // Exponentially increase $nreps.
+			$time = microtime(true);			// Mark start time. (sec since 1970).
+			for ($i = 0; $i < $n; ++$i) {		// Loop $n times. ($n = 1, 10, 100...)
+				$result = ($funcname($p1));		// Call the function over and over...
+			}
+			$time = microtime(true) - $time;	// Mark stop time. Compute elapsed secs.
+			$nreps = $n;						// Number of reps just measured.
+		}
+		$t_func = $time / $nreps;				// Function execution time in sec (rough).
+	// Pass 2: Measure time required to perform $nreps function calls (in about $reptime sec).
+		if ($t_func < $reptime) {				// If pass 1 time was not pathetically slow...
+			$nreps = (int)($reptime / $t_func); // Figure $nreps calls to add up to $reptime.
+			$time = microtime(true);			// Mark start time. (sec since 1970).
+			for ($i = 0; $i < $nreps; ++$i) {	// Loop $nreps times (should take $reptime).
+				$result = ($funcname($p1));		// Call the function over and over...
+			}
+			$time = microtime(true) - $time;	// Mark stop time. Compute elapsed secs.
+			$t_func = $time / $nreps;			// Average function execution time in sec.
+		}
+	} else { // Case 2: function takes two parameters ($p1 and $p2).
+	// Pass 1: Measure order of magnitude number of calls needed to exceed 10 milliseconds.
+		for ($time = 0.0, $n = 1; $time < 0.01; $n *= 10) { // Exponentially increase $nreps.
+			$time = microtime(true);			// Mark start time. (sec since 1970).
+			for ($i = 0; $i < $n; ++$i) {		// Loop $n times. ($n = 1, 10, 100...)
+				$result = ($funcname($p1, $p2));	 // Call the function over and over...
+			}
+			$time = microtime(true) - $time;	// Mark stop time. Compute elapsed secs.
+			$nreps = $n;						// Number of reps just measured.
+		}
+		$t_func = $time / $nreps;				// Function execution time in sec (rough).
+	// Pass 2: Measure time required to perform $nreps function calls (in about $reptime sec).
+		if ($t_func < $reptime) {				// If pass 1 time was not pathetically slow...
+			$nreps = (int)($reptime / $t_func); // Figure $nreps calls to add up to $reptime.
+			$time = microtime(true);			// Mark start time. (sec since 1970).
+			for ($i = 0; $i < $nreps; ++$i) {	// Loop $nreps times (should take $reptime).
+				$result = ($funcname($p1, $p2));	 // Call the function over and over...
+			}
+			$time = microtime(true) - $time;	// Mark stop time. Compute elapsed secs.
+			$t_func = $time / $nreps;			// Average function execution time in sec.
+		}
+	}
+	$msg = sprintf("%s() Nreps:%7d	Time:%7.3f s  Function time: %.6f sec\n",
+			$funcname, $nreps, $time, $t_func);
+	if ($verbose) echo($msg);
+	return array('funcname' => $funcname, 'msg' => $msg, 'nreps' => $nreps,
+		'time_total' => $time, 'time_func' => $t_func, 'result' => $result);
+}
diff --git a/include/parser.php b/include/parser.php
index 02449b7..eb17b99 100644
--- a/include/parser.php
+++ b/include/parser.php
@@ -1,904 +1,916 @@
-<?php
+<?php // parser.php Rev:20110413_1700
+/*---
 
-/**
- * Copyright (C) 2008-2011 FluxBB
- * based on code by Rickard Andersson copyright (C) 2002-2008 PunBB
- * License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher
- */
+	Copyright (C) 2008-2011 FluxBB.org
+	New 2011 parser code copyright (C) 2011 Jeff Roberson (jmrware.com).
+	based on code copyright (C) 2002-2005 Rickard Andersson
+	License: http://www.gnu.org/licenses/gpl.html GPL version 2 or higher
+
+---*/
 
 // Make sure no one attempts to run this script "directly"
 if (!defined('PUN'))
 	exit;
 
-// Global variables
-/* regular expression to match nested BBCode LIST tags
-'%
-\[list                # match opening bracket and tag name of outermost LIST tag
-(?:=([1a*]))?+        # optional attribute capture in group 1
-\]                    # closing bracket of outermost opening LIST tag
-(                     # capture contents of LIST tag in group 2
-  (?:                 # non capture group for either contents or whole nested LIST
-	[^\[]*+           # unroll the loop! consume everything up to next [ (normal *)
-	(?:               # (See "Mastering Regular Expressions" chapter 6 for details)
-	  (?!             # negative lookahead ensures we are NOT on [LIST*] or [/LIST]
-		\[list        # opening LIST tag
-		(?:=[1a*])?+  # with optional attribute
-		\]            # closing bracket of opening LIST tag
-		|             # or...
-		\[/list\]     # a closing LIST tag
-	  )               # end negative lookahead assertion (we are not on a LIST tag)
-	  \[              # match the [ which is NOT the start of LIST tag (special)
-	  [^\[]*+         # consume everything up to next [ (normal *)
-	)*+               # finish up "unrolling the loop" technique (special (normal*))*
-  |                   # or...
-	(?R)              # recursively match a whole nested LIST element
-  )*                  # as many times as necessary until deepest nested LIST tag grabbed
-)                     # end capturing contents of LIST tag into group 2
-\[/list\]             # match outermost closing LIST tag
-%iex' */
-$re_list = '%\[list(?:=([1a*]))?+\]((?:[^\[]*+(?:(?!\[list(?:=[1a*])?+\]|\[/list\])\[[^\[]*+)*+|(?R))*)\[/list\]%ie';
-
-// Here you can add additional smilies if you like (please note that you must escape single quote and backslash)
-$smilies = array(
-	':)' => 'smile.png',
-	'=)' => 'smile.png',
-	':|' => 'neutral.png',
-	'=|' => 'neutral.png',
-	':(' => 'sad.png',
-	'=(' => 'sad.png',
-	':D' => 'big_smile.png',
-	'=D' => 'big_smile.png',
-	':o' => 'yikes.png',
-	':O' => 'yikes.png',
-	';)' => 'wink.png',
-	':/' => 'hmm.png',
-	':P' => 'tongue.png',
-	':p' => 'tongue.png',
-	':lol:' => 'lol.png',
-	':mad:' => 'mad.png',
-	':rolleyes:' => 'roll.png',
-	':cool:' => 'cool.png');
-
-//
-// Make sure all BBCodes are lower case and do a little cleanup
-//
-function preparse_bbcode($text, &$errors, $is_signature = false)
-{
-	global $pun_config, $lang_common, $lang_post, $re_list;
-
-	if ($is_signature)
-	{
-		global $lang_profile;
-
-		if (preg_match('%\[/?(?:quote|code|list|h)\b[^\]]*\]%i', $text))
-			$errors[] = $lang_profile['Signature quote/code/list/h'];
-	}
+define('PUN_PARSER', '11-Feb-2011 13:33');
 
-	// If the message contains a code tag we have to split it up (text within [code][/code] shouldn't be touched)
-	if (strpos($text, '[code]') !== false && strpos($text, '[/code]') !== false)
-	{
-		list($inside, $outside) = split_text($text, '[code]', '[/code]', $errors);
-		$text = implode("\1", $outside);
-	}
-
-	// Tidy up lists
-	$temp = preg_replace($re_list, 'preparse_list_tag(\'$2\', \'$1\', $errors)', $text);
-
-	// If the regex failed
-	if ($temp === null)
-		$errors[] = $lang_common['BBCode list size error'];
-	else
-		$text = str_replace('*'."\0".']', '*]', $temp);
-
-	if ($pun_config['o_make_links'] == '1')
-		$text = do_clickable($text);
-
-	// If we split up the message before we have to concatenate it together again (code tags)
-	if (isset($inside))
-	{
-		$outside = explode("\1", $text);
-		$text = '';
-
-		$num_tokens = count($outside);
-		for ($i = 0; $i < $num_tokens; ++$i)
-		{
-			$text .= $outside[$i];
-			if (isset($inside[$i]))
-				$text .= '[code]'.$inside[$i].'[/code]';
+// globals. we share one array: $pd
+if (file_exists (PUN_ROOT.'cache/cache_parser_data.php')) { // If file already exists
+	require_once(PUN_ROOT.'cache/cache_parser_data.php');
+} else { // It needs to be re-generated.
+	require_once(PUN_ROOT.'include/bbcd_source.php');
+	require_once(PUN_ROOT.'include/bbcd_compile.php');
+}
+// !!!! AVOIDING PCRE STACK OVERFLOWS WHICH SEG-FAULT CRASH APACHE/PHP !!!!
+// By default, PHP sets up pcre.recursion_limit way too high (100000). According
+// to PCRE documentation, a sensible value for this parameter is the stacksize
+// of the PCRE executable, divided by 500. The Apache executable for Windows is
+// built with a 256KB stack, but most *nix installations set a stack size of 8MB.
+// We need to set the PCRE pcre.recursion_limit to the stacksize / 500. If this
+// precaution is not done, then an overly large subject text will cause the
+// executable to stack-overflow, and seg-fault crash with no warning. Taking the
+// following precaution, prevents this severe error and allows the program to
+// gracefully recover and display an appropriate error message.
+if (isset($_ENV['OS']) && $_ENV['OS'] === "Windows_NT") { // Are we: Win NT, 2K, XP, Vista or 7)?
+	ini_set("pcre.recursion_limit", "524");		// 256KB / 500 = 524
+} else {										// Otherwise assume we are on a *nix box.
+	ini_set("pcre.recursion_limit", "16777");	// 8MB / 500 = 16777
+}
+/* ***********************************************************
+callback function _preparse_bbcode_callback($matches)
+
+  This is the callback function for the main pre-parser. This routine is
+called when the preg_replace_callback function within the preparse_bbcode()
+function matches one BBCode open/close pair. The BBCode tag components are
+passed in $matches. This routine checks for various error conditions and
+repairs some of them. Erroneous code that cannot be fixed is wrapped in the
+special error BBCode tag: ERR.
+
+Parameters: (See the BBcode regex to see how each of these parameters are captured.)
+	$matches[0];					=  ([TAG=att]..content..[/TAG])	// The whole match.
+	$matches[1];	$tagname		=  (TAG)				// The BBCode tag name.
+	$matches[2];					=  (=)					// Attribute equals sign delimiter.
+	$matches[3];	$attribute		= '(attribute)'			// Attribute within single quotes, or
+	$matches[4];	$attribute		= "(attribute)"			// Attribute within double quotes or
+	$matches[5];	$attribute		=  (attribute)			// Attribute within no or any quotes.
+	$matches[6];	$contents		=  (tag contents)		// BBCode tag contents.
+*********************************************************** */
+function _preparse_bbcode_callback($matches) {
+	global $lang_common, $errors, $pd;
+
+	// Initialize some local variables. Use reference variables where possible.
+	$tagname =& $matches[1];								// BBCode tag name.
+	$contents =& $matches[6];								// BBCode tag contents.
+	$tag =& $pd['bbcd'][$tagname];							// alias to this tags array element of the BBCD database
+	$parent = end($pd['tag_stack']);						// Name of parent tag. ("_ROOT_" is base parent tag).
+/*	$new_errors = array();	*/								// BBCode tag error messages. (Create on error.)
+
+	// First things first.
+	$tag['depth']++;										// Increment tag-specific nesting level depth.
+	$tagname = strtolower($tagname);						// Force lowercase tags name.
+	array_push($pd['tag_stack'], $tagname);					// Push this tags name onto the tag stack.
+
+	// ---------------------------------------------------------------------------
+	// Recursively parse any nested BBCode tag markup (unless tag type is hidden):
+	// ---------------------------------------------------------------------------
+	if ($tag['tag_type'] !== 'hidden' && strpos($contents, '[') !== FALSE) {
+		$contents = preg_replace_callback($pd['re_bbcode'], '_preparse_bbcode_callback', $contents);
+		if ($contents === NULL) // On error, preg_replace_callback returns NULL.
+		{ // Error #1: '(%s) Message is too long or too complex. Please shorten.'
+			$new_errors[] = sprintf($lang_common['BBerr pcre'], preg_error());
+			$contents = ''; // Zero out the contents.
 		}
-
-		unset($inside);
 	}
-
-	$temp_text = false;
-	if (empty($errors))
-		$temp_text = preparse_tags($text, $errors, $is_signature);
-
-	if ($temp_text !== false)
-		$text = $temp_text;
-
-	// Remove empty tags
-	while (($new_text = strip_empty_bbcode($text, $errors)) !== false)
-	{
-		if ($new_text != $text)
-		{
-			$text = $new_text;
-			if ($new_text == '')
-			{
-				$errors[] = $lang_post['Empty after strip'];
-				break;
+	// ---------------------------------------------------------------------------------------
+	// Process optional $attribute. Set $fmt_open, $fmt_close and $handler based on attribute.
+	// ---------------------------------------------------------------------------------------
+	$fmt_close = '[/'. $tagname .']';						// BBCode closing tag format specifier string.
+	if ($matches[2]) { 										// Check if attribute specified?
+		// Attribute specified. Pick value from one of the three possible quote delimitations.
+		if ($matches[3]) {									// Non-empty single-quoted value.
+			$attribute =& $matches[3];						// Set attribute to quoted content.
+			$fmt_open = '['. $tagname .'=\'%a_str%\']';		// Set 'single-quoted' opening format.
+		}
+		elseif ($matches[4]) {								// Non-empty double-quoted value.
+			$attribute =& $matches[4];						// Set attribute to quoted content.
+			$fmt_open = '['. $tagname .'="%a_str%"]';		// Set "double-quoted" opening format.
+		}
+		elseif ($matches[5]) {								// Non-empty un-or-any-quoted value.
+			$attribute =& $matches[5];						// Set attribute to unquoted content.
+			$fmt_open = '['. $tagname .'=%a_str%]';			// Set un-'or'-"any"-quoted opening format.
+		}
+		else {												// Otherwise must be empty.
+			$attribute = '';								// Set empty attribute.
+			$fmt_open = '['. $tagname .'=%a_str%]';			// Set empty-attribute opening format.
+		}
+		// Consolidate consecutive attribute whitespace to a single space. Trim start and end.
+		$attribute = preg_replace(array('/\s++/S', '/^ /', '/ $/'), array(' ', '', ''), $attribute);
+
+		// Determine attribute handler: fixed or variable or none.
+		if (isset($tag['handlers'][$attribute])) {			// If attribute matches handler key
+			$handler =& $tag['handlers'][$attribute];		// use the fixed-attribute handler.
+		} elseif (isset($tag['handlers']['ATTRIB'])) {		// Else if we have one, use this tags
+			$handler =& $tag['handlers']['ATTRIB'];			// variable attribute handler. Otherwise...
+		} elseif (isset($tag['handlers']['NO_ATTRIB']) &&	// Otherwise we have an erroneous attribute
+							count($tag['handlers']) === 1)	// which is either unexpected or unrecognized.
+		{ // Error #2: 'Unexpected attribute: "%1$s". (No attribute allowed for [%2$s].'.
+			$handler =& $pd['bbcd']['_ROOT_']['handlers']['NO_ATTRIB'];
+			$new_errors[] = sprintf($lang_common['BBerr unexpected attribute'], $attribute, $tagname);
+		} else
+		{ // Error #3: 'Unrecognized attribute: "%1$s", is not valid for [%2$s].'
+			$handler =& $pd['bbcd']['_ROOT_']['handlers']['NO_ATTRIB'];
+			$new_errors[] = sprintf($lang_common['BBerr unrecognized attribute'], $attribute, $tagname);
+		}
+		// Make sure attribute does nor contain a valid BBcode tag.
+		if (preg_match($pd['re_bbtag'], $attribute))
+		{ // Error #4: 'Attribute may NOT contain open or close bbcode tags'
+			$handler =& $pd['bbcd']['_ROOT_']['handlers']['NO_ATTRIB'];
+			$new_errors[] = $lang_common['BBerr bbcode attribute'];
+		}
+		// Validate and filter tag's attribute value if and according to custom attribute regex.
+		if (isset($handler['a_regex'])) { // Check if this tag has an attribute regex? (very rare)
+			if (preg_match($handler['a_regex'], $attribute, $m)) { // Yes. Check if regex matches attribute?
+				$attribute = $m[1];
+			} else
+			{ // Error #4b: 'Invalid attribute, [%s] requires specific attribute.'
+				$new_errors[] = sprintf($lang_common['BBerr invalid attrib'], $tagname);
 			}
 		}
-		else
-			break;
-	}
-
-	return pun_trim($text);
-}
-
-
-//
-// Strip empty bbcode tags from some text
-//
-function strip_empty_bbcode($text, &$errors)
-{
-	// If the message contains a code tag we have to split it up (empty tags within [code][/code] are fine)
-	if (strpos($text, '[code]') !== false && strpos($text, '[/code]') !== false)
-	{
-		list($inside, $outside) = split_text($text, '[code]', '[/code]', $errors);
-		$text = implode("\1", $outside);
+	} else { // Attribute not specified. Use the NO_ATTRIB handler if it exixts else error.
+		$attribute = '';									// No attribute? Make it so.
+		$fmt_open = '['. $tagname .']';						// Set no-attribute fmt_open string.
+		if (isset($tag['handlers']['NO_ATTRIB'])) {			// If we have one, use this tags
+			$handler =& $tag['handlers']['NO_ATTRIB'];		// no-attribute handler. Otherwise...
+		} else
+		{ // Error #5: '[%1$s] is missing a required attribute.'.
+			$handler =& $pd['bbcd']['_ROOT_']['handlers']['NO_ATTRIB'];
+			$new_errors[] = sprintf($lang_common['BBerr missing attribute'], $tagname);
+		}
 	}
-
-	// Remove empty tags
-	while (($new_text = preg_replace('/\[(b|u|s|ins|del|em|i|h|colou?r|quote|img|url|email|list)(?:\=[^\]]*)?\]\s*\[\/\1\]/', '', $text)) !== NULL)
-	{
-		if ($new_text != $text)
-			$text = $new_text;
-		else
+	// -------------------------------------------------------
+	// Do some validation checks. Fix problems where possible:
+	// -------------------------------------------------------
+	// Handle tag nesting depth overflow.
+	if ($tag['depth'] > $tag['depth_max']) { // Allowable tag nesting level exceeded?
+		switch($tag['nest_type']) {			// Overflow. Handle based upon tag's "nest_type"
+		case 'clip':						// Silently strip overly nested tags and content.
+			$contents = '';
+			break;
+		case 'fix':							// Silently strip overly-nested tags (keep contents).
+			$fmt_open = $fmt_close = '';
 			break;
+		case 'err':	// Error #6: '[%1$s] tag nesting depth: %2$d exceeds allowable limit: %3$d.'.
+			$new_errors[] = sprintf($lang_common['BBerr nesting overflow'],
+								$tagname, $tag['depth'], $tag['depth_max']);
+			break;
+		default:
+		}
 	}
-
-	// If we split up the message before we have to concatenate it together again (code tags)
-	if (isset($inside))
-	{
-		$outside = explode("\1", $text);
-		$text = '';
-
-		$num_tokens = count($outside);
-		for ($i = 0; $i < $num_tokens; ++$i)
-		{
-			$text .= $outside[$i];
-			if (isset($inside[$i]))
-				$text .= '[code]'.$inside[$i].'[/code]';
+	// Verify this tag is not in its parent's excluded tags list.
+	if (isset($pd['bbcd'][$parent]['tags_excluded'][$tagname])) // Are we illegitimate?
+	{	// Yes. Pick between error #6 and #7.
+		if ($parent === $tagname)
+		{ // Error #7: '[%s] was opened within itself, this is not allowed.'
+			$new_errors[] = sprintf($lang_common['BBerr self-nesting'], $tagname);
+		} else
+		{ // Error #8: '[%1$s] was opened within [%2$s], this is not allowed.'
+			$new_errors[] = sprintf($lang_common['BBerr invalid nesting'], $tagname, $parent);
 		}
 	}
-
-	// Remove empty code tags
-	while (($new_text = preg_replace('/\[(code)\]\s*\[\/\1\]/', '', $text)) !== NULL)
-	{
-		if ($new_text != $text)
-			$text = $new_text;
-		else
-			break;
+	// Verfify our parent tag is in our 'parents' allowable array if it exists.
+	if (isset($tag['parents']) && !isset($tag['parents'][$parent]))
+	{ // Error #9: '[%1$s] cannot be within: [%2$s]. Allowable parent tags: %3$s.'.
+		$new_errors[] = sprintf($lang_common['BBerr invalid parent'],
+			$tagname, $parent, '('. implode('), (', array_keys($tag['parents'])) .')');
 	}
-
-	return $text;
-}
-
-
-//
-// Check the structure of bbcode tags and fix simple mistakes where possible
-//
-function preparse_tags($text, &$errors, $is_signature = false)
-{
-	global $lang_common, $pun_config;
-
-	// Start off by making some arrays of bbcode tags and what we need to do with each one
-
-	// List of all the tags
-	$tags = array('quote', 'code', 'b', 'i', 'u', 's', 'ins', 'del', 'em', 'color', 'colour', 'url', 'email', 'img', 'list', '*', 'h');
-	// List of tags that we need to check are open (You could not put b,i,u in here then illegal nesting like [b][i][/b][/i] would be allowed)
-	$tags_opened = $tags;
-	// and tags we need to check are closed (the same as above, added it just in case)
-	$tags_closed = $tags;
-	// Tags we can nest and the depth they can be nested to
-	$tags_nested = array('quote' => $pun_config['o_quote_depth'], 'list' => 5, '*' => 5);
-	// Tags to ignore the contents of completely (just code)
-	$tags_ignore = array('code');
-	// Block tags, block tags can only go within another block tag, they cannot be in a normal tag
-	$tags_block = array('quote', 'code', 'list', 'h', '*');
-	// Inline tags, we do not allow new lines in these
-	$tags_inline = array('b', 'i', 'u', 's', 'ins', 'del', 'em', 'color', 'colour', 'h');
-	// Tags we trim interior space
-	$tags_trim = array('img');
-	// Tags we remove quotes from the argument
-	$tags_quotes = array('url', 'email', 'img');
-	// Tags we limit bbcode in
-	$tags_limit_bbcode = array(
-		'*' 	=> array('b', 'i', 'u', 's', 'ins', 'del', 'em', 'color', 'colour', 'url', 'email', 'list', 'img', 'code'),
-		'list' 	=> array('*'),
-		'url' 	=> array('b', 'i', 'u', 's', 'ins', 'del', 'em', 'color', 'colour', 'img'),
-		'email' => array('b', 'i', 'u', 's', 'ins', 'del', 'em', 'color', 'colour', 'img'),
-		'img' 	=> array(),
-		'h'		=> array('b', 'i', 'u', 's', 'ins', 'del', 'em', 'color', 'colour', 'url', 'email'),
-	);
-	// Tags we can automatically fix bad nesting
-	$tags_fix = array('quote', 'b', 'i', 'u', 's', 'ins', 'del', 'em', 'color', 'colour', 'url', 'email', 'h');
-
-	$split_text = preg_split("/(\[[\*a-zA-Z0-9-\/]*?(?:=.*?)?\])/", $text, -1, PREG_SPLIT_DELIM_CAPTURE|PREG_SPLIT_NO_EMPTY);
-
-	$open_tags = array('post');
-	$open_args = array('');
-	$opened_tag = 0;
-	$new_text = '';
-	$current_ignore = '';
-	$current_nest = '';
-	$current_depth = array();
-	$limit_bbcode = $tags;
-
-	foreach ($split_text as $current)
-	{
-		if ($current == '')
-			continue;
-
-		// Are we dealing with a tag?
-		if (substr($current, 0, 1) != '[' || substr($current, -1, 1) != ']')
-		{
-			// It's not a bbcode tag so we put it on the end and continue
-
-			// If we are nested too deeply don't add to the end
-			if ($current_nest)
-				continue;
-
-			$current = str_replace("\r\n", "\n", $current);
-			$current = str_replace("\r", "\n", $current);
-			if (in_array($open_tags[$opened_tag], $tags_inline) && strpos($current, "\n") !== false)
-			{
-				// Deal with new lines
-				$split_current = preg_split("/(\n\n+)/", $current, -1, PREG_SPLIT_DELIM_CAPTURE|PREG_SPLIT_NO_EMPTY);
-				$current = '';
-
-				if (!pun_trim($split_current[0], "\n")) // The first part is a linebreak so we need to handle any open tags first
-					array_unshift($split_current, '');
-
-				for ($i = 1; $i < count($split_current); $i += 2)
-				{
-					$temp_opened = array();
-					$temp_opened_arg = array();
-					$temp = $split_current[$i - 1];
-					while (!empty($open_tags))
-					{
-						$temp_tag = array_pop($open_tags);
-						$temp_arg = array_pop($open_args);
-
-						if (in_array($temp_tag , $tags_inline))
-						{
-							array_push($temp_opened, $temp_tag);
-							array_push($temp_opened_arg, $temp_arg);
-							$temp .= '[/'.$temp_tag.']';
-						}
-						else
-						{
-							array_push($open_tags, $temp_tag);
-							array_push($open_args, $temp_arg);
-							break;
-						}
-					}
-					$current .= $temp.$split_current[$i];
-					$temp = '';
-					while (!empty($temp_opened))
-					{
-						$temp_tag = array_pop($temp_opened);
-						$temp_arg = array_pop($temp_opened_arg);
-						if (empty($temp_arg))
-							$temp .= '['.$temp_tag.']';
-						else
-							$temp .= '['.$temp_tag.'='.$temp_arg.']';
-						array_push($open_tags, $temp_tag);
-						array_push($open_args, $temp_arg);
-					}
-					$current .= $temp;
-				}
-
-				if (array_key_exists($i - 1, $split_current))
-					$current .= $split_current[$i - 1];
-			}
-
-			if (in_array($open_tags[$opened_tag], $tags_trim))
-				$new_text .= pun_trim($current);
-			else
-				$new_text .= $current;
-
-			continue;
-		}
-
-		// Get the name of the tag
-		$current_arg = '';
-		if (strpos($current, '/') === 1)
-		{
-			$current_tag = substr($current, 2, -1);
+	// -----------------------------------------
+	// Perform content-type-specific processing:
+	// -----------------------------------------
+	switch($handler['c_type']) {
+	case 'width_height':
+		if (preg_match('/\b(\d++)[Xx](\d++)\b/S', $contents, $m)) {
+			$width = (int)$m[1];
+			$height = (int)$m[2];
 		}
-		else if (strpos($current, '=') === false)
-		{
-			$current_tag = substr($current, 1, -1);
+		if (preg_match('/\bw(?:idth)?+\s*+=\s*+[\'"]?+(\d++)\b/Si',  $contents, $m)) $width  = (int)$m[1];
+		if (preg_match('/\bh(?:eight)?+\s*+=\s*+[\'"]?+(\d++)\b/Si', $contents, $m)) $height = (int)$m[1];
+		if (isset($height, $tag['x_padding'], $tag['y_padding'])) {
+			$height -= $tag['y_padding'] - $tag['x_padding']; // Adjust for height of embedded controller.
 		}
-		else
-		{
-			$current_tag = substr($current, 1, strpos($current, '=')-1);
-			$current_arg = substr($current, strpos($current, '=')+1, -1);
+		break;
+
+	case 'url':
+		// Sanitize contents which is (hopefully) a url link. Trim spaces.
+		$contents = preg_replace(array('/^\s+/', '/\s+$/S'), '', $contents);
+		// Handle special case link to a
+		if (($m = url_valid($contents))) {
+			$contents = $m['url']; // Fetch possibly more complete url address.
+		} else
+		{ // Error #10a: 'Invalid URL name: %s'.
+			$new_errors[] = sprintf($lang_common['BBerr Invalid URL name'], $contents);
 		}
-		$current_tag = strtolower($current_tag);
-
-		// Is the tag defined?
-		if (!in_array($current_tag, $tags))
-		{
-			// It's not a bbcode tag so we put it on the end and continue
-			if (!$current_nest)
-				$new_text .= $current;
+		break;
 
-			continue;
+	case 'email':
+		// TODO: improve this quick-n-dirty email check.
+		if (!preg_match('/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,6}$/i', $contents))
+		{ // Error #10c: 'Invalid email address: %s'.
+			$new_errors[] = sprintf($lang_common['BBerr Invalid email address'], $contents);
 		}
-
-		// We definitely have a bbcode tag
-
-		// Make the tag string lower case
-		if ($equalpos = strpos($current,'='))
-		{
-			// We have an argument for the tag which we don't want to make lowercase
-			if (strlen(substr($current, $equalpos)) == 2)
-			{
-				// Empty tag argument
-				$errors[] = sprintf($lang_common['BBCode error empty attribute'], $current_tag);
-				return false;
+		break;
+
+	default:
+	} // End c_type switch().
+	// -------------------------------------------
+	// Perform attribute-type-specific processing:
+	// -------------------------------------------
+	switch($handler['a_type']) {
+	case 'width_height':
+		if ($attribute) {
+			if (preg_match('/\b(\d++)[Xx](\d++)\b/', $attribute, $m)) {	// Check for a "123x456" WxH spec?
+				$width = (int)$m[1];									// Yes. Set both dimensions.
+				$height = (int)$m[2];
 			}
-			$current = strtolower(substr($current, 0, $equalpos)).substr($current, $equalpos);
+			if (preg_match('/\bw(?:idth)?+\s*+=\s*+[\'"]?+(\d++)\b/i', $attribute, $m))  $width  = (int)$m[1];
+			if (preg_match('/\bh(?:eight)?+\s*+=\s*+[\'"]?+(\d++)\b/i', $attribute, $m)) $height = (int)$m[1];
+			$attribute = preg_replace('/[;\s]?+\b(?:(?:w(?:idth)?+|h(?:eight)?+)\s*+=\s*+|\d++[Xx])\d++\b/Si',
+							'', $attribute);
 		}
-		else
-			$current = strtolower($current);
-
-		// This is if we are currently in a tag which escapes other bbcode such as code
-		if ($current_ignore)
-		{
-			if ('[/'.$current_ignore.']' == $current)
-			{
-				// We've finished the ignored section
-				$current = '[/'.$current_tag.']';
-				$current_ignore = '';
-			}
-
-			$new_text .= $current;
-
-			continue;
+		break;
+
+	case 'url':
+		if (($m = url_valid($attribute))) {
+			$attribute = $m['url']; // Fetch possibly more complete url address.
+		} else
+		{ // Error #10b: 'Invalid URL name: %s'.
+			$new_errors[] = sprintf($lang_common['BBerr Invalid URL name'], $attribute);
 		}
+		break;
 
-		if ($current_nest)
-		{
-			// We are currently too deeply nested so lets see if we are closing the tag or not
-			if ($current_tag != $current_nest)
-				continue;
-
-			if (substr($current, 1, 1) == '/')
-				$current_depth[$current_nest]--;
-			else
-				$current_depth[$current_nest]++;
-
-			if ($current_depth[$current_nest] <= $tags_nested[$current_nest])
-				$current_nest = '';
-
-			continue;
+	case 'color':
+		if (!preg_match($pd['re_color'], $attribute))
+		{ // Error #11: 'Invalid color attribute: %s'.
+			$new_errors[] = sprintf($lang_common['BBerr Invalid color'], $attribute);
 		}
+		break;
 
-		// Check the current tag is allowed here
-		if (!in_array($current_tag, $limit_bbcode) && $current_tag != $open_tags[$opened_tag])
-		{
-			$errors[] = sprintf($lang_common['BBCode error invalid nesting'], $current_tag, $open_tags[$opened_tag]);
-			return false;
+	case 'email':
+		// TODO: improve this quick-n-dirty email check.
+		if (!preg_match('/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,6}$/i', $attribute))
+		{ // Error #10c: 'Invalid email address: %s'.
+			$new_errors[] = sprintf($lang_common['BBerr Invalid email address'], $attribute);
 		}
-
-		if (substr($current, 1, 1) == '/')
-		{
-			// This is if we are closing a tag
-
-			if ($opened_tag == 0 || !in_array($current_tag, $open_tags))
-			{
-				// We tried to close a tag which is not open
-				if (in_array($current_tag, $tags_opened))
-				{
-					$errors[] = sprintf($lang_common['BBCode error no opening tag'], $current_tag);
-					return false;
-				}
-			}
-			else
-			{
-				// Check nesting
-				while (true)
-				{
-					// Nesting is ok
-					if ($open_tags[$opened_tag] == $current_tag)
-					{
-						array_pop($open_tags);
-						array_pop($open_args);
-						$opened_tag--;
-						break;
-					}
-
-					// Nesting isn't ok, try to fix it
-					if (in_array($open_tags[$opened_tag], $tags_closed) && in_array($current_tag, $tags_closed))
-					{
-						if (in_array($current_tag, $open_tags))
-						{
-							$temp_opened = array();
-							$temp_opened_arg = array();
-							$temp = '';
-							while (!empty($open_tags))
-							{
-								$temp_tag = array_pop($open_tags);
-								$temp_arg = array_pop($open_args);
-
-								if (!in_array($temp_tag, $tags_fix))
-								{
-									// We couldn't fix nesting
-									$errors[] = sprintf($lang_common['BBCode error no closing tag'], array_pop($temp_opened));
-									return false;
-								}
-								array_push($temp_opened, $temp_tag);
-								array_push($temp_opened_arg, $temp_arg);
-
-								if ($temp_tag == $current_tag)
-									break;
-								else
-									$temp .= '[/'.$temp_tag.']';
-							}
-							$current = $temp.$current;
-							$temp = '';
-							array_pop($temp_opened);
-							array_pop($temp_opened_arg);
-
-							while (!empty($temp_opened))
-							{
-								$temp_tag = array_pop($temp_opened);
-								$temp_arg = array_pop($temp_opened_arg);
-								if (empty($temp_arg))
-									$temp .= '['.$temp_tag.']';
-								else
-									$temp .= '['.$temp_tag.'='.$temp_arg.']';
-								array_push($open_tags, $temp_tag);
-								array_push($open_args, $temp_arg);
-							}
-							$current .= $temp;
-							$opened_tag--;
-							break;
+		break;
+
+	default:
+	} // End a_type switch().
+
+	// ----------------------------------------------------------
+	// Perform tag-specific processing of attribute and contents:
+	// ----------------------------------------------------------
+	switch($tagname) {
+	case 'img': // Handle bad image url, file too big, then scale-to-fit within forum defaults if too large.
+		if ($tag['depth'] === 1) { // Check if not overly nested?
+			if (($pd['ipass'] === 2) && $pd['config']['valid_imgs'] && url_valid($contents)) { // Valid URI?
+				// Yes. Fetch file headers containing file type and size ("Content-Type" and "Content-Length").
+				// ??? Should this call to get_headers have an @ in case of weird errors?
+				if (($http = get_headers($contents)) !== FALSE && is_array($http)) {
+					if (preg_match('/\b200\s++OK\s*+$/i', $http[0])) { // Good response header?
+						for ($i = 1, $len = count($http); $i < $len; ++$i) { // Yes. Loop through HTTP response headers.
+							if (preg_match('/^\s*+Content-Length\s*+:\s*+(\d++)\s*+$/i', $http[$i], $m))
+								$size = (int)$m[1];				// File size found.
+							if (preg_match('/^\s*+Content-Type\s*+:\s*+image\/(.++)$/i', $http[$i], $m))
+								$type = $m[1];					// Image file type found.
 						}
-						else
-						{
-							// We couldn't fix nesting
-							$errors[] = sprintf($lang_common['BBCode error no opening tag'], $current_tag);
-							return false;
+						// Verify Content-Type is an image.
+						if (isset($type)) {
+							// Verify remote file size is not too big. (If too big, handle error.)
+							if (isset($size)) {
+								if ($size <= $pd['config']['max_size']) {
+									// Filesize is ok. Do nothing.
+									if (($info = @getimagesize($contents)) && is_array($info)) {// Fetch width & height.
+										// Now we know the filesize, width and height of remote image.
+						                if (($iwidth = (int)$info[0]) && ($iheight = (int)$info[1])) {
+						                	// To resize or not resize, that is the question.
+						                	// If bigger than default, scale down. Otherwise dont touch.
+											// Scale image to fit within forum default width/height box dimensions.
+											$ar = ((float)$iwidth) / ((float)$iheight);
+											// Otherwise, for images that naturally fit inside the box,
+											// leave the attribute clean (or unset).
+											if (	!isset($width) && !isset($height) &&
+													( 	$iwidth > $pd['config']['def_width'] ||
+														$iheight > $pd['config']['def_height'] )
+											) {	// Remote file dimensions are too big to fit within default box.
+												// Explicitly scale a new width and height in IMG attribute.
+												$width = $pd['config']['def_width'];
+												$height = (int)((((float)$width) / $ar) + 0.5);
+												if ($height > $pd['config']['def_height']) {
+													$height = $pd['config']['def_height'];
+													$width = (int)((((float)$height) * $ar) + 0.5);
+												}
+											} // Else remote image fits. Do nothing special with width and height.
+										}
+									} else
+									{ // Error #13: 'Unable to retrieve image data from remote url: %s'.
+										$new_errors[] = sprintf($lang_common['BBerr bad meta data'], $contents);
+									} // NOTE: cannot generate this error.
+								} else
+								{ // Filesize of remote image is too big. Silently convert to link if possible.
+									if (isset($pd['bbcd']['url']) && $pd['bbcd']['url']['depth'] === 0) {
+										$fmt_open  = '{[url='. $contents .']';
+										$fmt_close = '[/url]}';
+										$contents = $lang_common['BBmsg big image'];
+									} else { // Image within a url cannot be linkified. Just display url name.
+										$contents = '{'. $contents .'}';
+										$fmt_open  = '';
+										$fmt_close = '';
+									}
+								}
+							} else // $size not set.
+							{ // Error #14: 'Unable to determine remote file size.'.
+								$new_errors[] = $lang_common['BBerr no file size'];
+							} // NOTE: cannot generate this error.
+						} else
+						{ // Error #15: 'Remote url does not have Content-Type: "image".'
+							$new_errors[] = $lang_common['BBerr non image'];
 						}
+					} else
+					{ // Error #16: 'Bad HTTP response header: "%s"'.
+						$new_errors[] = sprintf($lang_common['BBerr bad http response'], $http[0]);
 					}
-					else if (in_array($open_tags[$opened_tag], $tags_closed))
-						break;
-					else
-					{
-						array_pop($open_tags);
-						array_pop($open_args);
-						$opened_tag--;
-					}
+				} else
+				{ // Error #17: 'Unable to read remote image http headers.'.
+					$new_errors[] = $lang_common['BBerr bad headers'];
 				}
-			}
-
-			if (in_array($current_tag, array_keys($tags_nested)))
-			{
-				if (isset($current_depth[$current_tag]))
-					$current_depth[$current_tag]--;
-			}
-
-			if (in_array($open_tags[$opened_tag], array_keys($tags_limit_bbcode)))
-				$limit_bbcode = $tags_limit_bbcode[$open_tags[$opened_tag]];
-			else
-				$limit_bbcode = $tags;
-
-			$new_text .= $current;
 
-			continue;
+			} // Image validation turned off. Do nothing.
+		} else
+		{ // Non-Error: IMG tag self nesting. Handle by silently stripping tags with no error.
+			$fmt_open = $fmt_close = '';
 		}
-		else
-		{
-			// We are opening a tag
-			if (in_array($current_tag, array_keys($tags_limit_bbcode)))
-				$limit_bbcode = $tags_limit_bbcode[$current_tag];
-			else
-				$limit_bbcode = $tags;
-
-			if (in_array($current_tag, $tags_block) && !in_array($open_tags[$opened_tag], $tags_block) && $opened_tag != 0)
-			{
-				// We tried to open a block tag within a non-block tag
-				$errors[] = sprintf($lang_common['BBCode error invalid nesting'], $current_tag, $open_tags[$opened_tag]);
-				return false;
-			}
-
-			if (in_array($current_tag, $tags_ignore))
-			{
-				// It's an ignore tag so we don't need to worry about what's inside it
-				$current_ignore = $current_tag;
-				$new_text .= $current;
-				continue;
-			}
-
-			// Deal with nested tags
-			if (in_array($current_tag, $open_tags) && !in_array($current_tag, array_keys($tags_nested)))
-			{
-				// We nested a tag we shouldn't
-				$errors[] = sprintf($lang_common['BBCode error invalid self-nesting'], $current_tag);
-				return false;
-			}
-			else if (in_array($current_tag, array_keys($tags_nested)))
-			{
-				// We are allowed to nest this tag
-
-				if (isset($current_depth[$current_tag]))
-					$current_depth[$current_tag]++;
-				else
-					$current_depth[$current_tag] = 1;
-
-				// See if we are nested too deep
-				if ($current_depth[$current_tag] > $tags_nested[$current_tag])
-				{
-					$current_nest = $current_tag;
-					continue;
+		break;
+
+	case 'list': // Fixup lists within lists. In lists, everything must be in a [*] tag.
+		// Check if LIST contents well-formed.
+		if ($pd['ipass'] === 2 && !preg_match('% # Rev:20110220_1200
+			^\s*+  # This regex validates well-formed list content.
+			(?:
+			  \[\*\]
+			  [^[]*+(?:(?!\[/?\*\])\[[^[]*+)*+
+			  \[/\*\]\s*+
+			)++
+			$
+			%x', $contents))
+		{ // Not well formed. Do fixup to ensure list contents are only * tags.
+			// First regex wraps invalid characters at start of LIST in a [*]...[/*] tag.
+			$contents = preg_replace($pd['re_fixlist_1'], '[*]$1[/*]', $contents);
+			// Second regex wraps invalid characters between [/*] and [*] (or [/list]).
+			$contents = preg_replace($pd['re_fixlist_2'], '$1[/*]', $contents);
+		} // Well-formed LIST contents!
+		if ($parent === 'list') {
+			$fmt_open = '[*]'. $fmt_open;
+			$fmt_close .= '[/*]';
+		}
+		break;
+
+	default:
+		break;
+	} // End switch statement.
+	// -------------------------------------------
+	// Process width and height values if present.
+	// -------------------------------------------
+	if (isset($width) || isset($height)) { // Check if dimension specified in attrib or contents?
+		// Yes. Clip both $width and/or $height to their respective config maximums.
+		if (isset($width)) {							// Clip to max. Set to default if zero.
+			if ($width > $pd['config']['max_width'])	$width = $pd['config']['max_width'];
+			elseif ($width === 0)						$width = $pd['config']['def_width'];
+		}
+		if (isset($height)) {							// Clip to max. Set to default if zero.
+			if ($height > $pd['config']['max_height'])	$height = $pd['config']['max_height'];
+			elseif ($height === 0)						$height = $pd['config']['def_height'];
+		}
+		if (isset($ar)) { // If the real image dimensions are known ($ar), then adjust to fit in box and maintain $ar.
+			if (isset($width) && isset($height)) {		// Check if both dimensions set?
+				if ($ar > (((float)$width) / ((float)$height))) {	// Yes. Check if $width more precise than $height?
+					$height = (int)((((float)$width) / $ar) + 0.5); // Yes. Compute height from width and AR.
+					if ($height > $pd['config']['max_height']) {
+						$height = $pd['config']['max_height'];
+						$width = (int)((((float)$height) * $ar) + 0.5);
+					}
+				} else {
+					$width = (int)((((float)$height) * $ar) + 0.5); // Compute width from height and AR.
+					if ($width > $pd['config']['max_width']) {
+						$width = $pd['config']['max_width'];
+						$height = (int)((((float)$width) / $ar) + 0.5);
+					}
+				}
+			} elseif (isset($width)) {
+				$height = (int)((((float)$width) / $ar) + 0.5);		// Compute height from width and AR.
+				if ($height > $pd['config']['max_height']) {
+					$height = $pd['config']['max_height'];
+					$width = (int)((((float)$height) * $ar) + 0.5);
+				}
+			} else {
+				$width = (int)((((float)$height) * $ar) + 0.5); 	// Compute width from height and AR.
+				if ($width > $pd['config']['max_width']) {
+					$width = $pd['config']['max_width'];
+					$height = (int)((((float)$width) / $ar) + 0.5);
 				}
 			}
-
-			// Remove quotes from arguments for certain tags
-			if (strpos($current, '=') !== false && in_array($current_tag, $tags_quotes))
-			{
-				$current = preg_replace('#\['.$current_tag.'=("|\'|)(.*?)\\1\]\s*#i', '['.$current_tag.'=$2]', $current);
-			}
-
-			if (in_array($current_tag, array_keys($tags_limit_bbcode)))
-				$limit_bbcode = $tags_limit_bbcode[$current_tag];
-
-			$open_tags[] = $current_tag;
-			$open_args[] = $current_arg;
-			$opened_tag++;
-			$new_text .= $current;
-			continue;
 		}
+		// Unconditionally write width and/or height data back into attribute.
+		if ($width === 0) $width = 1;
+		if ($height === 0) $height = 1;
+		if ($attribute) $attribute .= ';';				// Add delimiter for non-empty attrib.
+		if (isset($width) && isset($height)) {
+			$attribute .= $width .'x'. $height;
+		} elseif (isset($width)) {
+			$attribute .= 'w='. $width;
+		} else {
+			$attribute .= 'h='. $height;
+		}
+		$fmt_open = '['. $tagname .'=%a_str%]';	// Set open tag format to receive attribute.
 	}
-
-	// Check we closed all the tags we needed to
-	foreach ($tags_closed as $check)
-	{
-		if (in_array($check, $open_tags))
-		{
-			// We left an important tag open
-			$errors[] = sprintf($lang_common['BBCode error no closing tag'], $check);
-			return false;
+	// Validate and filter tag's contents if and according to optional contents regex.
+	if (isset($handler['c_regex'])) { // Check if this tag has a contents regex? (youtube, vimeo, etc.)
+		// Yes. Check if regex matches contents?
+		if (preg_match($handler['c_regex'], $contents, $m)) $contents = $m[1];
+		else
+		{ // Error #12: 'Invalid content, [%s] requires specific content.'
+			$new_errors[] = sprintf($lang_common['BBerr invalid content'], $tagname);
 		}
 	}
-
-	if ($current_ignore)
-	{
-		// We left an ignore tag open
-		$errors[] = sprintf($lang_common['BBCode error no closing tag'], $current_ignore);
-		return false;
+	// Silently strip empty or all-white tags:
+	if (preg_match('/^\s*+$/', $contents)) $contents = '';
+
+	// Unconditionally hide all opening square brackets within hidden CODE contents.
+	// This is necessary otherwise the LIST fixup code would process "[*]" within CODE tags.
+	// These \3 byte markers are subsequently removed by preparse_bbcode().
+	if ($tag['tag_type'] === 'hidden') {
+		$contents = str_replace('[', "\3", $contents);
 	}
-
-	return $new_text;
-}
-
-
-//
-// Preparse the contents of [list] bbcode
-//
-function preparse_list_tag($content, $type = '*', &$errors)
-{
-	global $lang_common, $re_list;
-
-	if (strlen($type) != 1)
-		$type = '*';
-
-	if (strpos($content,'[list') !== false)
-	{
-		$content = preg_replace($re_list, 'preparse_list_tag(\'$2\', \'$1\', $errors)', $content);
+	// On first pass, fix inline tags which span paragraphs by closting then re-opening.
+	if ($pd['ipass'] === 1 && $tag['html_type'] === 'inline' &&
+			$tag['tag_type'] !== 'hidden' && strpos($contents, "\n") !== FALSE) {
+		$contents = preg_replace('/\n\s*?\n\s*/',
+			"\1\2". $fmt_close ."\1".'$0'."\1\2". str_replace('%a_str%', $attribute, $fmt_open) ."\1", $contents);
 	}
-
-	$items = explode('[*]', str_replace('\"', '"', $content));
-
-	$content = '';
-	foreach ($items as $item)
-	{
-		if (pun_trim($item) != '')
-			$content .= '[*'."\0".']'.str_replace('[/*]', '', pun_trim($item)).'[/*'."\0".']'."\n";
+	// ***********************************************************************************
+	// Handle errors. Wrap this tags open and close BBCode tag each in a valid [err] tag.
+	// ***********************************************************************************
+	if (isset($new_errors) && $fmt_open)	// check if we detected any errors?
+	{ // Yes, we have detected one or more new error conditions.
+		foreach($new_errors as $errmsg) // Push all new errors on g errors array.
+			$pd['new_errors'][] = htmlspecialchars($errmsg);
+ 		// Wrap offending BBCode open and close tags each in its own valid error tag (last err only).
+		$fmt_open  = '[err='. $errmsg .']'. $fmt_open  . '[/err]';	// Wrap tags in the last error message.
+		$fmt_close = '[err='. $errmsg .']'. $fmt_close . '[/err]';
 	}
 
-	return '[list='.$type.']'."\n".$content.'[/list]';
-}
-
+	// -----------------------------------------------------------------------------
+	// All done processing. Substitute $attribute and $contents into format strings:
+	// -----------------------------------------------------------------------------
+	if ($contents) {
+		if ($pd['ipass'] === 1) {					// Add byte markers on first pass.
+			if ($tag['tag_type'] === 'hidden' || $handler['c_type'] == 'url')
+					$text = "\1\2". $fmt_open .'%c_str%'. $fmt_close ."\1";
+			else	$text = "\1\2". $fmt_open ."\1%c_str%\1\2". $fmt_close ."\1";
+		} else		$text = $fmt_open .'%c_str%'. $fmt_close; // Pass 2, dont bother with byte markers.
+		$text = str_replace('%a_str%', $attribute, $text);
+		$text = str_replace('%c_str%', $contents, $text);
+	} else $text = '';
+	array_pop($pd['tag_stack']);							// Were done. Pop this tag off the stack.
+	$tag['depth']--;										// Restore pre-call tag specific depth.
+	return $text;
+} // Exit _preparse_bbcode_callback
 
-//
-// Truncate URL if longer than 55 characters (add http:// or ftp:// if missing)
-//
-function handle_url_tag($url, $link = '', $bbcode = false)
-{
-	$url = pun_trim($url);
-	$full_url = str_replace(array(' ', '\'', '`', '"'), array('%20', '', '', ''), $url);
-	if (strpos($url, 'www.') === 0) // If it starts with www, we add http://
-		$full_url = 'http://'.$full_url;
-	else if (strpos($url, 'ftp.') === 0) // Else if it starts with ftp, we add ftp://
-		$full_url = 'ftp://'.$full_url;
-	else if (!preg_match('#^([a-z0-9]{3,6})://#', $url)) // Else if it doesn't start with abcdef://, we add http://
-		$full_url = 'http://'.$full_url;
-
-	// Ok, not very pretty :-)
-	if ($bbcode)
-	{
-		if ($full_url == $link)
-			return '[url]'.$link.'[/url]';
-		else
-			return '[url='.$full_url.']'.$link.'[/url]';
+/**----------------------------------------------------------------
+ * Pre-process text containing BBCodes. Check for integrity,
+ * well-formedness, nesting, etc. Flag errors by wrapping offending
+ * tags in a special [err] tag.
+ *-----------------------------------------------------------------
+ */
+function preparse_bbcode($text, &$errors, $is_signature = false) {
+	global $lang_common, $pun_config, $pun_user, $pd;
+	$pd['new_errors'] = array(); // Reset the parser error message stack.
+	$pd['in_signature'] = ($is_signature) ? TRUE : FALSE;
+	$pd['ipass'] = 1;
+	$newtext = preg_replace_callback($pd['re_bbcode'], '_preparse_bbcode_callback', $text);
+	if ($newtext === NULL) // On error, preg_replace_callback returns NULL.
+	{ // Error #1: '(%s) Message is too long or too complex. Please shorten.'
+		$errors[] = sprintf($lang_common['BBerr pcre'], preg_error());
+		return $text;
 	}
-	else
-	{
-		if ($link == '' || $link == $url)
-		{
-			$url = pun_htmlspecialchars_decode($url);
-			$link = utf8_strlen($url) > 55 ? utf8_substr($url, 0 , 39).' … '.utf8_substr($url, -10) : $url;
-			$link = pun_htmlspecialchars($link);
-		}
-		else
-			$link = stripslashes($link);
-
-		return '<a href="'.$full_url.'">'.$link.'</a>';
+	$newtext = str_replace("\3", '[', $newtext); // Fixup CODE sections.
+	$parts = explode("\1", $newtext); // Hidden chunks pre-marked like so: "\1\2<code.../code>\1"
+	for ($i = 0, $len = count($parts); $i < $len; ++$i) {	// Loop through hidden and non-hidden text chunks.
+		$part =& $parts[$i];								// Use shortcut alias
+		if (empty($part)) continue;							// Skip empty string chunks.
+		if ($part[0] !== "\2") { // If not hidden, process this normal text content.
+			// Mark erroneous orphan tags.
+			$part = preg_replace_callback($pd['re_bbtag'], '_orphan_callback', $part);
+			// Process do-clickeys if enabled.
+			if ($pun_config['o_make_links'])
+				$part = linkify($part);
+			// Process textile syntax tag shortcuts.
+			if ($pd['config']['textile']) {
+				// Do phrase replacements.
+				$part = preg_replace_callback($pd['re_textile'],
+							'_textile_phrase_callback', $part);
+				// Do lists.
+				$part = preg_replace_callback('/^([*#]) .*+(?:\n\1 .*+)++$/Sm',
+							'_textile_list_callback', $part);
+			}
+			$part = preg_replace('/^[ \t]++$/m', '', $part);	// Clear "white" lines of spaces and tabs.
+		} else $part = substr($part, 1); // For hidden chunks, strip \2 marker byte.
+	}
+	$text = implode("", $parts); // Put hidden and non-hidden chunks back together.
+	$pd['ipass'] = 2; // Run a second pass through parser to clean changed content.
+	$text = preg_replace_callback($pd['re_bbcode'], '_preparse_bbcode_callback', $text);
+	$text = str_replace("\3", '[', $text); // Fixup CODE sections.
+	if (!empty($pd['new_errors'])) {
+		foreach($pd['new_errors'] as $errmsg) $errors[] = $errmsg; // Push all new errors on global array.
 	}
+	return $text;
 }
-
-
 //
-// Turns an URL from the [img] tag into an <img> tag or a <a href...> tag
+// Helper preg_replace_callback function for orphan processing.
 //
-function handle_img_tag($url, $is_signature = false, $alt = null)
-{
-	global $lang_common, $pun_user;
-
-	if ($alt == null)
-		$alt = basename($url);
-
-	$img_tag = '<a href="'.$url.'">&lt;'.$lang_common['Image link'].' - '.$alt.'&gt;</a>';
-
-	if ($is_signature && $pun_user['show_img_sig'] != '0')
-		$img_tag = '<img class="sigimage" src="'.$url.'" alt="'.$alt.'" />';
-	else if (!$is_signature && $pun_user['show_img'] != '0')
-		$img_tag = '<span class="postimg"><img src="'.$url.'" alt="'.$alt.'" /></span>';
-
-	return $img_tag;
+function _orphan_callback($matches) {
+	global $pd, $lang_common;
+	if ($matches[0][1] === '/')
+	{ // Error #18: 'Orphan close tag: [/%s] is missing its open tag.'
+		$errmsg = sprintf($lang_common['BBerr orphan close'], $matches[1]);
+	} else
+	{ // Error #19: 'Orphan open tag: [%s] is missing its close tag.'
+		$errmsg = sprintf($lang_common['BBerr orphan open'], $matches[1]);
+	}
+	$pd['new_errors'][] = $errmsg;	// Append to array of errors so far.
+	return '[err='. $errmsg .']'. $matches[0] .'[/err]';
 }
-
-
 //
-// Parse the contents of [list] bbcode
+// Helper preg_replace_callback function for textile lists processing.
 //
-function handle_list_tag($content, $type = '*')
-{
-	global $re_list;
-
-	if (strlen($type) != 1)
-		$type = '*';
-
-	if (strpos($content,'[list') !== false)
-	{
-		$content = preg_replace($re_list, 'handle_list_tag(\'$2\', \'$1\')', $content);
+function _textile_list_callback($matches) {
+	global $pd;
+	if (!isset($pd['bbcd']['list'])) return $matches[0];
+	$parts = preg_split('/(?:^|\n)\\'. $matches[1] .' /S', $matches[0], -1, PREG_SPLIT_NO_EMPTY);
+	switch ($matches[1]) {
+	case '*': return "[list]\n[*]". implode("[/*]\n[*]", $parts) ."[/*]\n[/list]";
+	case '#': return "[list=1]\n[*]". implode("[/*]\n[*]", $parts) ."[/*]\n[/list]";
 	}
-
-	$content = preg_replace('#\s*\[\*\](.*?)\[/\*\]\s*#s', '<li><p>$1</p></li>', pun_trim($content));
-
-	if ($type == '*')
-		$content = '<ul>'.$content.'</ul>';
-	else
-		if ($type == 'a')
-			$content = '<ol class="alpha">'.$content.'</ol>';
-		else
-			$content = '<ol class="decimal">'.$content.'</ol>';
-
-	return '</p>'.$content.'<p>';
 }
-
-
 //
-// Convert BBCodes to their HTML equivalent
+// Helper preg_replace_callback function for textile processing.
 //
-function do_bbcode($text, $is_signature = false)
-{
-	global $lang_common, $pun_user, $pun_config, $re_list;
-
-	if (strpos($text, '[quote') !== false)
-	{
-		$text = preg_replace('#\[quote\]\s*#', '</p><div class="quotebox"><blockquote><div><p>', $text);
-		$text = preg_replace('#\[quote=(&quot;|&\#039;|"|\'|)(.*?)\\1\]#se', '"</p><div class=\"quotebox\"><cite>".str_replace(array(\'[\', \'\\"\'), array(\'&#91;\', \'"\'), \'$2\')." ".$lang_common[\'wrote\']."</cite><blockquote><div><p>"', $text);
-		$text = preg_replace('#\s*\[\/quote\]#S', '</p></div></blockquote></div><p>', $text);
+function _textile_phrase_callback($matches) {
+	global $pd;
+	$matches[2] = preg_replace_callback($pd['re_textile'], '_textile_phrase_callback', $matches[2]);
+	switch($matches[1]) {
+	case '_': return (isset($pd['bbcd']['i']))   ? '[i]'.   $matches[2] .'[/i]'   : $matches[0];
+	case '*': return (isset($pd['bbcd']['b']))   ? '[b]'.   $matches[2] .'[/b]'   : $matches[0];
+	case '@': return (isset($pd['bbcd']['tt']))  ? '[tt]'.  $matches[2] .'[/tt]'  : $matches[0];
+	case '^': return (isset($pd['bbcd']['sup'])) ? '[sup]'. $matches[2] .'[/sup]' : $matches[0];
+	case '~': return (isset($pd['bbcd']['sub'])) ? '[sub]'. $matches[2] .'[/sub]' : $matches[0];
+	case '-': return (isset($pd['bbcd']['del'])) ? '[del]'. $matches[2] .'[/del]' : $matches[0];
+	case '+': return (isset($pd['bbcd']['ins'])) ? '[ins]'. $matches[2] .'[/ins]' : $matches[0];
 	}
+}
 
-	if (!$is_signature)
-	{
-		$pattern[] = $re_list;
-		$replace[] = 'handle_list_tag(\'$2\', \'$1\')';
+/* --- function preg_error()
+Check to see what the last PREG/PCRE error was. Returns a string describing the
+last error, or an empty string if there is no error (or if the PHP version is
+older than 5.2.0).
+--- */
+function preg_error() {
+	global $pd;
+	$errmsg = '';										// assume no error has occured. return empty string
+	if ($pd['newer_php_version']) {						// this function requires PHP 5.2.0 or higher
+		switch (preg_last_error()) {					// this returns the last error condition as a number
+			case PREG_NO_ERROR:
+				break;									// no error? return empty string === FALSE
+			case PREG_INTERNAL_ERROR:
+				$errmsg = 'PREG_INTERNAL_ERROR';
+				break;
+			case PREG_BACKTRACK_LIMIT_ERROR:
+				$errmsg = 'PREG_BACKTRACK_LIMIT_ERROR';
+				break;
+			case PREG_RECURSION_LIMIT_ERROR:
+				$errmsg = 'PREG_RECURSION_LIMIT_ERROR';
+				break;
+			case PREG_BAD_UTF8_ERROR:
+				$errmsg = 'PREG_BAD_UTF8_ERROR';
+				break;
+			case PREG_BAD_UTF8_OFFSET_ERROR:
+				$errmsg = 'PREG_BAD_UTF8_OFFSET_ERROR';
+				break;
+			default:
+				$errmsg = 'Unrecognized PREG error';
+				break;
+		}
 	}
-
-	$pattern[] = '#\[b\](.*?)\[/b\]#ms';
-	$pattern[] = '#\[i\](.*?)\[/i\]#ms';
-	$pattern[] = '#\[u\](.*?)\[/u\]#ms';
-	$pattern[] = '#\[s\](.*?)\[/s\]#ms';
-	$pattern[] = '#\[del\](.*?)\[/del\]#ms';
-	$pattern[] = '#\[ins\](.*?)\[/ins\]#ms';
-	$pattern[] = '#\[em\](.*?)\[/em\]#ms';
-	$pattern[] = '#\[colou?r=([a-zA-Z]{3,20}|\#[0-9a-fA-F]{6}|\#[0-9a-fA-F]{3})](.*?)\[/colou?r\]#ms';
-	$pattern[] = '#\[h\](.*?)\[/h\]#ms';
-
-	$replace[] = '<strong>$1</strong>';
-	$replace[] = '<em>$1</em>';
-	$replace[] = '<span class="bbu">$1</span>';
-	$replace[] = '<span class="bbs">$1</span>';
-	$replace[] = '<del>$1</del>';
-	$replace[] = '<ins>$1</ins>';
-	$replace[] = '<em>$1</em>';
-	$replace[] = '<span style="color: $1">$2</span>';
-	$replace[] = '</p><h5>$1</h5><p>';
-
-	if (($is_signature && $pun_config['p_sig_img_tag'] == '1') || (!$is_signature && $pun_config['p_message_img_tag'] == '1'))
-	{
-		$pattern[] = '#\[img\]((ht|f)tps?://)([^\s<"]*?)\[/img\]#e';
-		$pattern[] = '#\[img=([^\[]*?)\]((ht|f)tps?://)([^\s<"]*?)\[/img\]#e';
-		if ($is_signature)
-		{
-			$replace[] = 'handle_img_tag(\'$1$3\', true)';
-			$replace[] = 'handle_img_tag(\'$2$4\', true, \'$1\')';
+	return $errmsg;
+}
+/* ***********************************************************
+callback function _parse_bbcode_callback($matches)
+
+  This is the callback function for the main parser. This routine is called
+when the preg_replace_callback function within the parse_bbcode() function
+matches one BBCode open/close pair. The BBCode tag components are passed in
+$matches. The BBCode is converted to HTML markup according to the format
+string specified in the $bbcd array member for this tag. If an attribute is
+specified, it is encoded along with the tag contents to generate a valid
+HTML markup snippet. If this tag is not enabled (either the 'in_post' or
+'in_sig' member in $bbcd are FALSE), then the output depends upon the tag
+type; If 'zombie' or 'hidden', then both the tags and contents are displayed.
+If 'normal', then the open and close tags are stripped and the contents are
+displayed. If 'atomic', then both the tags and contents are stripped.
+
+Parameters:
+	$matches[0];					=  ([TAG=att]..[/TAG])	// The whole match
+	$matches[1];	$tagname		=  (TAG)				// The BBCode tag name.
+	$matches[2];					=  (=)					// Attribute equals sign delimiter.
+	$matches[3];	$attribute		= '(attribute)'			// Attribute within single quotes.
+	$matches[4];	$attribute		= "(attribute)"			// Attribute within double quotes.
+	$matches[5];	$attribute		=  (attribute)			// Attribute within no-or-any quotes.
+	$matches[6];	$contents		=  (ontents)			// Tag contents.
+*********************************************************** */
+function _parse_bbcode_callback($matches) {
+	global $pd, $lang_common;
+	$tagname =& $matches[1];			// TAGNAME we are currently servicing.
+	$contents =& $matches[6];			// Shortcut to contents.
+	$tag =& $pd['bbcd'][$tagname];		// Shortcut to bbcd array entry.
+	$tag['depth']++;					// update tag-specific nesting level
+
+	// Set local parse enable flag based upon message type and global flags.
+	$enabled = (!$pd['in_signature'] && $tag['in_post'] ||	// If in a post and post-enabled, or
+		$pd['in_signature'] && $tag['in_sig'] ) ? TRUE : FALSE;	// in a sig and sig-enabled, then enabled.
+
+	// Recursively parse any nested BBCode tag markup (unless tag type is hidden).
+	if ($tag['tag_type'] !== 'hidden' && strpos($contents, '[') !== FALSE) {
+		$contents = preg_replace_callback($pd['re_bbcode'], '_parse_bbcode_callback', $contents);
+	}
+	// ------------------------------------------------------------------------------
+	// Determine $attribute and format conversion $handler to use based on attribute.
+	// ------------------------------------------------------------------------------
+	if (!$matches[2]) {	// No attribute specified? Use the NO_ATTRIB handler.
+		$attribute = '';
+		if (isset($tag['handlers']['NO_ATTRIB']))			// If we have one, use this tags
+			$handler =& $tag['handlers']['NO_ATTRIB'];		// no-attribute handler. Otherwise...
+		else $handler =& $pd['bbcd']['_ROOT_']['handlers']['NO_ATTRIB']; // Missing attribute! Strip tag.
+	} else { // Attribute specified. Assign it from one of the three possible delimitations.
+		if ($matches[3]) {									// Non-empty single-quoted value.
+			$attribute =& $matches[3]; // Strip out escape from escapes and single quotes.
+			$attribute = str_replace(array('\\\\', '\\\''), array('\\', '\''), $attribute);
 		}
-		else
-		{
-			$replace[] = 'handle_img_tag(\'$1$3\', false)';
-			$replace[] = 'handle_img_tag(\'$2$4\', false, \'$1\')';
+		elseif ($matches[4]) {								// Non-empty double-quoted value.
+			$attribute =& $matches[4]; // Strip out escape from escapes and double quotes.
+			$attribute = str_replace(array('\\\\', '\\"'), array('\\', '"'), $attribute);
 		}
+		elseif ($matches[5]) $attribute =& $matches[5];		// Non-empty un-or-any-quoted value.
+		else				 $attribute = '';				// Otherwise must be empty.
+		// Determine which type of attribute handler: fixed or variable.
+		if (isset($tag['handlers'][$attribute])) {			// If attribute matches handler key
+			$handler =& $tag['handlers'][$attribute];		// use the fixed-attribute handler.
+		} elseif (isset($tag['handlers']['ATTRIB'])) {		// Else if we have one, use this tags
+			$handler =& $tag['handlers']['ATTRIB'];			// variable attribute handler. Otherwise...
+		}  else $handler =& $pd['bbcd']['_ROOT_']['handlers']['NO_ATTRIB']; // Missing attribute! Strip tag.
+		// htmlspecialchars() was already called (but not for quotes).
+		// Hide any double quotes in attribute now.
+		$attribute = str_replace('"', '&quot;', $attribute);
 	}
 
-	$pattern[] = '#\[url\]([^\[]*?)\[/url\]#e';
-	$pattern[] = '#\[url=([^\[]+?)\](.*?)\[/url\]#e';
-	$pattern[] = '#\[email\]([^\[]*?)\[/email\]#';
-	$pattern[] = '#\[email=([^\[]+?)\](.*?)\[/email\]#';
-
-	$replace[] = 'handle_url_tag(\'$1\')';
-	$replace[] = 'handle_url_tag(\'$1\', \'$2\')';
-	$replace[] = '<a href="mailto:$1">$1</a>';
-	$replace[] = '<a href="mailto:$1">$2</a>';
-
-	// This thing takes a while! :)
-	$text = preg_replace($pattern, $replace, $text);
-
-	return $text;
-}
-
-
-//
-// Make hyperlinks clickable
-//
-function do_clickable($text)
-{
-	$text = ' '.$text;
-
-	$text = ucp_preg_replace('#(?<=[\s\]\)])(<)?(\[)?(\()?([\'"]?)(https?|ftp|news){1}://([\p{L}\p{N}\-]+\.([\p{L}\p{N}\-]+\.)*[\p{L}\p{N}]+(:[0-9]+)?(/[^\s\[]*[^\s.,?!\[;:-])?)\4(?(3)(\)))(?(2)(\]))(?(1)(>))(?![^\s]*\[/(?:url|img)\])#uie', 'stripslashes(\'$1$2$3$4\').handle_url_tag(\'$5://$6\', \'$5://$6\', true).stripslashes(\'$4$10$11$12\')', $text);
-	$text = ucp_preg_replace('#(?<=[\s\]\)])(<)?(\[)?(\()?([\'"]?)(www|ftp)\.(([\p{L}\p{N}\-]+\.)*[\p{L}\p{N}]+(:[0-9]+)?(/[^\s\[]*[^\s.,?!\[;:-])?)\4(?(3)(\)))(?(2)(\]))(?(1)(>))(?![^\s]*\[/(?:url|img)\])#uie', 'stripslashes(\'$1$2$3$4\').handle_url_tag(\'$5.$6\', \'$5.$6\', true).stripslashes(\'$4$10$11$12\')', $text);
-
-	return substr($text, 1);
-}
-
-
-//
-// Convert a series of smilies to images
-//
-function do_smilies($text)
-{
-	global $pun_config, $smilies;
-
-	$text = ' '.$text.' ';
-
-	foreach ($smilies as $smiley_text => $smiley_img)
-	{
-		if (strpos($text, $smiley_text) !== false)
-			$text = ucp_preg_replace('#(?<=[>\s])'.preg_quote($smiley_text, '#').'(?=[^\p{L}\p{N}])#um', '<img src="'.pun_htmlspecialchars(get_base_url(true).'/img/smilies/'.$smiley_img).'" width="15" height="15" alt="'.substr($smiley_img, 0, strrpos($smiley_img, '.')).'" />', $text);
+	// Set default format handler
+	$format = $handler['format'];
+
+	// -------------------------------------------
+	// Perform attribute-type-specific processing:
+	// -------------------------------------------
+	switch($handler['a_type']) {
+	case 'width_height': // This attribute type is used for video BBCodes (YouTube, Vimeo, ...).
+		if ($attribute) {
+			if (preg_match('/\b(\d++)[Xx](\d++)\b/S', $attribute, $m)) {// Check for a "123x456" WxH spec?
+				$width = (int)$m[1];									// Yes. Set both dimensions.
+				$height = (int)$m[2];
+			}
+			if (preg_match('%\bw(?:idth)?+\s*+=\s*+[\'"]?+(\d++)\b%Si', $attribute, $m))  $width  = (int)$m[1];
+			if (preg_match('%\bh(?:eight)?+\s*+=\s*+[\'"]?+(\d++)\b%Si', $attribute, $m)) $height = (int)$m[1];
+			if (isset($width) && isset($height)) {
+				$ar = (float)$width / (float)$height;
+			}
+			// Clean the attribute of any and all width/height specs.
+			$attribute = preg_replace('/[ ;#]?\b(?:(?:w(?:idth)?+|h(?:eight)?+)\s*+=\s*+([\'"])?+|\d++X)\d++\b(?(1)\1)?+/Si',
+							'', $attribute);
+			if (isset($width)) { // If set, clip to max allowed. Convert zero to global default.
+				if ($width > $pd['config']['max_width']) $width = $pd['config']['max_width'];
+				elseif ($width === 0) $width = $pd['config']['def_width']; // If zero, set to default.
+			}
+			if (isset($height)) { // If set, clip to max allowed. Convert zero to global default.
+				if ($height > $pd['config']['max_height']) $height = $pd['config']['max_height'];
+				elseif ($height === 0) $height = $pd['config']['def_height']; // If zero, set to default.
+			}
+			if (!isset($width))  $format = str_replace('width="%w_str%"',  '', $format);
+			if (!isset($height)) $format = str_replace('height="%h_str%"', '', $format);
+		} else {
+			$width = $pd['config']['def_width'];
+			$height = $pd['config']['def_height'];
+		}
+		if (isset($tag['x_padding']) && $width)		$width	+= $tag['x_padding'];
+		if (isset($tag['y_padding']) && $height)	$height	+= $tag['y_padding'];
+		break;
+	default:
+	}
+	// ----------------------------------------------------------
+	// Perform tag-specific processing of attribute and contents:
+	// ----------------------------------------------------------
+	switch($tagname) {
+
+	case 'img': // Handle disabled image, image inside of QUOTE, and width/height dimensions in attribute.
+		if (!$enabled || (!$pd['config']['quote_imgs'] && isset($pd['bbcd']['quote']) && $pd['bbcd']['quote']['depth'] > 0))
+		{ // IMG not enabled in this context. Convert to a text URL link if possible and re-enable.
+			if (isset($pd['bbcd']['url']) && $pd['bbcd']['url']['depth'] > 0) $format = "{%c_str%}";
+			else {
+				if ($attribute) $format = '{<a href="%c_str%" title="%a_str%">'. $lang_common['Image link'] .'</a>}';
+				else $format = '{<a href="%c_str%" title="'. $lang_common['BBmsg images disabled'] .'">'.
+					$lang_common['Image link'] .'</a>}';
+				$enabled = TRUE; // Re-enable to override defauslt disabled handling (i.e. dont delete.)
+			}
+		} else { // IMG is enabled in this context. Wrap image inside a clickable link if global option is set.
+			if ($pd['config']['click_imgs'] && isset($pd['bbcd']['url']) && $pd['bbcd']['url']['depth'] === 0) {
+				$format = preg_replace('/^\x01\x02([^\x01]*+)\x01$/', '<a href="%c_str%">$1</a>', $format);
+			}
+		}
+		$format = "\1\2". $format ."\1";
+		// If user provided a verbose attribute (in addition to WxH), place this in the title attribute,
+		// otherwise place the URL ($contents) in the ALT attribute and remove the title attribute from format.
+		if (preg_match('/^\s*$/', $attribute)) {
+			$attribute = $contents;
+			$format = str_replace(' title="%a_str%"', '', $format);
+		}
+		break;
+
+	case 'quote': // Quotes require language-specific "wrote:" following the posters name.
+		if ($attribute) { // Quote attribute specified. Convert optional #post_id to a post link.
+			if (preg_match('/#(\d++)$/', $attribute, $m)) // Check for optional embedded post id.
+			{ // Attribute has optional '#1234' quoted post ID number. Convert to link back to quoted post.
+				$attribute = preg_replace('/\s*#\d++$/S', '', $attribute); // Strip post id from attribute.
+				$attribute .= ' '. $lang_common['wrote'];  // Append language-specific "wrote:".
+				if ($pd['config']['quote_links']) {
+					$attribute = ' <a href="'. get_base_url(TRUE) .'/viewtopic.php?pid='.
+					$m[1] .'#p'. $m[1] . '">'. $attribute .'</a>';
+				}
+			} else $attribute .= ' '. $lang_common['wrote']; // If no post id, just add "wrote:".
+		}
+		break;
+
+// TODO: The following is somewhat of a hack. Need to implement generic handling of tags
+// which can only contain specific tags and must not contain any text (including whitespace).
+// For example: the UL and OL list tags may only contain LI tags. TABLE can only have THEAD,
+//  TBODY, TR, etc, and TR can only contain TD, etc...
+	case 'list': // Clean whitespace cruft bordering <li> tags.
+	case 'table': // Clean whitespace cruft bordering <tr> tags.
+	case 'tr': // Clean whitespace cruft bordering <td> tags.
+//		$contents = preg_replace(array('/^\s++/', '/\s+$/S', '%\s+(?=\x01\x02<(?:li|ol|ul)>)%S', '%(?<=</(?:li|ol|ul)>\x01)\s++%S'), '', $contents);
+		$contents = preg_replace(array('/^\s++/', '/\s+$/S', '%\s+(?=\x01\x02<(?:li|ol|ul|tr|td)>)%S', '%(?<=</(?:li|ol|ul|tr|td)>\x01)\s++%S'), '', $contents);
+		break;
+
+	case 'code':
+		if ($attribute) {
+			if (!isset($tag['handlers'][$attribute])) // Check for no matching attribute handler.
+			{ // Yes, the attribute may be more complex. Extract the extra verbage to add to code header.
+				if (preg_match('/^([\w\-.:]++)\s*+(.*)$/', $attribute, $m)) {
+					$type = strtolower($m[1]);
+					if (isset($tag['handlers'][$type])) { // Check if we recognize this first word?
+						$handler =& $tag['handlers'][$type];	// Yes. Set new fixed-attribute handler.
+						if ($m[2]) { // Check if there are extra words.
+							// Yes. Use this extra part of the attribute to augment the code header.
+							$format = str_replace('</h4>', ' - "'. $m[2] .'"</h4>', $handler['format']);
+						}
+						$attribute = $type;
+					}
+				}
+			}
+			// Accumulate list of syntax highlighting scripts we need to load.
+			if (isset($tag['handlers'][$attribute]) && isset($pd['syntaxes'][$attribute])) {
+				$scripts =& $pd['syntaxes'][$attribute];
+				if (!isset($pd['code_scripts'])) $pd['code_scripts'] = array();
+				foreach($scripts as $file) {
+					if (!in_array($file, $pd['code_scripts']))
+						$pd['code_scripts'][] = $file;
+				}
+			}
+		}
+		break;
+
+	case 'color':
+	case 'colour':
+		if (preg_match($pd['re_color'], $attribute, $m)) {
+			if (isset($m[2]) && $m[2]) {
+				$attribute = $m[1] .'; background-color: '. $m[2];
+			} else {
+				$attribute = $m[1];
+			}
+		}
+	default:
 	}
 
-	return substr($text, 1, -1);
-}
-
-
+	// The return value depends upon whether this tag is currently enabled.
+	if ($enabled) { // Tag is enabled. Add byte markers to hidden chunks to allow easy explode() later.
+		if (isset($width))	$format = str_replace('%w_str%', $width, $format);
+		if (isset($height))	$format = str_replace('%h_str%', $height, $format);
+		// Subtitute attribute into format string.
+		$format = str_replace('%a_str%', $attribute, $format);	// Encode attribute value.
+		// Finally, subtitute the content into the message.
+		$text = str_replace('%c_str%', $contents, $format);		// Encode contents.
+	} else { // Tag is not enabled. Strip HTML tags and contents according to tag_type.
+		 switch ($tag['tag_type']) {
+		 case 'atomic':					// Strip everything.
+		 	$text = '';
+		 	break;
+		 case 'normal':					// Strip HTML open and close tags only.
+		 	$text =& $contents;
+		 	break;
+		 case 'hidden':					// Hidden and 'zombie' tags are displayed without.
+		 case 'zombie':					// stripping anything. All [BBCODES] are displayed.
+		 default:						// Default === hidden === zombie === Strip nothing.
+		 	$text =& $matches[0];		// $format = '['. $tagname .']%c_str%[/'. $tagname .']';
+		 }
+	}
+	if ($tag['depth'] > $tag['depth_max']) $text = ''; // Silently clip overly-nested tags.
+	$tag['depth']--;					// restore pre-call tag specific depth
+	return $text;
+} // exit _parse_bbcode_callback
 //
-// Parse message text
+// Parse post or signature message text.
 //
-function parse_message($text, $hide_smilies)
-{
-	global $pun_config, $lang_common, $pun_user;
+function parse_bbcode(&$text, $hide_smilies = 0) {
+	global $pun_config, $pun_user, $pd;
 
-	if ($pun_config['o_censoring'] == '1')
+	if ($pun_config['o_censoring'] === '1') {
 		$text = censor_words($text);
-
-	// Convert applicable characters to HTML entities
-	$text = pun_htmlspecialchars($text);
-
-	// If the message contains a code tag we have to split it up (text within [code][/code] shouldn't be touched)
-	if (strpos($text, '[code]') !== false && strpos($text, '[/code]') !== false)
-	{
-		list($inside, $outside) = split_text($text, '[code]', '[/code]', $errors);
-		$text = implode("\1", $outside);
 	}
+	// Convert [&<>] characters to HTML entities (but preserve [""''] quotes).
+	$text = htmlspecialchars($text, ENT_NOQUOTES);
 
-	if ($pun_config['p_message_bbcode'] == '1' && strpos($text, '[') !== false && strpos($text, ']') !== false)
-		$text = do_bbcode($text);
-
-	if ($pun_config['o_smilies'] == '1' && $pun_user['show_smilies'] == '1' && $hide_smilies == '0')
-		$text = do_smilies($text);
-
-	// Deal with newlines, tabs and multiple spaces
-	$pattern = array("\n", "\t", '  ', '  ');
-	$replace = array('<br />', '&#160; &#160; ', '&#160; ', ' &#160;');
-	$text = str_replace($pattern, $replace, $text);
-
-	// If we split up the message before we have to concatenate it together again (code tags)
-	if (isset($inside))
-	{
-		$outside = explode("\1", $text);
-		$text = '';
-
-		$num_tokens = count($outside);
-
-		for ($i = 0; $i < $num_tokens; ++$i)
-		{
-			$text .= $outside[$i];
-			if (isset($inside[$i]))
-			//	$text .= '</p><div class="codebox"><pre><code>'.pun_trim($inside[$i], "\n\r").'</code></pre></div><p>';
-			{
-				$num_lines = (substr_count($inside[$i], "\n"));
-				$text .= '</p><div class="codebox"><pre'.(($num_lines > 28) ? ' class="vscroll"' : '').'><code>'.pun_trim($inside[$i], "\n\r").'</code></pre></div><p>';
+	// Parse BBCode if globally enabled.
+	if ($pun_config['p_message_bbcode']) {
+		$text = preg_replace_callback($pd['re_bbcode'], '_parse_bbcode_callback', $text);
+	}
+	// Set $smile_on flag depending on global flags and whether or not this is a signature.
+	if ($pd['in_signature']) {
+		$smile_on = ($pun_config['o_smilies_sig'] && $pun_user['show_smilies'] && !$hide_smilies) ? 1 : 0;
+	} else {
+		$smile_on = ($pun_config['o_smilies'] && $pun_user['show_smilies'] && !$hide_smilies) ? 1 : 0;
+	}
+	// Split text into hidden and non-hidden chunks. Process the non-hidden content chunks.
+	$parts = explode("\1", $text); // Hidden chunks pre-marked like so: "\1\2<code.../code>\1"
+	for ($i = 0, $len = count($parts); $i < $len; ++$i) { // Loop through hidden and non-hidden text chunks.
+		$part =& $parts[$i];									// Use shortcut alias
+		if (empty($part)) continue;								// Skip empty string chunks.
+		if ($part[0] !== "\2") { // If not hidden, process this normal text content.
+			if ($smile_on) { // If smileys enebled, do em all in one whack.
+				$part = preg_replace_callback($pd['re_smilies'], '_do_smilies_callback', $part);
 			}
-		}
+			// Deal with newlines, tabs and multiple spaces
+			$part = str_replace(
+				array("\n",		"\t",				'  ',		'  '),
+				array('<br />', '&#160; &#160; ',	'&#160; ',	' &#160;'), $part);
+		} else $part = substr($part, 1); // For hidden chunks, strip \2 marker byte.
 	}
+	$text = implode("", $parts); // Put hidden and non-hidden chunks back together.
 
 	// Add paragraph tag around post, but make sure there are no empty paragraphs
-	$text = preg_replace('#<br />\s*?<br />((\s*<br />)*)#i', "</p>$1<p>", $text);
 	$text = str_replace('<p><br />', '<p>', $text);
-	$text = str_replace('<p></p>', '', '<p>'.$text.'</p>');
-
+	$text = str_replace('<p></p>', '', '<p>'. $text .'</p>');
 	return $text;
 }
-
-
+//
+// Helper preg_replace_callback function for smilies processing.
+//
+function _do_smilies_callback($matches) {
+	global $pd;
+	return $pd['smilies'][$matches[0]]['html'];
+}
+//
+// Parse message text
+//
+function parse_message($text, $hide_smilies) {
+	global $pd, $pun_config, $pun_user;
+	$pd['in_signature'] = FALSE;
+	// Disable images via the $bbcd['in_post'] flag if globally disabled.
+	if ($pun_config['p_message_img_tag'] !== '1' || $pun_user['show_img'] !== '1')
+		if (isset($pd['bbcd']['img'])) $pd['bbcd']['img']['in_post'] = FALSE;
+	return parse_bbcode($text, $hide_smilies);
+}
 //
 // Parse signature text
 //
-function parse_signature($text)
-{
-	global $pun_config, $lang_common, $pun_user;
-
-	if ($pun_config['o_censoring'] == '1')
-		$text = censor_words($text);
-
-	// Convert applicable characters to HTML entities
-	$text = pun_htmlspecialchars($text);
-
-	if ($pun_config['p_sig_bbcode'] == '1' && strpos($text, '[') !== false && strpos($text, ']') !== false)
-		$text = do_bbcode($text, true);
-
-	if ($pun_config['o_smilies_sig'] == '1' && $pun_user['show_smilies'] == '1')
-		$text = do_smilies($text);
-
-
-	// Deal with newlines, tabs and multiple spaces
-	$pattern = array("\n", "\t", '  ', '  ');
-	$replace = array('<br />', '&#160; &#160; ', '&#160; ', ' &#160;');
-	$text = str_replace($pattern, $replace, $text);
-
-	// Add paragraph tag around post, but make sure there are no empty paragraphs
-	$text = preg_replace('#<br />\s*?<br />((\s*<br />)*)#i', "</p>$1<p>", $text);
-	$text = str_replace('<p><br />', '<p>', $text);
-	$text = str_replace('<p></p>', '', '<p>'.$text.'</p>');
-
-	return $text;
+function parse_signature($text) {
+	global $pd, $pun_config, $pun_user;
+	$pd['in_signature'] = TRUE;
+	// Disable images via the $bbcd['in_sig'] flag if globally disabled.
+	if ($pun_config['p_sig_img_tag'] !== '1' || $pun_user['show_img_sig'] !== '1')
+		if (isset($pd['bbcd']['img'])) $pd['bbcd']['img']['in_sig'] = FALSE;
+	return parse_bbcode($text);
 }
+?>
\ No newline at end of file
diff --git a/lang/English/admin_common.php b/lang/English/admin_common.php
index a87616c..04266ee 100644
--- a/lang/English/admin_common.php
+++ b/lang/English/admin_common.php
@@ -13,6 +13,7 @@
 'Users'					=>	'Users',
 'User groups'			=>	'User groups',
 'Options'				=>	'Options',
+'Parser'				=>	'Parser',
 'Permissions'			=>	'Permissions',
 'Censoring'				=>	'Censoring',
 'Ranks'					=>	'Ranks',
diff --git a/lang/English/admin_parser.php b/lang/English/admin_parser.php
new file mode 100644
index 0000000..2689d4d
--- /dev/null
+++ b/lang/English/admin_parser.php
@@ -0,0 +1,93 @@
+<?php
+// Language definitions used by parser admin panel
+$lang_admin_parser = array(
+	'Parser head'			=>	'Parser Options, BBCodes and Smilies',
+	'reset_success'			=>	'Parser Options, BBCodes and Smilies successfully reset to FluxBB default settings.',
+	'save_success'			=>	'Parser changes successfully saved.',
+	'upload success'		=>	'Smiley file upload successful.',
+	'upload_button'			=>	'Upload Smiley Image',
+	'reset defaults'			=>	'Restore default settings',
+
+/* *********************************************************************** */
+	'Remotes subhead'		=>	'Remote image validation',
+	'unavailable'			=>	'This function is unavailable.',
+
+/* *********************************************************************** */
+	'Config subhead'		=>	'Parser options',
+
+	'syntax style'			=>	'CODE syntax style',
+	'syntax style help'		=>	'Select a style sheet file from this list of currently installed SyntaxHighlighter files.',
+
+	'textile'				=>	'Enable Textile shortcuts',
+	'textile help'			=>	'Enable some textile tag keystroke shortcuts: _emphasized_, *strong*, @inline code@, super^script^, sub~script~, -deleted- and +inserted+ text. Textile shortcuts for bulleted (*) and numbered (#) lists are also supported. When posting a new message, (or editing an existing one), during the pre-parsing phase, the textile shortcut delimiters are converted to their equivalent BBCode tags before being stored in the database.',
+
+	'quote_imgs'			=>	'Display IMG in QUOTE ',
+	'quote_imgs help'		=>	'Display images contained within QUOTE tags. If this option is set to "No" (the default setting), then images within a quote are not displayed graphically but are instead displayed as a simple text hyperlink to the image (with the link text set to: "{IMG}"). If this option is set to "Yes", then images within quotes are displayed normally (as a graphic object).',
+
+	'quote_links'			=>	'Linkify QUOTE citation',
+	'quote_links help'		=>	'Make the "Poster wrote:" citation text a link back to the original post for quotes having original post number metadata included in the tag attribute (the post number, preceded by a: \'#\', is specified at the end of the attribute like so: "[quote=Admin #101]...[/quote]").',
+
+	'click_imgs'			=>	'Make IMG clickable',
+	'click_imgs help'		=>	'Display images and also make each image a clickable link to the full sized original.',
+
+	'max_xy'				=>	'Maximum media XY',
+	'max_xy help'			=>	'Maximum pixel width and height allowable for new visual media objects (images, videos etc).',
+
+	'smiley_size'			=>	'Smiley display size',
+	'smiley_size help'		=>	'Percent size adjustment for smiley box dimensions (default 160% == 24x24 pixels).',
+
+/* *********************************************************************** */
+	'valid_imgs'			=>	'Validate remote IMG',
+	'valid_imgs help'		=>	'When posting a message having IMG tags, validate the existence of the remote image files by requesting their file header information. Check each remote image filesize and do NOT display if too big (to save the forum viewer\'s bandwidth). If any image has a dimension greater than "Max width" or "Max height", then limit the displayed image to fit. (Note that this option is disabled if the PHP variable "allow_url_fopen" is FALSE.)',
+
+	'max_size'				=>	'Maximum IMG filesize',
+	'max_size help'			=>	'Maximum remote image filesize to be allowed on forum pages. When creating a new post, the remote image file size is checked against this value and reported as an error if it is too big and image validation is on.',
+
+	'def_xy'				=>	'Default media XY',
+	'def_xy help'			=>	'Default pixel width and height for new visual media objects (images, videos etc). When a post has an IMG tag and the "Validate remote IMG" option is turned on, then the remote file information is scaled to fit within these dimensions and retain the original aspect ratio.',
+
+/* *********************************************************************** */
+	'Smilies subhead'		=>	'Smilies',
+	'smiley_text_label'		=>	'Smiley text',
+	'smiley_file_label'		=>	'Smiley image file',
+	'smiley_upload'			=>	'Upload new smiley image',
+	'upload_err_1'			=>	'Smiley upload failed. Unable to move to smiley folder.',
+	'upload_err_2'			=>	'Smiley upload failed. File is too big.',
+	'upload_err_3'			=>	'Smiley upload failed. File type is not an image.',
+	'upload_err_4'			=>	'Smiley upload failed. Bad filename.',
+	'upload_err_5'			=>	'Smiley upload failed. File only partially uploaded.',
+	'upload_err_6'			=>	'Smiley upload failed. No filename.',
+	'upload_err_7'			=>	'Smiley upload failed. No temporary folder.',
+	'upload_err_8'			=>	'Smiley upload failed. Cannot write file to disk.',
+	'upload_err_9'			=>	'Smiley upload failed. Unknown error!',
+	'upload_off'			=>	'Uploading files is currently disabled.',
+	'upload_button'			=>	'Upload File',
+
+/* *********************************************************************** */
+	'BBCodes subhead'		=>	'BBCodes',
+	'tagname_label'			=>	'BBCode Tag Name',
+	'tagtype_label'			=>	'Tag type',
+	'in_post_label'			=>	'Allow in posts?',
+	'in_sig_label'			=>	'Allow in signatures?',
+	'depth_max'				=>	'Max tag nesting depth.',
+	'tag_summary'		=>	array(
+		'unknown'		=>	'Unrecognized tag - (need to update language file).',
+		'code'			=>	'Computer Code. [attrib=language].',
+		'quote'			=>	'Block Quotation. [attrib == citation].',
+		'list'			=>	'Ordered or Unordered list. (*=bulleted | a=alpha | 1=numeric).',
+		'*'				=>	'List Item.',
+		'h'				=>	'Header 5. [attrib=TITLE].',
+		'img'			=>	'Inline Image. [attrib=ALT=TITLE].',
+		'url'			=>	'Hypertext Link. [attrib=URL].',
+		'b'				=>	'Strong Emphasis. (Bold).',
+		'i'				=>	'Emphasis. (Italic).',
+		's'				=>	'Strike-through Text.',
+		'u'				=>	'Underlined Text.',
+		'color'			=>	'Color. attrib=[#FFF | #FFFFFF | red].',
+		'tt'			=>	'Teletype Text.',
+		'center'		=>	'Centered Block.',
+		'err'			=>	'Error codes generated by parser for invalid BBCode. [attrib=TITLE].',
+		'dbug'			=>	'Debug messages generated by parser. [attrib=TITLE].',
+	),
+);
+?>
\ No newline at end of file
diff --git a/lang/English/common.php b/lang/English/common.php
index 7a88e18..700d482 100644
--- a/lang/English/common.php
+++ b/lang/English/common.php
@@ -81,13 +81,40 @@
 'Guest'								=>	'Guest',
 
 // Stuff for include/parser.php
-'BBCode error no opening tag'		=>	'[/%1$s] was found without a matching [%1$s]',
-'BBCode error invalid nesting'		=>	'[%1$s] was opened within [%2$s], this is not allowed',
-'BBCode error invalid self-nesting'	=>	'[%s] was opened within itself, this is not allowed',
-'BBCode error no closing tag'		=>	'[%1$s] was found without a matching [/%1$s]',
-'BBCode error empty attribute'		=>	'[%s] tag had an empty attribute section',
-'BBCode code problem'				=>	'There is a problem with your [code] tags',
-'BBCode list size error'			=>	'Your list was too long to parse, please make it smaller!',
+//'BBCode error no opening tag'		=>	'[/%1$s] was found without a matching [%1$s]',
+//'BBCode error invalid nesting'		=>	'[%1$s] was opened within [%2$s], this is not allowed',
+//'BBCode error invalid self-nesting'	=>	'[%s] was opened within itself, this is not allowed',
+//'BBCode error no closing tag'		=>	'[%1$s] was found without a matching [/%1$s]',
+//'BBCode error empty attribute'		=>	'[%s] tag had an empty attribute section',
+//'BBCode code problem'				=>	'There is a problem with your [code] tags',
+//'BBCode list size error'			=>	'Your list was too long to parse, please make it smaller!',
+
+
+// New 2011 parser strings.
+'BBerr pcre'						=>	'(%s) Message is too long or too complex. Please shorten.',			// Error 1
+'BBerr unexpected attribute'		=>	'Unexpected attribute: "%1$s". (No attribute allowed for (%2$s).',	// Error 2
+'BBerr unrecognized attribute'		=>	'Unrecognized attribute: "%1$s", is not valid for (%2$s).',			// Error 3
+'BBerr bbcode attribute'			=>	'Attribute may NOT contain open or close bbcode tags',				// Error 4
+'BBerr missing attribute'			=>	'(%1$s) is missing a required attribute.',							// Error 5
+'BBerr nesting overflow'			=>	'(%1$s) tag nesting depth: %2$d exceeds allowable limit: %3$d.',	// Error 6
+'BBerr self-nesting'				=>	'(%s) was opened within itself, this is not allowed.',				// Error 7
+'BBerr invalid nesting'				=>	'(%1$s) was opened within (%2$s), this is not allowed.',			// Error 8
+'BBerr invalid parent'				=>	'(%1$s) cannot be within: (%2$s). Allowable parent tags: %3$s.',	// Error 9
+'BBerr Invalid URL name'			=>	'Invalid URL name: %s',												// Error 10
+'BBerr Invalid email address'		=>	'Invalid email address: %s',										// Error 10c
+'BBerr Invalid color'				=>	'Invalid color attribute: %s',										// Error 11
+'BBerr invalid content'				=>	'Invalid content, (%s) requires specific content.',					// Error 12
+'BBerr bad meta data'				=>	'Unable to retrieve image data from remote url: %s',				// Error 13
+'BBerr no file size'				=>	'Unable to determine remote file size.',							// Error 14
+'BBerr non image'					=>	'Remote url does not have Content-Type: "image".',					// Error 15
+'BBerr bad http response'			=>	'Bad HTTP response header: "%s"',									// Error 16
+'BBerr bad headers'					=>	'Unable to read remote image http headers.',						// Error 17
+'BBerr orphan close'				=>	'Orphan close tag: (/%s) is missing its open tag.',					// Error 18
+'BBerr orphan open'					=>	'Orphan open tag: (%s) is missing its close tag.',					// Error 19
+
+'BBmsg big image'					=>	'Big image',														// Msg 1
+'BBmsg images disabled'				=>	'Image display not currently enabled in this context',				// Msg 2
+
 
 // Stuff for the navigator (top of every page)
 'Index'								=>	'Index',
diff --git a/post.php b/post.php
index 20a0737..619f384 100644
--- a/post.php
+++ b/post.php
@@ -1,5 +1,5 @@
 <?php
-
+//define('DBUG', 'on');       // perform benchmarking of parse_message()
 /**
  * Copyright (C) 2008-2011 FluxBB
  * based on code by Rickard Andersson copyright (C) 2002-2008 PunBB
@@ -133,6 +133,14 @@
 	{
 		require PUN_ROOT.'include/parser.php';
 		$message = preparse_bbcode($message, $errors);
+
+/************ BEGIN DEBUG OUTPUT CODE ***************/
+if (defined('DBUG')) {       // perform benchmarking of parse_message()
+	$bd = benchmark_12('preparse_bbcode', $message, .33, FALSE, $errors); // Speed check.
+	$message .= '[dbug="from post.php"]'. $bd['msg'] .'[/dbug]';
+}
+/************ END DEBUG OUTPUT CODE ***************/
+
 	}
 
 	if (empty($errors))
@@ -426,65 +434,24 @@
 
 		list($q_poster, $q_message) = $db->fetch_row($result);
 
-		// If the message contains a code tag we have to split it up (text within [code][/code] shouldn't be touched)
-		if (strpos($q_message, '[code]') !== false && strpos($q_message, '[/code]') !== false)
-		{
-			$errors = array();
-			list($inside, $outside) = split_text($q_message, '[code]', '[/code]', $errors);
-			if (!empty($errors)) // Technically this shouldn't happen, since $q_message is an existing post it should only exist if it previously passed validation
-				message($errors[0]);
-
-			$q_message = implode("\1", $outside);
-		}
-
-		// Remove [img] tags from quoted message
-		$q_message = preg_replace('%\[img(?:=(?:[^\[]*?))?\]((ht|f)tps?://)([^\s<"]*?)\[/img\]%U', '\1\3', $q_message);
-
-		// If we split up the message before we have to concatenate it together again (code tags)
-		if (isset($inside))
-		{
-			$outside = explode("\1", $q_message);
-			$q_message = '';
-
-			$num_tokens = count($outside);
-			for ($i = 0; $i < $num_tokens; ++$i)
-			{
-				$q_message .= $outside[$i];
-				if (isset($inside[$i]))
-					$q_message .= '[code]'.$inside[$i].'[/code]';
-			}
-
-			unset($inside);
-		}
-
-		if ($pun_config['o_censoring'] == '1')
-			$q_message = censor_words($q_message);
-
 		$q_message = pun_htmlspecialchars($q_message);
 
 		if ($pun_config['p_message_bbcode'] == '1')
-		{
-			// If username contains a square bracket, we add "" or '' around it (so we know when it starts and ends)
-			if (strpos($q_poster, '[') !== false || strpos($q_poster, ']') !== false)
-			{
-				if (strpos($q_poster, '\'') !== false)
-					$q_poster = '"'.$q_poster.'"';
-				else
-					$q_poster = '\''.$q_poster.'\'';
-			}
-			else
-			{
-				// Get the characters at the start and end of $q_poster
-				$ends = substr($q_poster, 0, 1).substr($q_poster, -1, 1);
-
-				// Deal with quoting "Username" or 'Username' (becomes '"Username"' or "'Username'")
-				if ($ends == '\'\'')
-					$q_poster = '"'.$q_poster.'"';
-				else if ($ends == '""')
-					$q_poster = '\''.$q_poster.'\'';
-			}
-
-			$quote = '[quote='.$q_poster.']'.$q_message.'[/quote]'."\n";
+		{	// Sanitize username for inclusion within QUOTE BBCode attribute.
+			//   This is a bit tricky because a username can have any "special"
+			//   characters such as backslash \ square brackets [] and quotes '".
+			if (preg_match('/[[\]\'"]/S', $q_poster)) // Check if we need to quote it.
+			{ // Post has special chars. Escape escapes and quotes then wrap in quotes.
+				if (strpos($q_poster, '"') !== false && strpos($q_poster, '\'') === false)
+				{ // If there are double quotes but no single quotes, use single quotes,
+					$q_poster = pun_htmlspecialchars(str_replace('\\', '\\\\', $q_poster));
+					$q_poster = '\''. $q_poster .'#'. $qid .'\'';
+				} else { // otherwise use double quotes.
+					$q_poster = pun_htmlspecialchars(str_replace(array('\\', '"'), array('\\\\', '\\"'), $q_poster));
+					$q_poster = '"'. $q_poster .'#'. $qid .'"';
+				}
+			} else $q_poster = $q_poster .'#'. $qid;
+			$quote = '[quote='. $q_poster .']'.$q_message.'[/quote]'."\n";
 		}
 		else
 			$quote = '> '.$q_poster.' '.$lang_common['wrote']."\n\n".'> '.$q_message."\n";
@@ -520,9 +487,9 @@
 	<div class="inbox">
 		<ul class="crumbs">
 			<li><a href="index.php"><?php echo $lang_common['Index'] ?></a></li>
-			<li><span>»&#160;</span><a href="viewforum.php?id=<?php echo $cur_posting['id'] ?>"><?php echo pun_htmlspecialchars($cur_posting['forum_name']) ?></a></li>
-<?php if (isset($cur_posting['subject'])): ?>			<li><span>»&#160;</span><a href="viewtopic.php?id=<?php echo $tid ?>"><?php echo pun_htmlspecialchars($cur_posting['subject']) ?></a></li>
-<?php endif; ?>			<li><span>»&#160;</span><strong><?php echo $action ?></strong></li>
+			<li><span>&#187;&#160;</span><a href="viewforum.php?id=<?php echo $cur_posting['id'] ?>"><?php echo pun_htmlspecialchars($cur_posting['forum_name']) ?></a></li>
+<?php if (isset($cur_posting['subject'])): ?>			<li><span>&#187;&#160;</span><a href="viewtopic.php?id=<?php echo $tid ?>"><?php echo pun_htmlspecialchars($cur_posting['subject']) ?></a></li>
+<?php endif; ?>			<li><span>&#187;&#160;</span><strong><?php echo $action ?></strong></li>
 		</ul>
 	</div>
 </div>
@@ -543,7 +510,7 @@
 <?php
 
 	foreach ($errors as $cur_error)
-		echo "\t\t\t\t".'<li><strong>'.$cur_error.'</strong></li>'."\n";
+		echo "\t\t\t\t".'<li class="err">'.$cur_error.'</li>'."\n";
 ?>
 			</ul>
 		</div>
@@ -553,11 +520,22 @@
 <?php
 
 }
-else if (isset($_POST['preview']))
+
+if (isset($_POST['preview']))
+//else if (isset($_POST['preview']))
+
 {
 	require_once PUN_ROOT.'include/parser.php';
 	$preview_message = parse_message($message, $hide_smilies);
 
+/************ BEGIN DEBUG OUTPUT CODE ***************/
+if (defined('DBUG')) {       // perform benchmarking of parse_message()
+	$bd = benchmark_12('parse_message', $message, .33, FALSE, $hide_smilies); // Speed check.
+	$preview_message .= '<p class="debug" title="from post.php">'. $bd['msg'] .'</p>';
+}
+/************ END DEBUG OUTPUT CODE ***************/
+if (count($errors) > 0) $message =& $orig_message;
+
 ?>
 <div id="postpreview" class="blockpost">
 	<h2><span><?php echo $lang_post['Post preview'] ?></span></h2>
@@ -609,7 +587,7 @@
 if ($fid): ?>
 						<label class="required"><strong><?php echo $lang_common['Subject'] ?> <span><?php echo $lang_common['Required'] ?></span></strong><br /><input class="longinput" type="text" name="req_subject" value="<?php if (isset($_POST['req_subject'])) echo pun_htmlspecialchars($subject); ?>" size="80" maxlength="70" tabindex="<?php echo $cur_index++ ?>" /><br /></label>
 <?php endif; ?>						<label class="required"><strong><?php echo $lang_common['Message'] ?> <span><?php echo $lang_common['Required'] ?></span></strong><br />
-						<textarea name="req_message" rows="20" cols="95" tabindex="<?php echo $cur_index++ ?>"><?php echo isset($_POST['req_message']) ? pun_htmlspecialchars($orig_message) : (isset($quote) ? $quote : ''); ?></textarea><br /></label>
+						<textarea name="req_message" rows="20" cols="95" tabindex="<?php echo $cur_index++ ?>"><?php echo isset($_POST['req_message']) ? pun_htmlspecialchars($message) : (isset($quote) ? $quote : ''); ?></textarea><br /></label>
 						<ul class="bblinks">
 							<li><span><a href="help.php#bbcode" onclick="window.open(this.href); return false;"><?php echo $lang_common['BBCode'] ?></a> <?php echo ($pun_config['p_message_bbcode'] == '1') ? $lang_common['on'] : $lang_common['off']; ?></span></li>
 							<li><span><a href="help.php#img" onclick="window.open(this.href); return false;"><?php echo $lang_common['img tag'] ?></a> <?php echo ($pun_config['p_message_bbcode'] == '1' && $pun_config['p_message_img_tag'] == '1') ? $lang_common['on'] : $lang_common['off']; ?></span></li>
diff --git a/style/Air.css b/style/Air.css
index 59614e9..747f767 100644
--- a/style/Air.css
+++ b/style/Air.css
@@ -1625,3 +1625,28 @@ html, body, .pun {
 .pun .inew .icon {
 	border-color: #91b3d9 #87a8d1 #6c85bb #7292c3;
 }
+/* Extra parser stuff
+-----------------------------------------------------------------*/
+.regex_err {
+	color: #FFF; background-color: #F00;
+	}
+
+.regex_hl {
+/*	color: #FFF; background-color: #060; */
+/*	color: #FFF; background-color: #088; */
+	color: #FFF; background-color: #060;
+	}
+.regex, .regex_x {
+	color: #FFF;
+	background: #2A2A2A;
+	}
+.pun p.debug {
+	color: yellow;
+	background-color: #333;
+	border: 1px yellow solid;
+	padding: .5em;
+}
+.pun .err {
+	color: #FFF;
+	background-color: #A00;
+}
diff --git a/style/Mercury.css b/style/Mercury.css
index 93cea7e..a3dd866 100644
--- a/style/Mercury.css
+++ b/style/Mercury.css
@@ -132,12 +132,12 @@
 	}
 
 .pun .usercontent ul, .pun .postmsg ul {
-	padding: 0.75em 1em 0.75em 2.5em;
+	padding: 0.75em 1em 0.75em 4.5em;
 	list-style: disc
 	}
 
 .pun .usercontent ol, .pun .postmsg ol {
-	padding: 0.75em 1em 0.75em 2.5em;
+	padding: 0.75em 1em 0.75em 4.5em;
 	list-style: decimal
 	}
 
@@ -192,7 +192,7 @@
 	}
 
 .pun .postmsg ins, #punhelp samp ins {
-	text-decoration: none;
+	text-decoration: underline;
 	}
 
 .pun div.postmsg h5, #punhelp h5 {
@@ -861,7 +861,7 @@
 	padding-bottom: 10px
 	}
 
-.pun .codebox pre code {
+.pun .codebox pre {
 	display: block;
 	padding: 0.75em;
 	}
@@ -1001,10 +1001,6 @@ body {
 	color: #a19e96
 	}
 
-.pun .postmsg ins, #punhelp samp ins {
-	background-color: #ff0;
-	}
-
 .pun hr {
 	background-color: #606060;
 	color: #606060
@@ -1095,3 +1091,25 @@ body {
 .pun .inew .icon {
 	border-color: #f6b620 #ecae1f #d09a1b #e1a61d
 	}
+/* Extra parser stuff
+-----------------------------------------------------------------*/
+.pun p.debug {
+	color: yellow;
+	background-color: #333;
+	border: 1px yellow solid;
+	padding: .5em;
+}
+.pun .err {
+	color: #FFF;
+	background-color: #A00;
+}
+.regex_err {
+	color: #FFF; background-color: #F00;
+	}
+.regex_hl {
+	color: #FFF; background-color: #060;
+	}
+.regex, .regex_x {
+	color: #FFF;
+	background: #2A2A2A;
+	}
diff --git a/viewtopic.php b/viewtopic.php
index c604ca2..094e293 100644
--- a/viewtopic.php
+++ b/viewtopic.php
@@ -191,6 +191,7 @@
 $page_title = array(pun_htmlspecialchars($pun_config['o_board_title']), pun_htmlspecialchars($cur_topic['forum_name']), pun_htmlspecialchars($cur_topic['subject']));
 define('PUN_ALLOW_INDEX', 1);
 define('PUN_ACTIVE_PAGE', 'index');
+require PUN_ROOT.'include/parser.php';
 require PUN_ROOT.'header.php';
 
 ?>
@@ -212,7 +213,6 @@
 <?php
 
 
-require PUN_ROOT.'include/parser.php';
 
 $post_count = 0; // Keep track of post numbers
 
